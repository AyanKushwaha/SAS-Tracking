/* -*- crc -*- 
*/

module leave_params

/* Imports */
import basic;
import leave_basic;
import leave_crewinfo;
import leave_tables;
import system_db_parameters;

/* ---- Definition of accounts, reducing types, bids etc -----*/
export %pattern_acts_parttime_type% = "D";
export %va_account% = "VA";
export %va_entitlement_account% = "VA_ENTITLEMENT";
export %va_buffer_account% = "VA_BUFFER";
export %f7_account% = "F7";
export %f7_entitlement_account% = "F7_ENTITLEMENT";
export %f7_buffer_account% = "F7_BUFFER";
export %va1_account% = "VA1";
export %va1_entitlement_account% = "VA1_ENTITLEMENT";
export %va1_buffer_account% = "VA1_BUFFER";
export %saved_va_1% = "VA_SAVED1";
export %saved_va_2% = "VA_SAVED2";
export %saved_va_3% = "VA_SAVED3";
export %saved_va_4% = "VA_SAVED4";
export %saved_va_5% = "VA_SAVED5";
export %f3_account% = "F3";
export %f3_entitlement_account% = "F3_ENTITLEMENT";
export %f3_buffer_account% = "F3_BUFFER";
export %f3S_account% = "F3S";
export %f3S_entitlement_account% = "F3S_ENTITLEMENT";
export %f3S_buffer_account% = "F3S_BUFFER";
export %f37_account% = "F37";
export %f37_entitlement_account% = "F37_ENTITLEMENT";
export %f37_buffer_account% = "F37_BUFFER";
export %va_code% = "VA";
export %f7_code% = "F7";
export %f7s_code% = "F7S";
export %va1_code% = "VA1";
export %f3_code% = "F3";
export %f3S_code% = "F3S";
export %f37_code% = "F37";
export %reduce_for_all_occurrences% = "ALL";
export %reduce_after_offset_occurrences_in_a_row% = "AFTERINROW";
export %reduce_after_offset_occurrences% = "AFTERINTOTAL";
export %reduce_according_to_predefines_table% = "ALLTABLE";
export %reduce_inarow_and_total%  = "INROW_AND_TOTAL";
export %save_va_bid% = "TRANSFER";
export %joinremaining_bid% = "JOINVACATION";

/* Sets */
/*parameters to rule minimum_days_between_activities */
export set min_days_between_activities=
  "VA","F7","VA1", "LA57", "LA64", "LA63", "LA65", "LA66", "TH1";


/* ----------------------------------------------------------- */
export %crewtype%(abstime date) =
  if leave_crewinfo.%crew_has_A3_or_A4_or_AL_qual%(date) then
    "LH"
  else
    "SH";

export %min_vacation_block_length_at_trip_start% =
  %min_vacation_block_length%(%trip_start%);

/* Defines what is considered short vacation with higher
   balance rate */
export %should_use_short_vacation%(int days, abstime start) =
  %_is_short_vacation%(days, start);

/* ----------------------------------------------------------- */
/* Date where manpower transactions should start (_including_ this date) */
export %start_date_of_manpower_transactions% = default(%balance_migration_date%, %_start_date_of_manpower_transactions%);
%_start_date_of_manpower_transactions% = parameter 01jan1986 00:00;

/* Migration date, initial data load*/
table balance_migration_table = 
  "balance", "MIGRATION" -> export abstime %balance_migration_date%;
  external "accumulator_int_run";
  accname, acckey   ->	accstart;
  -,	  -	    ->	void(abstime);
end

/* Table Definitions */
/* List of codes that is ok to overlap vacation with.*/
table va_overlap =
  leave_crewinfo.%cat%(%trip_start%),
        leave_crewinfo.%base%(%trip_start%),
                leave_crewinfo.%company%(%trip_start%),
                     activity_subtype ->
                               export %ok_to_overlap%;
  -  ,  -    ,  -  , "F"    -> true;
  -  ,  -    ,  -  , "F0"   -> true;
  -  ,  -    ,  -  , "F3"   -> true;
  -  ,  -    ,  -  , "F31"  -> true;
  -  ,  -    ,  -  , "F3S"  -> true;
  -  ,  -    ,  -  , "F35"  -> true;
  -  ,  -    ,  -  , "F37"  -> true;
  -  ,  -    ,  -  , "F38"  -> true;  
  -  ,  -    ,  -  , "FS"   -> true;
  -  ,  -    ,  -  , "F14"  -> true;
  -  ,  -    ,  -  , "F7S"  -> true;
  -  ,  -    ,  -  , "F8"   -> true;
  -  ,  -    ,  -  , "F9"   -> true;
  -  ,  -    ,  -  , "F88"  -> true;
  -  ,  -    ,  -  , "FK"   -> true;
  -  ,  -    ,  -  , "FV"   -> true;
  -  ,  -    ,  -  , "FW"   -> true;
  -  ,  -    ,  -  , "KD"   -> true;
  -  ,  -    ,  -  , "ME"   -> true;
  -  ,  -    ,  -  , "MT1"  -> true;
  -  ,  -    ,  -  , "MT11" -> true;
  -  ,  -    ,  -  , "MT12" -> true;
  -  ,  -    ,  -  , "MT17" -> true;
  -  ,  -    ,  -  , "MT18" -> true;
  -  ,  -    ,  -  , "MT2"  -> true;
  -  ,  -    ,  -  , "MT21" -> true;
  -  ,  -    ,  -  , "MT3"  -> true;
  -  ,  -    ,  -  , "MT4"  -> true;
  -  ,  -    ,  -  , "MT5"  -> true;
  -  ,  -    ,  -  , "MT6"  -> true;
  -  ,  -    ,  -  , "MT7"  -> true;
  -  ,  -    ,  -  , "MT8"  -> true;
  -  ,  -    ,  -  , "MT85" -> true;
  -  ,  -    ,  -  , "MT9"  -> true;
  -  ,  -    ,  -  , "OA5"  -> true;
  -  ,  -    ,  -  , "OF1"  -> true;
  -  ,  -    ,  -  , "OF2"  -> true;
  -  ,  -    ,  -  , "OF4"  -> true;
  -  ,  -    ,  -  , "OK51" -> true;
  -  ,  -    ,  -  , "OK53" -> true;
  -  ,  -    ,  -  , "ON1"  -> true;
  -  ,  -    ,  -  , "OO3"  -> true;
  -  ,  -    ,  -  , "OO5"  -> true;
  -  ,  -    ,  -  , "OQ1"  -> true;
  -  ,  -    ,  -  , "YX"   -> true;
  -  ,  -    ,  -  ,  -     -> false;
end


/* What happens to the surrounding seasons .. */
table new_extended_season_due_to_rotation_table(abstime date, string thisseason, int year) =
  %planseason%(thisseason), /*(if RFI 16)*/
  leave_crewinfo.%crew_rotation%(%seasonname%(date, "SUMMER"), /*RFI 16*/ year),
  leave_crewinfo.%crew_contract_grouptype%(date)
  -> export int %extended_season%;
  "SPRING", "91", - ->  2;
  "SPRING", "91A",- ->  2;
  "SPRING", "91B",- ->  2;
  "SPRING", "91C",- ->  2;
  "AUTUMN", "91", - ->  2;
  "AUTUMN", "91A",- ->  2;
  "AUTUMN", "91B",- ->  2;
  "AUTUMN", "91C",- ->  2;
  "AUTUMN", "99", - -> -4;
  "AUTUMN", "99A",- -> -4;
  "AUTUMN", "99B",- -> -4;
  "AUTUMN", "99C",- -> -4;
  "WINTER", "91", - ->  2;
  "WINTER", "91A",- ->  2;
  "WINTER", "91B",- ->  2;
  "WINTER", "91C",- ->  2;
  "WINTER", "99",- ->  -4;
  "WINTER", "99A",- -> -4;
  "WINTER", "99B",- -> -4;
  "WINTER", "99C",- -> -4;
  -,-,-    ->  0;
end


/* For RFI 16, dividing seasons into F- and C-seasons
   Translation seasonname -> planseason
   eg seasonname F_SUMMER -> planseason SUMMER */
table planseasons(string season) =
  season -> %planseason%;
  "F SUMMER" -> "SUMMER";
  "F SPRING" -> "SPRING";
  "F AUTUMN" -> "AUTUMN";
  "F WINTER" -> "WINTER";
  "F MAY"    -> "MAY";
  "C SUMMER" -> "SUMMER";
  "C SPRING" -> "SPRING";
  "C AUTUMN" -> "AUTUMN";
  "C WINTER" -> "WINTER";
  "C MAY"    -> "MAY";
end


table season_names(abstime date, string season) =
  leave_crewinfo.%cat%(date), season -> export %seasonname%;
  "F", "SUMMER" -> "F SUMMER";
  "F", "SPRING" -> "F SPRING";
  "F", "AUTUMN" -> "F AUTUMN";
  "F", "WINTER" -> "F WINTER";
  "F", "MAY"    -> "F MAY";
  "C", "SUMMER" -> "C SUMMER";
  "C", "SPRING" -> "C SPRING";
  "C", "AUTUMN" -> "C AUTUMN";
  "C", "WINTER" -> "C WINTER";
  "C", "MAY"    -> "C MAY";
end


/* Number of days a season is extended because of different rotations. Sadly, we need two tables... */
/* What happens to the summer season */
table extended_season_due_to_rotation_table(string season, int year) =
  default(leave_crewinfo.%crew_rotation%(season, year),"NA")  ->
    export int %season_start_rotation_difference%,
    export int %season_end_rotation_difference%;
  "91" ->  2, 0;
  "91A" -> 2, 0;
  "91B" -> 2, 0;
  "91C" -> 2, 0;
  "99" ->  0, 4;
  "99A" -> 0, 4;
  "99B" -> 0, 4;
  "99C" -> 0, 4;
  -    ->  0, 0;
end


table minimum_days_between_activities(abstime vacstart) =
  leave_crewinfo.%cat%(vacstart),
  leave_crewinfo.%crew_contract_grouptype%(vacstart) ->
    export int %minimum_days_between_activities%;
  "C", "F" -> 8;
  "C", "V" -> 7;
  "F", "F" -> 8;
  "F", "V" -> 7;
  -,- -> void(int);
end


/*Table that defines the minimum length of a vacation block for crew*/
table min_length_table(abstime date) =
  leave_crewinfo.%cat%(date),
  leave_crewinfo.%base%(date),
  leave_crewinfo.%company%(date),
  leave_crewinfo.%crew_contract_grouptype%(date) ->
     export int %min_vacation_block_length%;
  "F",     -,    -, "V" -> 7;
  "C", "STO",    -, "V" -> 5;
  "C", "CPH",    -, "V" -> 5;
  &
  "C",     -,    -, "V" -> 7;
    -,     -,    -,   - -> void(int);
end


table use_short_vacation_codes(int days, abstime start) =
  leave_crewinfo.%cat%(start), 
  leave_crewinfo.%region%(start),
  days ->
    export bool %_is_short_vacation%;
  "F", "SKN", <=3 -> true;
   -,-,- -> false;
end


/* Table of allowable number of days to move a vacationblock to fulfil the bid.
   Takes main category/rank, base, company and contact type F/V.
   The result should be a commaseperated string of numbers. */
table valid_vacation_moves(abstime date) =
  leave_crewinfo.%cat%(date), leave_crewinfo.%base%(date), leave_crewinfo.%company%(date),
  leave_crewinfo.%crew_contract_grouptype%(date) ->
    export string %legal_vacation_move%;
  "F",     -, -, "V" -> "-1, 1, -2, 2";  
  "C", "CPH", -, "V" -> "-1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7";
    -, -, -, - -> "";
end

/* Allowed negative balance. */
export %allowed_negative_balance%(abstime date, string season) = 
  %_allowed_negative_balance%(date, season);

table allowed_negative_balance_table(abstime date, string season) = 
  leave_crewinfo.%cat%(date), 
  leave_crewinfo.%base%(date),
  leave_crewinfo.%crew_contract_grouptype%(date),
  %planseason%(season) -> export int %_allowed_negative_balance%;
  "C", "CPH", "F", "AUTUMN" -> 0;
  "C", "CPH", "F", "SPRING" -> -700;
  "C", "CPH", "F", "SUMMER" -> 0;
  "C", "CPH", "V", "AUTUMN" -> 0;
  "C", "CPH", "V", "SPRING" -> 0;
  "C", "CPH", "V", "SUMMER" -> 0;
  
  "F", "CPH", "F", "AUTUMN" -> -500;
  "F", "CPH", "F", "SPRING" -> -500;
  "F", "CPH", "F", "SUMMER" -> 0;
  "F", "CPH", "V", "AUTUMN" -> 0;
  "F", "CPH", "V", "SPRING" -> 0;
  "F", "CPH", "V", "SUMMER" -> 0;
  
  "C", "OSL", "F", "AUTUMN" -> -500;
  "C", "OSL", "F", "SPRING" -> 0;
  "C", "OSL", "F", "SUMMER" -> 0;
  "C", "OSL", "V", "AUTUMN" -> -500;
  "C", "OSL", "V", "SPRING" -> 0;
  "C", "OSL", "V", "SUMMER" -> 0;
  
  "C", "TRD", "F", "AUTUMN" -> -500;
  "C", "TRD", "F", "SPRING" -> 0;
  "C", "TRD", "F", "SUMMER" -> 0;
  "C", "TRD", "V", "AUTUMN" -> -500;
  "C", "TRD", "V", "SPRING" -> 0;
  "C", "TRD", "V", "SUMMER" -> 0;
  
  "C", "SVG", "F", "AUTUMN" -> -500;
  "C", "SVG", "F", "SPRING" -> 0;
  "C", "SVG", "F", "SUMMER" -> 0;
  "C", "SVG", "V", "AUTUMN" -> -500;
  "C", "SVG", "V", "SPRING" -> 0;
  "C", "SVG", "V", "SUMMER" -> 0;
  
  "F", "OSL", "F", "AUTUMN" -> -500;
  "F", "OSL", "F", "SPRING" -> 0;
  "F", "OSL", "F", "SUMMER" -> 0;
  "F", "OSL", "V", "AUTUMN" -> 0;
  "F", "OSL", "V", "SPRING" -> 0;
  "F", "OSL", "V", "SUMMER" -> 0;
  
  "F", "TRD", "F", "AUTUMN" -> -500;
  "F", "TRD", "F", "SPRING" -> 0;
  "F", "TRD", "F", "SUMMER" -> 0;
  "F", "TRD", "V", "AUTUMN" -> 0;
  "F", "TRD", "V", "SPRING" -> 0;
  "F", "TRD", "V", "SUMMER" -> 0;
  
  "F", "SVG", "F", "AUTUMN" -> -500;
  "F", "SVG", "F", "SPRING" -> 0;
  "F", "SVG", "F", "SUMMER" -> 0;
  "F", "SVG", "V", "AUTUMN" -> 0;
  "F", "SVG", "V", "SPRING" -> 0;
  "F", "SVG", "V", "SUMMER" -> 0;
  
  "C", "STO", "F", "AUTUMN" -> 0;
  "C", "STO", "F", "SPRING" -> -500;
  "C", "STO", "F", "SUMMER" -> 0;
  "C", "STO", "V", "AUTUMN" -> 0;
  "C", "STO", "V", "SPRING" -> 0;
  "C", "STO", "V", "SUMMER" -> 0;
  
  "F", "STO", "F", "AUTUMN" -> -500;
  "F", "STO", "F", "SPRING" -> -500;
  "F", "STO", "F", "SUMMER" -> 0;
  "F", "STO", "V", "AUTUMN" -> 0;
  "F", "STO", "V", "SPRING" -> 0;
  "F", "STO", "V", "SUMMER" -> 0;
  
  -, -, -, - -> 0;
 end
 
/*Defines which task belongs to which account*/
table activity_to_account(string activity) =
  activity -> export string %activity_to_account%;
  "VA" -> "VA";
  "VAD" -> "VA";
  "VAH" -> "VA";
  "VA1"  -> "VA1";
  "VA1D" -> "VA1";
  "VA1H" -> "VA1";
  "F7" -> "F7";
  "F3" -> "F3";
  "F3S" -> "F3S";
  "F37" -> "F37";
  -     -> void(string);
end

 /*Defines which taskcodes belongs to which account*/
table code2account =
  activity_subtype -> export %account%, export int %rate%;
  "VA" -> leave_params.%va_account%,100;
  "VAD" -> leave_params.%va_account%,200;
  "VAH" -> leave_params.%va_account%,166;
  "VA1"  -> leave_params.%va1_account%,100;
  "VA1D" -> leave_params.%va1_account%,200;
  "VA1H" -> leave_params.%va1_account%,166;
  "F7" -> leave_params.%f7_account%,100;
  "F3" -> leave_params.%f3_account%,100;
  "F3S" -> leave_params.%f3S_account%,100;
  "F37" -> leave_params.%f37_account%,100;
  -     -> void(string),100;
end

 /*Defines which taskcodes belongs to which roster account*/
table code2rosteraccount =
  activity_subtype -> export %consider_roster_account%;
  "VA" -> leave_params.%va_account%;
  "VAD" -> leave_params.%va_account%;
  "VAH" -> leave_params.%va_account%;
  "VA1"  -> leave_params.%va1_account%;
  "VA1D" -> leave_params.%va1_account%;
  "VA1H" -> leave_params.%va1_account%;
  "F7" -> leave_params.%f7_account%;
  -     -> void(string);
end

/*Defines which task belongs to which rate*/
table code_to_rate(string vacId) =
  vacId -> export int %vac_code_to_rate%;
  "VA" -> 100;
  "VAD" -> 200;
  "VAH" -> 166;
  "VA1"  -> 100;
  "VA1D" -> 200;
  "VA1H" -> 166;
  "F7" -> 100;
  "F3" -> 100;
  "F3S" -> 100;
  "F37" -> 100;
  -     -> 100;
end

/* Function returning the number of days since date and prev_date */
%days_since%(Abstime date, Abstime prev_date) =
  (round_down(date, 24:00) - round_down(prev_date, 24:00)) / 24:00;

/* ------------  Special entitlements --------------*/

set valid_snk_contracts_new = "SNK_V851", "SNK_V852", "SNK_V853", "SNK_V854", "SNK_V855";

export %special_VA_entitlement%(abstime date, abstime entitlementdate, abstime contractperiodstart) =
    let contractdate = if entitlementdate>=01jan2013 then contractperiodstart else entitlementdate;

  if entitlementdate < 01jan2014 AND ((leave_crewinfo.%crewrank%(entitlementdate) = "FP" OR leave_crewinfo.%crewrank%(entitlementdate) = "FR") AND
     leave_crewinfo.%crew_age%(date) < 35 AND
     leave_crewinfo.%years_since_employment%(date) < 5) then
    3500
  else if %fixed_group_100%(entitlementdate, contractperiodstart) AND leave_crewinfo.%crew_has_agmt_group_skn_fd%(contractperiodstart) then
    3400
  else if leave_crewinfo.%crew_has_agmt_group_sks_fd%(contractperiodstart) and
          leave_crewinfo.%crew_is_fixed_group%(contractperiodstart) and
	  entitlementdate>=1jun2017
  then
    3400
  else if leave_crewinfo.%crew_has_agmt_group_skn_fd%(contractperiodstart) and
          leave_crewinfo.%crew_is_fixed_group%(contractperiodstart) and
	  entitlementdate>=1jan2018
  then
    3400
  else if %fixed_group_100%(entitlementdate, contractperiodstart) then
    3300
  else if %norvegian_contract_group%(entitlementdate, contractdate) = "Z" and
          leave_crewinfo.%crew_contract%(contractperiodstart) in valid_snk_contracts_new and
          not system_db_parameters.%snk_contract_groups_validity%(entitlementdate)
  then
    void(int)
  else if %norvegian_contract_group%(entitlementdate, contractdate) = "Z" and
          leave_crewinfo.%crew_contract%(contractperiodstart) in valid_snk_contracts_new and
          system_db_parameters.%snk_contract_groups_validity%(entitlementdate)
  then
    0
  else if %norvegian_contract_group%(entitlementdate, contractdate) = "Z"
  then
    0
  else if entitlementdate < 01jan2013 AND NOT void(%norvegian_old_entitlement_va%(date, entitlementdate, contractdate)) then
    %norvegian_old_entitlement_va%(date, entitlementdate, contractdate)
/*    
  else if leave_crewinfo.%cat%(entitlementdate) = "C" AND
          (leave_crewinfo.%base%(entitlementdate) = "OSL" OR
           leave_crewinfo.%base%(entitlementdate) = "TRD" OR
           leave_crewinfo.%base%(entitlementdate) = "SVG") AND
          leave_crewinfo.%crew_age%(date) < 45 then
	3700
*/
  else
    void(int);

table fixed_groups_100(abstime entitlementdate, abstime contractperiodstart) =
  leave_crewinfo.%crew_has_agmt_group_sks_fd%(contractperiodstart),
  leave_crewinfo.%crew_has_agmt_group_skn_fd%(contractperiodstart),
  leave_crewinfo.%crew_has_fg_contract_100%(contractperiodstart),
  leave_crewinfo.%crew_has_qual%("CJ", contractperiodstart),
  entitlementdate
  -> bool %fixed_group_100%;
  true , false, true, false, >=01Jun2016 -> true;     /* Sweden */
  false, true , true, false, >=01Jan2017 -> true;     /* Norway */
  -    , -    , -   , -    , -           -> false;
end

export %special_F7_entitlement%(abstime date, abstime entitlementdate, abstime contractperiodstart) =
    let contractdate = if entitlementdate>=01jan2013 then contractperiodstart else entitlementdate;
    if %norvegian_contract_group%(entitlementdate, contractdate) = "Z" then
        0
    else if entitlementdate < 01jan2013 then
      %norvegian_old_entitlement_f7%(date, entitlementdate, contractdate)
    else
      void(int);

export %special_VA1_entitlement%(abstime date, abstime entitlementdate) =
      void(int);

/* Used for special f7 reduction where %has_special_fg_reduction% is the amount
   of days that should be reduced for matching cat,region,grouptype on date.
   And a valid from date*/
table special_f7_reduction_table(abstime date) =
    leave_crewinfo.%cat%(date),
    leave_crewinfo.%region%(date),
    leave_crewinfo.%crew_contract_grouptype%(date),
    date
    -> export int %special_f7_reduction%;
    "F", "SKS", "F", >=01Jan2011 -> 100;
    "F", "SKD", "F", >=01Jan2011 -> 100;
    -  , -    , -  , -           -> 0;
end

table special_f7_reduction_table2(abstime date) =
    leave_crewinfo.%cat%(date),
    leave_crewinfo.%region%(date),
    leave_crewinfo.%crew_contract_grouptype%(date),
    leave_crewinfo.%crew_has_qual%("CJ", date),
    leave_crewinfo.%crew_has_agmt_group_skin_fd%(date),
    leave_crewinfo.%crew_has_agmt_group_sks_fd%(date) or leave_crewinfo.%crew_has_agmt_group_skd_fd%(date),
    date
    -> export int %special_f7_reduction2%;
    "F" , - , "F" , false , -     , -     , >=01Jan2012            -> 100;
    "F" , - , "F" , true  , -     , -     , >=01Jan2013            -> 100;
    "F" , - , "V" , false , true  , -     , (01Jan2016, 01Jan2018( -> 100;
    "F" , - , "V" , true  , -     , true  , >=01Mar2016            -> 100;
    -   , - , -   , -     , -     , -     , -                      -> 0;
end

table allow_negative_entitlement_table(abstime date) =
    leave_crewinfo.%cat%(date),
    leave_crewinfo.%base%(date),
    leave_crewinfo.%crew_contract_grouptype%(date),
    leave_crewinfo.%crew_has_qual%("CJ", date),
    date
    -> export bool %allow_negative_entitlement%;
    "F", "CPH", "F", false, 01Jan2012 -> true;
    -  , -    , -  , -    , -         -> false;
end

/* Reduction rounding method*/
/* CEILING = Crew's advantage */
/* METHEMATICAL = Mathematic rounding 
 * (we actually only look for mathematical..) */
/*table entitlement_reduction_rounding_table(abstime date) = 
  leave_crewinfo.%cat%(date), 
  leave_crewinfo.%base%(date), 
  leave_crewinfo.%company%(date) -> export string %entitlement_reduction_rounding_method%;
  -, "CPH"  , -	 -> "MATHEMATICAL";
  -, "OSL"  , -	 -> "MATHEMATICAL";
  -, "SVG"  , -	 -> "MATHEMATICAL";
  -, "TOS"  , -	 -> "MATHEMATICAL";
  -, "TRD"  , -	 -> "MATHEMATICAL";
  -,	  -,  -	 -> "CEILING";
 end*/
table entitlement_reduction_rounding_table(abstime date, string account) =  
  leave_crewinfo.%base%(date),
  account,
  leave_tables.%entitlement_date%(account, date) -> export string %entitlement_reduction_rounding_method%;
  "CPH" ,  -  ,  		-	 -> "MATHEMATICAL";
  "OSL" ,  -  ,  		-	 -> "MATHEMATICAL";
  "SVG" ,  -  ,  		-	 -> "MATHEMATICAL";
  "TOS" ,  -  ,  		-	 -> "MATHEMATICAL";
  "TRD" ,  -  ,  		-	 -> "MATHEMATICAL";
  "STO" , "F3",  		-	 -> "MATHEMATICAL";
  "STO" , "F3S",  		-	 -> "MATHEMATICAL";
  "STO" , "F37",  		-	 -> "MATHEMATICAL";
  "STO" , "F7", >= 01Jan2014 -> "MATHEMATICAL";  /* F7 rounded mathematically for all crew groups 
    												including Swedish CC and FD (SASCMS-5877)*/
    -,  	- , 		-	 -> "CEILING";
 end 

 /* Reduction from table */
/* Resulting number is the total fraction of one year's entitlement that should be reduced after
the number of LOA days used as argument   */
/* All values are entered x100!!! */
table entitlement_reduction_table(int no_of_activities) = 
  no_of_activities -> export int %reduction_from_defined_table%;
  (100, 1500) -> 0;
  (1600, 2300) -> 2400;
  (2400, 3100) -> 1200;
  - -> 0;
end

/* Table that defines taskcodes that does not count as vacation (part time days for some)*/
table va_override_table(abstime date, int number) = 
  leave_crewinfo.%cat%(date), leave_crewinfo.%base%(date),  leave_crewinfo.%company%(date), number -> export string %overruling_code%;
  -  ,   -,   -, - -> void(string);

end

/* Which entitlement should the groups have?
 * Different for age and company (union, SK, BU) */
table norvegian_entitlement(abstime date, abstime entitlementdate, abstime contractperiodstart) =
  date, %norvegian_contract_group%(entitlementdate, contractperiodstart), leave_crewinfo.%company%(entitlementdate), 
  leave_crewinfo.%crew_age%(date) ->
    int %norvegian_old_entitlement_va%, int %norvegian_old_entitlement_f7%;
    <1Jan2012, "A", "SK", <45 -> 3400, 0;
    >=1Jan2012, "A", "SK", <45 -> 3500, 0;
    -, "A", "SK", >=45 -> 4000, 0;
    <1Jan2012, "A", "BU", - -> 3700, 0;
    >=1Jan2012, "A", "BU", <45 -> 3500, 0;
    >=1Jan2012, "A", "BU", >=45 -> 4000, 0;
    -, "B", "SK", <45 ->3400 , 0;
    -, "B", "SK", >=45 ->4000 , 0;
    -, "B", "BU", - -> 3700, 0;
    <1Jan2012, "C", "SK", <45 -> 3400, 0;
    >=1Jan2012, "C", "SK", <45 -> 3500, 0;
    -, "C", "SK", >=45 -> 4000, 0;
    <1Jan2012, "C", "BU", - -> 3700, 0;
    >=1Jan2012, "C", "BU", <45 -> 3500, 0;
    >=1Jan2012, "C", "BU", >=45 -> 4000, 0;
    -, "D", "SK", <45 -> 3400, 0;
    -, "D", "SK", >=45 -> 4000,0;
    -, "D", "BU", - -> 3700, 0;
    <1Jan2012, "E", "SK", <45 -> 3400, 0;
    >=1Jan2012, "E", "SK", <45 -> 3500, 0;
    -, "E", "SK", >=45 -> 4000,0;
    <1Jan2012, "E", "BU", - -> 3700, 0;
    >=1Jan2012, "E", "BU", <45 -> 3500, 0;
    >=1Jan2012, "E", "BU", >=45 -> 4000,0;
    -, "F", "SK", <45 -> 3400, 0;
    -, "F", "SK", >=45 -> 4000, 0;
    -, "F", "BU", - -> 3700,0;
    -, "G", "SK", <45 -> 3400 ,0;
    -, "G", "SK", >=45 -> 4000,0;
    -, "G", "BU", - -> 3700,0;
    -, "H", "SK", <45 -> 3700, 600;
    -, "H", "SK", >=45 -> 4300, 600;
    <1Jan2012, "H", "BU", - -> 4000, 600;
    >=1Jan2012, "H", "BU", <45 -> 3700, 600;
    >=1Jan2012, "H", "BU", >=45 -> 4300, 600;
    -, "I", "SK", <45 -> 3700, 600;
    -, "I", "SK", >=45 -> 4300, 600;
    <1Jan2012, "I", "BU", - -> 4000,600;
    >=1Jan2012, "I", "BU", <45 -> 3700, 600;
    >=1Jan2012, "I", "BU", >=45 -> 4300, 600;
    -, "J", "SK", <45 -> 3700, 600;
    -, "J", "SK", >=45 -> 4300, 600;
    <1Jan2012, "J", "BU", - -> 4000,600;
    >=1Jan2012, "J", "BU", <45 -> 3700, 600;
    >=1Jan2012, "J", "BU", >=45 -> 4300, 600;
    -, "X", "BU", - -> 3700,0;
    -, "Y", "SK", >=45 -> 3800, 0;
    -, "L", "SK", <45 -> 3700, 600;
    -, "L", "SK", >=45 -> 4300, 600;
    -, "M", "SK", <45 -> 3700, 600;
    -, "M", "SK", >=45 -> 4300, 600;
    -, "O", "SK", <45 -> 3700, 600;
    -, "O", "SK", >=45 -> 4300, 600;
    -, "P", "SK", <45 -> 3700, 600;
    -, "P", "SK", >=45 -> 4300, 600;
    -, "Z",   - , - -> 0, 0;
    -, -, - , - -> void(int), void(int);
end

/* Table that divides contracts into differnt contract groups 
 * These different contract groups have different leave entitlement.
 * Norvegian cabin crew uses this. */
table norvegian_contract_groups(abstime date, abstime contractperiodstart) =
  leave_crewinfo.%cat%(date), leave_crewinfo.%country%(date), leave_crewinfo.%crew_contract%(contractperiodstart) -> string %norvegian_contract_group%;
  "C", "NO","V816" -> "A";
  "C", "NO","V831" -> "A";
  "C", "NO","V830" -> "A";
  "C", "NO","V832" -> "A";
  "C", "NO","V817" -> "A";
  "C", "NO","V815" -> "A";
  "C", "NO","V875" -> "A";
  "C", "NO","V877" -> "A";
  "C", "NO","V876" -> "A";
  "C", "NO","V860" -> "A";
  "C", "NO","V861" -> "A";
  "C", "NO","V862" -> "A";

  "C", "NO","V833" -> "B";
  "C", "NO","V818" -> "B";
  "C", "NO","V820" -> "B";
  "C", "NO","V819" -> "B";
  "C", "NO","V834" -> "B";
  "C", "NO","V835" -> "B";
  "C", "NO","V865" -> "B";
  "C", "NO","V879" -> "B";
  "C", "NO","V878" -> "B";
  "C", "NO","V863" -> "B";
  "C", "NO","V864" -> "B";
  "C", "NO","V880" -> "B";

  "C", "NO","V836" -> "C";
  "C", "NO","V838" -> "C";
  "C", "NO","V822" -> "C";
  "C", "NO","V823" -> "C";
  "C", "NO","V837" -> "C";
  "C", "NO","V821" -> "C";
  "C", "NO","V867" -> "C";
  "C", "NO","V866" -> "C";
  "C", "NO","V868" -> "C";
  "C", "NO","V882" -> "C";
  "C", "NO","V881" -> "C";
  "C", "NO","V883" -> "C";

  "C", "NO","V824" -> "D";
  "C", "NO","V840" -> "D";
  "C", "NO","V841" -> "D";
  "C", "NO","V825" -> "D";
  "C", "NO","V826" -> "D";
  "C", "NO","V839" -> "D";
  "C", "NO","V884" -> "D";
  "C", "NO","V885" -> "D";
  "C", "NO","V886" -> "D";
  "C", "NO","V871" -> "D";
  "C", "NO","V870" -> "D";
  "C", "NO","V869" -> "D";

  "C", "NO","V843" -> "E";
  "C", "NO","V828" -> "E";
  "C", "NO","V829" -> "E";
  "C", "NO","V842" -> "E";
  "C", "NO","V844" -> "E";
  "C", "NO","V827" -> "E";
  "C", "NO","V873" -> "E";
  "C", "NO","V872" -> "E";
  "C", "NO","V887" -> "E";
  "C", "NO","V888" -> "E";
  "C", "NO","V889" -> "E";
  "C", "NO","V874" -> "E";

  "C", "NO","V859" -> "F";
  "C", "NO","V96" -> "F";
  "C", "NO","V858" -> "F";
  "C", "NO","V95" -> "F";
  "C", "NO","V94" -> "F";
  "C", "NO","V857" -> "F";
  "C", "NO","V1017" -> "F";
  "C", "NO","V1014" -> "F";
  "C", "NO","V1015" -> "F";
  "C", "NO","V1016" -> "F";
  "C", "NO","V1018" -> "F";
  "C", "NO","V1019" -> "F";

  "C", "NO","V808" -> "G";
  "C", "NO","V807" -> "G";
  "C", "NO","V809" -> "G";
  "C", "NO","V811" -> "G";
  "C", "NO","V806" -> "G";
  "C", "NO","V810" -> "G";
  "C", "NO","V805" -> "G";
  "C", "NO","V803" -> "G";
  "C", "NO","V801" -> "G";
  "C", "NO","V804" -> "G";
  "C", "NO","V802" -> "G";
  "C", "NO","V800" -> "G";

  "C", "NO","V301" -> "H";
  "C", "NO","V1003" -> "H";
  "C", "NO","V1002" -> "H";
  "C", "NO","V1001" -> "H";
  "C", "NO","V1023" -> "H";
  "C", "NO","V1022" -> "H";

  "C", "NO","V1007" -> "I";
  "C", "NO","V1008" -> "I";
  "C", "NO","V1004" -> "I";
  "C", "NO","V1005" -> "I";
  "C", "NO","V1006" -> "I";
  "C", "NO","V1009" -> "I";
  "C", "NO","V1021" -> "I";
  "C", "NO","V1020" -> "I";

  "C", "NO","V1010" -> "J";
  "C", "NO","V443" -> "J";
  "C", "NO","V1012" -> "J";
  "C", "NO","V1011" -> "J";

  "C", "NO","V88" -> "X";
  "C", "NO","V89" -> "X";
  "C", "NO","V90" -> "X";

  "C", "NO","V1013" -> "Y";

  "C", "NO","V351" -> "L";
  "C", "NO","V350" -> "L";
  "C", "NO","V310" -> "L";

  "C", "NO","V312" -> "M";

  "C", "DK","V345" -> "Z";
  "C", "DK","QAV345" -> "Z"; /* a Cimber contract. Actually "Country" and "norwegian" is very outdated constructs in this matter */
  "C", "NO","V845" -> "Z";
  "C", "NO","V846" -> "Z";
  "C", "NO","V847" -> "Z";
  "C", "NO","V848" -> "Z";
  "C", "NO","V849" -> "Z";
  "C", "NO","V850" -> "Z";
  "C", "NO","V851" -> "Z";
  "C", "NO","V852" -> "Z";
  "C", "NO","V853" -> "Z";
  "C", "NO","V854" -> "Z";
  "C", "NO","V855" -> "Z";
  "C", "NO","SNK_V851" -> "Z";
  "C", "NO","SNK_V852" -> "Z";
  "C", "NO","SNK_V853" -> "Z";
  "C", "NO","SNK_V854" -> "Z";
  "C", "NO","SNK_V855" -> "Z";
  "C", "NO","V856" -> "Z";
  "C", "SE","F00863" -> "Z";
  "C", "SE","V00863" -> "Z";
  "C", "NO","F00851" -> "Z";
  "C", "NO","F00852" -> "Z";
  "C", "NO","F00853" -> "Z";
  "C", "NO","F00854" -> "Z";
  "C", "NO","F00855" -> "Z";
  "C", "NO","F00856" -> "Z";

  "C", "NO","F816" -> "A";
  "C", "NO","F831" -> "A";
  "C", "NO","F830" -> "A";
  "C", "NO","F832" -> "A";
  "C", "NO","F817" -> "A";
  "C", "NO","F815" -> "A";
  "C", "NO","F875" -> "A";
  "C", "NO","F877" -> "A";
  "C", "NO","F876" -> "A";
  "C", "NO","F860" -> "A";
  "C", "NO","F861" -> "A";
  "C", "NO","F862" -> "A";

  "C", "NO","F833" -> "B";
  "C", "NO","F818" -> "B";
  "C", "NO","F820" -> "B";
  "C", "NO","F819" -> "B";
  "C", "NO","F834" -> "B";
  "C", "NO","F835" -> "B";
  "C", "NO","F865" -> "B";
  "C", "NO","F879" -> "B";
  "C", "NO","F878" -> "B";
  "C", "NO","F863" -> "B";
  "C", "NO","F864" -> "B";
  "C", "NO","F880" -> "B";

  "C", "NO","F836" -> "C";
  "C", "NO","F838" -> "C";
  "C", "NO","F822" -> "C";
  "C", "NO","F823" -> "C";
  "C", "NO","F837" -> "C";
  "C", "NO","F821" -> "C";
  "C", "NO","F867" -> "C";
  "C", "NO","F866" -> "C";
  "C", "NO","F868" -> "C";
  "C", "NO","F882" -> "C";
  "C", "NO","F881" -> "C";
  "C", "NO","F883" -> "C";

  "C", "NO","F824" -> "D";
  "C", "NO","F840" -> "D";
  "C", "NO","F841" -> "D";
  "C", "NO","F825" -> "D";
  "C", "NO","F826" -> "D";
  "C", "NO","F839" -> "D";
  "C", "NO","F884" -> "D";
  "C", "NO","F885" -> "D";
  "C", "NO","F886" -> "D";
  "C", "NO","F871" -> "D";
  "C", "NO","F870" -> "D";
  "C", "NO","F869" -> "D";

  "C", "NO","F843" -> "E";
  "C", "NO","F828" -> "E";
  "C", "NO","F829" -> "E";
  "C", "NO","F842" -> "E";
  "C", "NO","F844" -> "E";
  "C", "NO","F827" -> "E";
  "C", "NO","F873" -> "E";
  "C", "NO","F872" -> "E";
  "C", "NO","F887" -> "E";
  "C", "NO","F888" -> "E";
  "C", "NO","F889" -> "E";
  "C", "NO","F874" -> "E";

  "C", "NO","F859" -> "F";
  "C", "NO","F96" -> "F";
  "C", "NO","F858" -> "F";
  "C", "NO","F95" -> "F";
  "C", "NO","F94" -> "F";
  "C", "NO","F857" -> "F";
  "C", "NO","F1017" -> "F";
  "C", "NO","F1014" -> "F";
  "C", "NO","F1015" -> "F";
  "C", "NO","F1016" -> "F";
  "C", "NO","F1018" -> "F";
  "C", "NO","F1019" -> "F";

  "C", "NO","F808" -> "G";
  "C", "NO","F807" -> "G";
  "C", "NO","F809" -> "G";
  "C", "NO","F811" -> "G";
  "C", "NO","F806" -> "G";
  "C", "NO","F810" -> "G";
  "C", "NO","F805" -> "G";
  "C", "NO","F803" -> "G";
  "C", "NO","F801" -> "G";
  "C", "NO","F804" -> "G";
  "C", "NO","F802" -> "G";
  "C", "NO","F800" -> "G";

  "C", "NO","F301" -> "H";
  "C", "NO","F1003" -> "H";
  "C", "NO","F1002" -> "H";
  "C", "NO","F1001" -> "H";
  "C", "NO","F1023" -> "H";
  "C", "NO","F1022" -> "H";

  "C", "NO","F1007" -> "I";
  "C", "NO","F1008" -> "I";
  "C", "NO","F1004" -> "I";
  "C", "NO","F1005" -> "I";
  "C", "NO","F1006" -> "I";
  "C", "NO","F1009" -> "I";
  "C", "NO","F1021" -> "I";
  "C", "NO","F1020" -> "I";

  "C", "NO","F1010" -> "J";
  "C", "NO","F443" -> "J";
  "C", "NO","F1012" -> "J";
  "C", "NO","F1011" -> "J";

  "C", "NO","F88" -> "X";
  "C", "NO","F89" -> "X";
  "C", "NO","F90" -> "X";

  "C", "NO","F1013" -> "Y";

  "C", "NO","F351" -> "L";
  "C", "NO","F350" -> "L";
  "C", "NO","F310" -> "L";

  "C", "NO","F312" -> "M";

  "C", "DK","F345" -> "Z";
  "C", "NO","F845" -> "Z";
  "C", "NO","F847" -> "Z";
  "C", "NO","F851" -> "Z";
  "C", "NO","F852" -> "Z";
  "C", "NO","F853" -> "Z";
  "C", "NO","F854" -> "Z";
  "C", "NO","F856" -> "Z";
  -, -,- -> void(string);
end

/* Which type of activity should be assigned? Days and prio order gets code.
 * Same as table prioritized_vacation_type but for short vacations that use 
 * higher balance rate*/
table prioritized_short_vacation_type(int days, int prio) =
  days, prio -> export string %_short_vacation_type%;
  1, 1 -> "VAD";
  1, 2 -> "VA1D";
  2, 1 -> "VAD";
  2, 2 -> "VA1D";
  3, 1 -> "VAH";
  3, 2 -> "VA1H";
  -, - -> void(string);
end 

/* Which type of activity should be assigned in different season and times of year ? Prio order gets code.*/
table prioritized_vacation_type(string season_name, abstime date, int prio) =
  leave_crewinfo.%cat%(date), leave_crewinfo.%base%(date), leave_crewinfo.%company%(date),
  %planseason%(season_name), /*(if RFI 16)*/ leave_basic.%time_of_year%(date), prio -> export string %_vacation_type%;
  "C", "STO", -, "AUTUMN", -, 1 -> "F7";
  "C", "STO", -, "AUTUMN", -, 2 -> "VA";
  "C", "STO", -, "AUTUMN", -, 3 -> "VA1";
&
  "C", "STO", -, "SUMMER", -, 1 -> "VA";
  "C", "STO", -, "SUMMER", -, 2 -> "F7";
  "C", "STO", -, "SUMMER", -, 3 -> "VA1";
&
  "C", "STO", -, "SPRING", -, 1 -> "F7";
  "C", "STO", -, "SPRING", -, 2 -> "VA";
  "C", "STO", -, "SPRING", -, 3 -> "VA1";

  -, -, -, "AUTUMN", >4380:00, 1 -> "F7";
  -, -, -, "AUTUMN", >4380:00, 2 -> "VA";
  -, -, -, "AUTUMN", >4380:00, 3 -> "VA1";
  -, -, -, "AUTUMN", <=4380:00, 1 -> "VA";
  -, -, -, "AUTUMN", <=4380:00, 2 -> "F7";
  -, -, -, "AUTUMN", <=4380:00, 3 -> "VA1";
&
  -, -, -, "SUMMER", -, 1 -> "VA";
  -, -, -, "SUMMER", -, 2 -> "VA1";
&
  -, -, -, "MAY", -, 1 -> "VA";
  -, -, -, "MAY", -, 2 -> "F7";
  -, -, -, "MAY", -, 3 -> "VA1";
&
  -, -, -, "SPRING", -, 1 -> "VA";
  -, -, -, "SPRING", -, 2 -> "F7";
  -, -, -, "SPRING", -, 3 -> "VA1";
&
  -, -, -, "WINTER", -, 1 -> "VA";
  -, -, -, - , -, - -> void(string);
end 

/* Table that defines which crew should be a awarded a rotational leave.
*/
table has_leave_rotation_table(abstime date, string season, string rotation_type) = 
   leave_crewinfo.%cat%(date), 
   leave_crewinfo.%base%(date), 
   leave_crewinfo.%company%(date),
   leave_crewinfo.%crew_contract_grouptype%(date), 
   leave_crewinfo.%crewrank%(date),
   %crewtype%(date),
   %planseason%(season), /*(if RFI 16)*/
   rotation_type -> export bool %has_leave_rotation%;
   "C",	"OSL",     -,    -,     -,    -, "SUMMER",	"vacation" ->  True;
   "C",	"TRD",	   -,    -,     -,    -, "SUMMER",	"vacation" ->  True;
   "C",	"SVG",	   -,    -,     -,    -, "SUMMER",	"vacation" ->  True;
   
  &
   "F", -,	-,	 -,  -,	   -,	 "SUMMER",  "vacation" ->  True;
   "F", -,	-,	 -,  -,	   -,	 "AUTUMN",  "christmas" ->  True;
   "C", -,	-,	 -,  -,	   -,	 "AUTUMN",  "christmas" ->  True;
   
  &
    -,	-,	-,	 -,  -,	   -,	 -,	    -	  ->  False; 
end

/* Table of rotations that is possibel to 'rotate' to, but is invalid for crew.*/
table invalid_rotation_table(string rotation, abstime date) = 
  leave_crewinfo.%cat%(date), 
  leave_crewinfo.%base%(date), 
  leave_crewinfo.%company%(date), 
  %crewtype%(date),
  leave_crewinfo.%crew_has_qual%("F5",date), 
  rotation -> bool %invalid_rotation%;
  "F",	-,  -,	"LH", -, "03"  -> true;
  "F",	-,  -,	"SH", true, "03"  -> true;
  - ,	-,  -,	-, -, -     -> false;
end

/* Functions for interpreting the differnt rotations.. */
table rotation_start_end_table(string rotation)=
  rotation -> AbsTime %_rotation_start_date%, AbsTime %_rotation_end_date% ;
  external "leave_rot_start_end";
  rotation -> rotstart, rotend;
  - -> void(abstime), void(abstime);
end

/* Functions that are used to interpret the above tables:  */
export %rotation_start_date%(string rotation, int year) =
  add_years(%_rotation_start_date%(rotation), %offset_from_reference_year%(year));

export %rotation_end_date%(string rotation, int year) =
  add_years(%_rotation_end_date%(rotation), %offset_from_reference_year%(year)) + 24:00;

export %offset_from_reference_year%(int year) =
   year-1986;


/*special rotation start lookup tables, used from leave_functions*/ 

table FD_use_special_rot_calc_in_cycle(abstime vacstart, string season, int year) =
  leave_crewinfo.%cat%(vacstart), 
  leave_crewinfo.%crew_rotation%(season, year)
  -> export bool %FD_use_special_cycle_rot_calc%;
  "F", "91"  -> true;
  "F", "92"  -> true;
  "F", "93"  -> true;
  "F", "94"  -> true;
  "F", "95"  -> true;
  "F", "96"  -> true;
  "F", "97"  -> true;
  "F", "98"  -> true;
  "F", "99"  -> true;
  "F", "91A" -> true;
  "F", "92A" -> true;
  "F", "93A" -> true;
  "F", "94A" -> true;
  "F", "95A" -> true;
  "F", "96A" -> true;
  "F", "97A" -> true;
  "F", "98A" -> true;
  "F", "99A" -> true;
  "F", "91B" -> true;
  "F", "92B" -> true;
  "F", "93B" -> true;
  "F", "94B" -> true;
  "F", "95B" -> true;
  "F", "96B" -> true;
  "F", "97B" -> true;
  "F", "98B" -> true;
  "F", "99B" -> true;
  "F", "91C" -> true;
  "F", "92C" -> true;
  "F", "93C" -> true;
  "F", "94C" -> true;
  "F", "95C" -> true;
  "F", "96C" -> true;
  "F", "97C" -> true;
  "F", "98C" -> true;
  "F", "99C" -> true;
  -,- -> false;
end

table CC_Norway_special_rotation_start_table(abstime vacstart, string season, int year) =
  leave_crewinfo.%company%(vacstart), 
  leave_crewinfo.%cat%(vacstart), 
  leave_crewinfo.%base%(vacstart)
  -> export bool %CC_Norway_special_rotation_start%;
  "SK", "C", "OSL" -> true;
  "SK", "C", "SVG" -> true;
  "SK", "C", "TRD" -> true;
  "BU", "C", "OSL" -> true;
  "BU", "C", "SVG" -> true;
  "BU", "C", "TRD" -> true;
  -,-,- -> false;
end

/* Table that defines if crew could be awarded both rotation and prio 1 bid in the same season */
table rotation_and_prio1_table(abstime date, string season) = 
   leave_crewinfo.%cat%(date),  leave_crewinfo.%region%(date),  leave_crewinfo.%company%(date), %planseason%(season)
    -> export bool %can_be_awarded_both_rotation_and_prio1_bid%;
  "C",     "SKN",   "BU",	  "SUMMER" -> False;
  "C",     "SKN",   "SK",	  "SUMMER" -> False;
  "C",     "SKN",   "SK",	  "AUTUMN" -> False;
  "C",     "SKN",   "SK",	  "SPRING" -> False;
  "F",     -	,     - ,	  "SUMMER" -> False;
   - ,	  -	,     -	,	  -	   -> True;
end

/* Popular period seasons*/
/* If popular periods in different times of year should be treated differnetly, they should have different seasons here.
 * Typically when assigning autumn and spring at the same time, the popular period in the autumn and the popular
 * period in the spring should be treated seperately.
 * Defaults to normal season of bid.*/
table popular_preriod_season_table(abstime date) = 
  leave_crewinfo.%cat%(date), 
  leave_crewinfo.%base%(date), 
  leave_crewinfo.%company%(date), 
  %crewtype%(date), 
  leave_basic.%time_of_year%(date) -> string %_popular_period_season%;
  "F",	-,  -,	-, <=3624:00  -> "SPRING";
  "F",	-,  -,	-, >= 5832:00 -> "AUTUMN";
  - ,	-,  -,	-, -     -> void(string);
end

%popular_period_season%(abstime date) = 
 %seasonname%(date, %_popular_period_season%(date)); 
/*If RFI 16, change previous popular_period_season to _popu...*/

export %rotation_prio%(string rotation, abstime date, string season) =
  default(%_rotation_prio%(rotation, date, season), 9999);
  
%rotation_prio_any_season%(string rotation, abstime date) =
  default(%_rotation_prio%(rotation, date, %seasonname%(date, "SPRING")), 
          default(%_rotation_prio%(rotation, date, %seasonname%(date, "SUMMER")),
                  default(%_rotation_prio%(rotation, date, %seasonname%(date, "AUTUMN")),
                          default(%_rotation_prio%(rotation, date, %seasonname%(date, "WINTER")),9999))));
/* table of which rotation gives prio to vacation bids in different seasons  */
table rotation_prio_table(string rotation, abstime date, string season)=
  leave_crewinfo.%cat%(date), leave_crewinfo.%base%(date), leave_crewinfo.%company%(date), %planseason%(season),/*(if RFI 16)*/
    rotation -> %_rotation_prio%;
  "C",	-,	-, -,	    "F"	  -> 1;
  "C",	-,	-, -,	    "P"	  -> 2;
  "F",	-,	-, -,	    "99"  -> 1;
  "F",	-,	-, -,	    "98"  -> 1;
  "F",	-,	-, -,	    "92"  -> 1;
  "F",	-,	-, -,	    "91"  -> 1;
  "F",  -,      -, -,       "99A" -> 1;
  "F",  -,      -, -,       "98A" -> 1;
  "F",  -,      -, -,       "92A" -> 1;
  "F",  -,      -, -,       "91A" -> 1;
  "F",  -,      -, -,       "99B" -> 1;
  "F",  -,      -, -,       "98B" -> 1;
  "F",  -,      -, -,       "92B" -> 1;
  "F",  -,      -, -,       "91B" -> 1;
  "F",  -,      -, -,       "99C" -> 1;
  "F",  -,      -, -,       "98C" -> 1;
  "F",  -,      -, -,       "92C" -> 1;
  "F",  -,      -, -,       "91C" -> 1;
  "F",	"OSL",	-, "AUTUMN","1"   -> 1;
  "F",	"OSL",	-, "SPRING","6"   -> 1;
  "F",	"TRD",	-, "AUTUMN","1"   -> 1;
  "F",	"TRD",	-, "SPRING","6"   -> 1;
  "F",	"SVG",	-, "AUTUMN","1"   -> 1;
  "F",	"SVG",	-, "SPRING","6"   -> 1;
  "C",	"OSL",	-, "AUTUMN","1"	  -> 1;
  "C",	"OSL",	-, "SPRING","6"	  -> 1;
  "C",	"OSL",	-, "SPRING","7"	  -> 1;
  "C",	"OSL",	-, "AUTUMN","21"  -> 1;
  "C",	"OSL",	-, "SPRING","26"  -> 1;
  "C",	"OSL",	-, "SPRING","27"  -> 1;
  "C",	"TRD",	-, "AUTUMN","1"	  -> 1;
  "C",	"TRD",	-, "SPRING","6"	  -> 1;
  "C",	"TRD",	-, "SPRING","7"	  -> 1;
  "C",	"TRD",	-, "AUTUMN","21"  -> 1;
  "C",	"TRD",	-, "SPRING","26"  -> 1;
  "C",	"TRD",	-, "SPRING","27"  -> 1;
  "C",	"SVG",	-, "AUTUMN","1"	  -> 1;
  "C",	"SVG",	-, "SPRING","6"	  -> 1;
  "C",	"SVG",	-, "SPRING","7"	  -> 1;
  "C",	"SVG",	-, "AUTUMN","21"  -> 1;
  "C",	"SVG",	-, "SPRING","26"  -> 1;
  "C",	"SVG",	-, "SPRING","27"  -> 1;
  -,	-,	-, -,	    -	  -> void(int);
end

/* This parameter define which rotations shall give prio in FD. The stated FD rotations in
  table rotation_prio_table shall be represented here. This parameter is used by the publish script
  to find out which prio rotations to search for. The parameter must be written in the form "x,y,z" 
  Crew who has a rotation in one number series can only be given prio within this. 
*/
/*set prio_0x_set = "0","1","2","3","4","5","6","7"; old set used for 1,6 */ 
set prio_9x_set = "90","91","92","93","94","95","96","97","98","99","100";
set prio_9xA_set = "90A","91A","92A","93A","94A","95A","96A","97A","98A","99A","100A";
set prio_9xB_set = "90B","91B","92B","93B","94B","95B","96B","97B","98B","99B","100B";
set prio_9xC_set = "90C","91C","92C","93C","94C","95C","96C","97C","98C","99C","100C";


export %prio_FD_rotations%(String rotation) =
  if rotation in prio_9x_set then "91,92,98,99"
  else if rotation in prio_9xA_set then "91A,92A,98A,99A"
  else if rotation in prio_9xB_set then "91B,92B,98B,99B"
  else if rotation in prio_9xC_set then "91C,92C,98C,99C"
  else "1,6";  
   
   
export %FD_cycle_start_date% = parameter 30May1986;
   
/*
** special rotation start for 91-99 use this table to calculate start date 
** from 30May.
** LW: it's simply not understood why not the start of rotation is used instead. 
*/
table rot_nbr_table(string rot) =
  rot -> export int %special_rot_nbr%;
  "91"  -> 0;
  "92"  -> 1;
  "93"  -> 2;
  "94"  -> 3;
  "95"  -> 4;
  "96"  -> 5;
  "97"  -> 6;
  "98"  -> 7;
  "99"  -> 8;
  "91A" -> 0;
  "92A" -> 1;
  "93A" -> 2;
  "94A" -> 3;
  "95A" -> 4;
  "96A" -> 5;
  "97A" -> 6;
  "98A" -> 7;
  "99A" -> 8;
  "91B" -> 0;
  "92B" -> 1;
  "93B" -> 2;
  "94B" -> 3;
  "95B" -> 4;
  "96B" -> 5;
  "97B" -> 6;
  "98B" -> 7;
  "99B" -> 8;
  "91C" -> 0;
  "92C" -> 1;
  "93C" -> 2;
  "94C" -> 3;
  "95C" -> 4;
  "96C" -> 5;
  "97C" -> 6;
  "98C" -> 7;
  "99C" -> 8;
  - -> void(int);
end
 

