/* -*- crc -*-
 *
 * Purpose:
 *   This module contains lookups for crew data. The main sections are:
 *  1. Etables             - parameters and names
 *  2. Basic definitions and crew data
 *  3. Employment             - rank, station, empno etc
 *  4. Seniority and Fairness
 *  5. Qualification        - ACQUAL and AIRPORT
 *  6. Contract             - group, parttime, pattern etc.
 *  7. Documents              - Passport, VISA, vaccination
 *  8. Special Schedule
 *  9. Restrictions
 * 10. Crew Landings
 * 11. Crew Training Need
 * 12. Subcategories
 * 13. Selects & sorts
 * 14. Prohibited crew
 * 15. Last published
 * 16. Crew for MCL
 * 17. Crew Lists Sort Criteria
 * 18. Agreement validity
 *
 * Created by:
 *   Extracted from the Carmen Standard User, 07-Dec-2005
 *
 * Major changes:
 * 02-Mar-2007: Major restructuring /Erik Gustafsson
 *
 */

root module crew

import fundamental;
import keywords;
import crew_pos;
import levels;
import leg;
import duty;
import trip;
import wop;
import calendar;
import pp;
import planning_area;
import crew_contract;
import model_crew;
import system_db_parameters;
import parameters;



/*******************************************************************
**
** Section 1: Etables
**
********************************************************************/

export %crew_extra_info_table% = %etab_path%(%crew_extra_info_table_p%);
%crew_extra_info_table_p% =
  parameter "crew_extra_info"
  remark "ETAB: Table with basic crew data";

export %crew_seniority_table% = %etab_path%(%crew_seniority_table_p%);
%crew_seniority_table_p% =
  parameter "crew_seniority"
  remark "ETAB: Crew seniority table (groups and seniority)";

export %value_table% =
  "SpLocal/crew_values"
  remark "ETAB: Crew value table";

export %qln_table% = %etab_path%(%qln_table_p%);
%qln_table_p% =
  parameter "crew_qualification"
  remark "ETAB: Table with crew qualifications (ACQUAL, AIRPORT, ...)";

%qln_acqual_table% = %etab_path%(%qln_ac_table_p%);
%qln_ac_table_p% =
  parameter "crew_qual_acqual"
  remark "ETAB: Table with crew aircraft qualifications (ACQUAL, AIRPORT, ...)";

%crew_contract_table% = model_crew.%crew_contract_table%;
%crew_contract_set_table% = model_crew.%crew_contract_set_table%;

%pattern_acts_table% = %etab_path%(%pattern_acts_table_para%);
%pattern_acts_table_para% =
  parameter "pattern_acts"
  remark "ETAB: Pattern activities table";

%pattern_set_table% = %etab_path%(%pattern_set_table_para%);
%pattern_set_table_para% =
  parameter "pattern_set"
  remark "ETAB: Pattern set table";

export %restriction_table% = %etab_path%(%restriction_table_para%);
%restriction_table_para% =
  parameter "crew_restriction"
  remark "ETAB: Crew restriction table";

export %restr_acqual_table% = %etab_path%(%restriction_acqual_table_para%);
%restriction_acqual_table_para% =
  parameter "crew_restr_acqual"
  remark "ETAB: Crew restriction ac qualification table";

%crew_rank_set_table% = %etab_path%(%crew_rank_set_table_para%);
%crew_rank_set_table_para% =
  parameter "crew_rank_set"
  remark "ETAB: Crew rank set table";

%crew_address_table% = %etab_path%(%crew_address_table_p%);
%crew_address_table_p% =
  parameter "crew_address"
  remark "ETAB: Crew address data";

%crew_contact_table% = %etab_path%(%crew_contact_table_p%);
%crew_contact_table_p% =
  parameter "crew_contact"
  remark "ETAB: Crew contact data";

export %airport_requirements_table% = %etab_path%(%airport_requirements_table_p%);
%airport_requirements_table_p% =
  parameter "apt_requirements"
  remark "ETAB: Table with airport with special requirements";

%spec_sched_table% = %etab_path%(%spec_sched_table_p%);
%spec_sched_table_p% =
  parameter "special_schedules"
  remark "ETAB: Table defining special schedule limits";

%crew_landings_table% = %etab_path%(%crew_landings_table_p%);
%crew_landings_table_p% =
  parameter "crew_landing"
  remark "ETAB: Table with performed crew landings";

/* Crew leased to Non-SAS companies */
export %crew_leased_table% = %etab_path%(%crew_leased_table_p%);
%crew_leased_table_p% =
  parameter "crew_leased"
  remark "ETAB: Crew leased table (period)";

%crew_user_filter_table% = %etab_path%(%crew_user_filter_table_p%);
%crew_user_filter_table_p% =
  parameter "crew_user_filter"
  remark "ETAB: Crew user filter table";

%crew_prod_day_change_table% = %etab_path%(%crew_prod_day_change_table_p%);
%crew_prod_day_change_table_p% =
  parameter "crew_prod_day_change"
  remark "ETAB: Crew prod day change table";

%crew_prod_day_sg_table% = %etab_path%(%crew_prod_day_sg_table_p%);
%crew_prod_day_sg_table_p% =
  parameter "crew_prod_day_sg"
  remark "ETAB: Crew prod day sg table";

export %f36_targets_table% = %etab_path%(%f36_targets_table_p%);
%f36_targets_table_p% =
  parameter "f36_targets"
  remark "ETAB: Table with crew monthly F36 data";

/*******************************************************************
**
** Section 2: Basic definitions and crew data
**
********************************************************************/
export %id% = keywords.%crr_crew_id%;
export %id_not_void% = default(%id%, "");
export %id_text% = concat("Id: ", %id%);

/* Crew user filter
   To enable simple identification of crew with faulty employment/contract */
table crew_user_filter_table =
    %id%, "CONTRACT", "MISMATCH", fundamental.%plan_start%, fundamental.%plan_end% ->
    export Abstime %mismatch_start%,
    export Abstime %mismatch_end%;
    external %crew_user_filter_table%;
    "crew", "filt", "val", <="validto", >"validfrom"  -> "validfrom", "validto";
    -, -, -, -, -                                   -> void_abstime, void_abstime;
end

export %has_mismatch% = not void(%mismatch_start%);

export %has_uncorrected_mismatch% =
    %has_mismatch% and
    (%has_employment_without_contract% or %has_contract_without_employment%);

export %has_employment_without_contract% =
    default(%first_day_wo_contract%, 31dec2035) <= fundamental.%plan_end%;

export %has_contract_without_employment% =
    default(%first_day_wo_employment%, 31dec2035) <= fundamental.%plan_end%;

%_date_ix%(Abstime date) =
    date + (%times_index_0%-1)*24:00;

export %first_day_wo_contract% =
    let start = fundamental.%plan_start%;
    first(times(fundamental.%days_in_plan%), %_date_ix%(start))
    where(%_employment_wo_contract%(%_date_ix%(start)));

%_employment_wo_contract%(Abstime date) =
    %has_employment%(date) and default(%group_at_date%(date),"R") = "R";

export %first_day_wo_employment% =
    let start = fundamental.%plan_start%;
    first(times(fundamental.%days_in_plan%), %_date_ix%(start))
    where(%_contract_wo_employment%(%_date_ix%(start)));

%_contract_wo_employment%(Abstime date) =
    not %has_employment%(date) and
    default(%group_at_date%(date),"R") <> "R";

/* Wrappers for some of the lookups above, using for crew dependent lookups
   Name lookups are wrapped using crew_extra_info below */
export %sex% = model_crew.%sex_by_id%(%id%);
export %birthday% = model_crew.%birthday_by_id%(%id%);
export %title% = model_crew.%title_by_id%(%id%);
export %supplementary_info% = model_crew.%supplementary_info_by_id%(%id%);
export %original_employment_date% = model_crew.%employment_date_by_id%(%id%);
export %employment_date% = %employment_date_at_date%(%now%);
export %retirement_date% = model_crew.%retirement_date_by_id%(%id%);
export %city_of_birth% = model_crew.%city_of_birth_by_id%(%id%);
export %state_of_birth% = model_crew.%state_of_birth_by_id%(%id%);
export %country_of_birth% = model_crew.%country_of_birth_by_id%(%id%);

export %is_loaded_by_id%(String id) =
  default(model_crew.%id_by_id%(id) <> "", False);

export %debug_selected% =
  fundamental.%debug_select_one_crew% = "" or crew.%id% = fundamental.%debug_select_one_crew%;

/*
 * Crew extra info
 */
table crew_extra_info(String id, Abstime date) =
  id, date ->
    String %_extra_info_surname%,
    String %_extra_info_firstname%,
    String %_extra_info_login_name%,
    export String  %personal_no%,
    String %_extra_info_nationality%, /* Defined by passport info */
    String %_extra_info_nationality2%, /* Defined by passport info */
    export String %marital_status%,
    export String %extra_info_si%;
  external %crew_extra_info_table%;
  id, (validfrom, validto( -> name, forenames, logname, personalno,
                              nationality, nationality2, maritalstatus, si;
  -,  -                    -> void_string, void_string, void_string, void_string,
                              void_string, void_string, void_string, void_string;
end

/* Constant lookups. */
export %firstname_at_date_by_id%(String id, Abstime date) =
  default(%_extra_info_firstname%(id, date), model_crew.%_firstname_by_id%(id));
export %surname_at_date_by_id%(String id, Abstime date) =
  default(%_extra_info_surname%(id, date), model_crew.%_surname_by_id%(id));
export %login_name_at_date_by_id%(String id, Abstime date) =
  default(%_extra_info_login_name%(id, date), model_crew.%_login_name_by_id%(id));

/* Lookups for use when context is a specific crew */
export %firstname_at_date%(Abstime date) =
  default(%_extra_info_firstname%(%id%, date), model_crew.%_firstname_by_id%(%id%));
export %surname_at_date%(Abstime date) =
  default(%_extra_info_surname%(%id%, date), model_crew.%_surname_by_id%(%id%));
export %login_name_at_date%(Abstime date) =
  default(%_extra_info_login_name%(%id%, date), model_crew.%_login_name_by_id%(%id%));

/* Lookups cached by id and date.
   The default lookup date is pp_start for Planning and now for Tracking (redefined in crew_cct).
   The crew table is used as backup if no name is found in crew_extra_info */
%name_lookup_date% = %pp_start%;

export %firstname% =
  default(%_extra_info_firstname%(%id%, %name_lookup_date%), model_crew.%_firstname_by_id%(%id%));
export %surname% =
  default(%_extra_info_surname%(%id%, %name_lookup_date%), model_crew.%_surname_by_id%(%id%));
export %surname_not_void% =
  default(%surname%, "");
export %login_name% =
  default(%_extra_info_login_name%(%id%, %name_lookup_date%), model_crew.%_login_name_by_id%(%id%));

/*
 * Crew Address Table
 */
table crew_address(Abstime date) =
  %id%, date ->
    export String %street%, export String %city%, export String %state%,
           export String %postal_code%, export String %country%;
  external %crew_address_table%;
  crew, (validfrom, validto( -> street, city, state, postalcode, country;
  -,- -> void_string, void_string, void_string, void_string,void_string;
end



/*
 * Lookup of phone number
 */
table crew_contact_tel(String type, String location) =
  %id%, type, location -> export String %phone_no%,
                          export String %phone_no_location%,
                          export String %phone_no_si%;
  external %crew_contact_table%;
  crew, typ, which -> val, which, si;
  -, -, - -> void_string, void_string, void_string;
end

%_phone_mob_num%(int nr) =
  %phone_no%("Mobile", concat("main", format_int(nr, "%d")));

%_phone_tel_num%(int nr) =
  %phone_no%("Tel", concat("main", format_int(nr, "%d")));

%_phone_num%(int nr) =
  default(%_phone_mob_num%(nr), %_phone_tel_num%(nr));

export %phone_primary% = %phone_no%("Tel", "main");
export %phone_secondary% =
  first(times(4), %_phone_num%(%times_index_0%)) where (not void(%_phone_num%(%times_index_0%)));

export %gen_email_addr%(Abstime d) =
  concat(%employee_number%,"@sas.dk");

export %signature% = %surname%;

export %fullname% =
    concat(%surname%, ", ", %firstname%);

export %fullname_by_id%(String id) =
    concat(model_crew.%_surname_by_id%(id), ", ", model_crew.%_firstname_by_id%(id));

export %is_inactive_at_date%(abstime date) =
  %is_retired_at_date%(date) or
  void(model_crew.%employment_start_by_id%(%id%,date));

%baseairport_at_time%(Abstime t) =
  let b1 = %base_at_date%(t),
      b2 = if b1 <> "-" then b1 else %base_at_pp_start%,
    base = if b2 <> "-" then b2 else "CPH";
  default(fundamental.%base2station%(base), "CPH");

export %hb_time%(abstime utc_time) =
  %station_localtime_compat%(%baseairport_at_time%(utc_time), utc_time);

export %hb_date%(abstime utc_time) =
  round_down(%station_localtime_compat%(%baseairport_at_time%(utc_time), utc_time), 24:00);

export %hb_date_end%(abstime utc_time) =
  round_up(%station_localtime_compat%(%baseairport_at_time%(utc_time), utc_time), 24:00);

export %utc_time%(abstime hb_time) =
  %station_utctime_compat%(%baseairport_at_time%(hb_time), hb_time);

export %hb_date_as_utc_time%(abstime utc_time) =
  %utc_time%(%hb_date%(utc_time));

export %hb_date_end_as_utc_time%(abstime utc_time) =
  %utc_time%(%hb_date_end%(utc_time));

/* If crew's employment ends exactly at the lookup time, then there is no
*  base defined at that time, and no defined station to get the time from.
*  When using a leg end time for lookup, this function should be used instead
*  of %utc_time%() (otherwise the "time-station" will default to CPH). */
export %utc_time_end%(abstime end_hb) =
  %utc_time%(end_hb - 0:01) + 0:01;

/*******************************************************************
**
** Section 3: Employment (rank, station, empno etc)
**
********************************************************************/

export %main_cat_of_crew_id%(String id, Abstime lookuptime) =
    %maincat_for_rank%(model_crew.%crewrank_at_date_by_id%(id, lookuptime));

%emp_change_in_pp% =
  default(model_crew.%employment_end_by_id%(%id%, %pp_start%) <= %pp_end%, true);

export %company_at_date%(Abstime lookuptime) =
  if crew_contract.%no_emp_change_in_plan% and crew_contract.%_in_plan%(lookuptime)
  then %company_at_plan_start%
  else model_crew.%company_at_date_by_id%(%id%, lookuptime);
%company_at_plan_start% =
  model_crew.%company_at_date_by_id%(%id%, fundamental.%plan_start%);

%base_at_pp_start% =
  %base_at_date%(%pp_start%);

/* The two variables rank and titlerank are almost the same. In rostering we only look
   at titlerank. The normal rank is %STATION_AT_used by manpower for resource calculation.
   Titlerank shall always be displayed. Work above below rank shall always be compared
   against titlerank. Default assignment shall be done against rank though */
/* [acosta:08/303@14:38] Changed back to rank_at_date_by_id, see WP NC-FAT 120 */
/* pergr, Should be titlerank WP FAT CCR 327 */
export %titlerank_at_date%(Abstime lookuptime) =
  if crew_contract.%no_emp_change_in_plan% and crew_contract.%_in_plan%(lookuptime)
  then %titlerank_at_plan_start%
  else model_crew.%titlerank_at_date_by_id%(%id%, lookuptime);
%titlerank_at_plan_start% =
  if parameters.%is_salary_run% then
    model_crew.%titlerank_at_date_by_id%(%id%, parameters.%salary_month_start_p%)
  else
    model_crew.%titlerank_at_date_by_id%(%id%, fundamental.%plan_start%);
%mainfunc_at_plan_start% =
  %maincat_for_rank%(%titlerank_at_plan_start%);

export %rank_at_date%(Abstime lookuptime) =
  default(%titlerank_at_date%(lookuptime), "-");

export %crewrank_at_date%(Abstime lookuptime) =
  if crew_contract.%no_emp_change_in_plan% and crew_contract.%_in_plan%(lookuptime)
  then %crewrank_at_plan_start%
  else model_crew.%crewrank_at_date_by_id%(%id%, lookuptime);
%crewrank_at_plan_start% =
  model_crew.%crewrank_at_date_by_id%(%id%, fundamental.%plan_start%);

/* The function for crew at time variable calculates the default position for crew
   used by studio when assigning to the any-position. This function uses the rank
   field */
export %function_for_crew_at_time%(String id, Abstime tim) =
  default(%_function_for_crew_at_time%(id, tim), "");
%_function_for_crew_at_time%(String id, Abstime tim) =
  let rank = model_crew.%crewrank_at_date_by_id%(id, tim);
  if crew_pos.%func2pos%(rank) <> 0 then
    rank
  else if substr(rank,1,1) = "F" then
    if rank = "FF" then
      "FP"
    else
      "FC"
  else
    "AH";

export %civicstation_at_date%(Abstime lookuptime) =
  if crew_contract.%no_emp_change_in_plan% and crew_contract.%_in_plan%(lookuptime)
  then %civicstation_at_plan_start%
  else model_crew.%civicstation_at_date_by_id%(%id%, lookuptime);
%civicstation_at_plan_start% =
  model_crew.%civicstation_at_date_by_id%(%id%, fundamental.%plan_start%);

export %station_at_date%(Abstime lookuptime) =
  if crew_contract.%no_emp_change_in_plan% and crew_contract.%_in_plan%(lookuptime)
  then %station_at_plan_start%
  else model_crew.%station_at_date_by_id%(%id%, lookuptime);
%station_at_plan_start% =
  model_crew.%station_at_date_by_id%(%id%, fundamental.%plan_start%);

export %airport_at_date%(Abstime lookuptime) =
  let station = %station_at_date%(lookuptime);
  default(fundamental.%base2station%(station), station);

export %country_at_date%(Abstime lookuptime) =
  if crew_contract.%no_emp_change_in_plan% and crew_contract.%_in_plan%(lookuptime)
  then %country_at_plan_start%
  else model_crew.%country_at_date_by_id%(%id%, lookuptime);
%country_at_plan_start% =
  model_crew.%country_at_date_by_id%(%id%, fundamental.%plan_start%);

export %extperkey_at_date%(Abstime lookuptime) =
  if crew_contract.%no_emp_change_in_plan% and crew_contract.%_in_plan%(lookuptime)
  then %extperkey_at_plan_start%
  else model_crew.%extperkey_at_date_by_id%(%id%, lookuptime);
  
%extperkey_at_plan_start% =
  model_crew.%extperkey_at_date_by_id%(%id%, fundamental.%plan_start%);

export %employment_start%(Abstime lookuptime) =
  if crew_contract.%no_emp_change_in_plan% and crew_contract.%_in_plan%(lookuptime)
  then %employment_start_at_plan_start%
  else model_crew.%employment_start_by_id%(%id%, lookuptime);
%employment_start_at_plan_start% =
  model_crew.%employment_start_by_id%(%id%, fundamental.%plan_start%);

export %employment_end%(Abstime lookuptime) =
  if crew_contract.%no_emp_change_in_plan% and crew_contract.%_in_plan%(lookuptime)
  then %employment_end_at_plan_start%
  else model_crew.%employment_end_by_id%(%id%, lookuptime);
%employment_end_at_plan_start% =
  model_crew.%employment_end_by_id%(%id%, fundamental.%plan_start%);

export %last_employment_end% =
  model_crew.%last_employment_end_by_id%(%id%);

export %employment_pp_start_valid_to% = %employment_end%(%pp_start%);
export %employment_pp_end_valid_from% = %employment_start%(%pp_end%);

export %has_employment%(Abstime date) =
    not void(%employment_start%(date));

export %has_employment_pp_start% =
    %has_employment%(%pp_start%);
/*
 * %ce_x%-variables are only used for selections.
 * Please note that the times-evaluation only will occur for the few percent
 * of the crew that change employment during a plan period.
 */

%_emp_st_aix% =
  model_crew.%employment_start_by_id%(%id%, %available_iter_date%(%times_index_0%));

export %ce_has_rank_in_pp%(string rank) =
  if crew_contract.%no_emp_change_in_plan%
  then %titlerank_at_plan_start% = rank
  else any(times(%available_days%), %_titlerank_aix% = rank)
       while(not void(%_emp_st_aix%));
%_titlerank_aix% =
  model_crew.%titlerank_at_date_by_id%(%id%, %available_iter_date%(%times_index_0%));

export %ce_is_pilot_in_pp% =
  if crew_contract.%no_emp_change_in_plan%
  then %mainfunc_at_plan_start% = "F"
  else any(times(%available_days%), %_mainfunc_aix% = "F")
       while(not void(%_emp_st_aix%));
export %ce_is_cabin_in_pp% =
  if crew_contract.%no_emp_change_in_plan%
  then %mainfunc_at_plan_start% = "C"
  else any(times(%available_days%), %_mainfunc_aix% = "C")
       while(not void(%_emp_st_aix%));
%_mainfunc_aix% =
  %maincat_for_rank%(%_titlerank_aix%);

export %ce_has_base_in_pp%(string base) =
  if crew_contract.%no_emp_change_in_plan%
  then crew_contract.%base_at_plan_start% = base
  else any(times(%available_days%), %_base_aix% = base)
       while(not void(%_emp_st_aix%));
%_base_aix% =
  model_crew.%base_at_date_by_id%(%id%, %available_iter_date%(%times_index_0%));

export %ce_has_planning_group_in_pp%(string pg) =
  if crew_contract.%no_emp_change_in_plan%
  then %planning_group_at_date%(fundamental.%plan_start%) = pg
  else any(times(%available_days%), %planning_group_at_date%(%available_iter_date%(%times_index_0%)) = pg)
       while(not void(%_emp_st_aix%));

export %ce_has_station_in_pp%(string station) =
  if crew_contract.%no_emp_change_in_plan%
  then %station_at_plan_start% = station
  else any(times(%available_days%), %_station_aix% = station)
       while(not void(%_emp_st_aix%));
%_station_aix% =
  model_crew.%station_at_date_by_id%(%id%, %available_iter_date%(%times_index_0%));

/* Flying starts with the first NEW+ACTYPE restriction */
export %in_first_year_of_flying% =
  let emp_start = crew.%employment_start%(trip.%start_hb%);
  trip.%start_hb% <
  round_up_month(
    add_months(
      default(min(times(%_nr_qrestrictions%(emp_start, trip.%start_hb%)),
                  %qrestr_validfrom_ival%(%times_index_0%,
                                          emp_start,
                                          trip.%start_hb%)),
                   emp_start), 12));

/* For Freeday and BL assignment */
%emp_start% =
    if %has_employment_pp_start% then
        %pp_start%
    else
        default(%employment_pp_end_valid_from%, 31dec2035);

%emp_end% =
    if %has_employment%(%pp_end%) then
        add_months(%pp_end%, 1)
    else
        default(%employment_pp_start_valid_to%, 1jan1986);

/*
 * Reverse lookup for empno/id
 */

export %empno_by_id%(String id) = model_crew.%empno_by_id%(id);

export %extperkey_to_id%(String nr) =
  let crewid = default(%extperkey_to_id_at_date%(nr, fundamental.%pp_end%), ""),
      emp_start = default(model_crew.%employment_start_by_id%(crewid, fundamental.%pp_end%),
                          fundamental.%pp_start%);
  if emp_start > fundamental.%pp_start% then
    %extperkey_to_id_at_date%(nr, emp_start)
  else
    %extperkey_to_id_at_date%(nr, fundamental.%pp_start%);

/*
table extperkey_nr_table(String nr, Abstime date) =
  nr, date -> export String %extperkey_to_id_at_date%;
  external %crew_employment_table%;
  extperkey, (validfrom, validto( -> crew;
  -, - -> void_string;
end*/

export %extperkey_to_id_at_date%(String extperkey, Abstime lookupdate) =
  model_crew.%crew_id_from_extperkey%(extperkey, lookupdate);


/*
table extperkey_base_table(String base, AbsTime st, AbsTime et) =
  %id%, st, et , base -> export String %extperkey_at_base_in_period%;
  external %crew_employment_table%;
  crew, <=validto, >=validfrom, base -> extperkey;
  -,-,-,- -> void_string;
end
*/

export %extperkey_at_base_in_period%(String base, Abstime st, Abstime et) =
  model_crew.%crew_id_from_base_period%(%id%, base, st, et);

/*
 * Employee number
 * NOTE: use extperkey for SAS [acosta:06/312@10:26]
 * since extperkey is never reused this should be a simple lookup
 */
export %employee_number% = default(%extperkey%, %id%);
export %employee_number_at_date%(AbsTime date) = default(%extperkey_at_date%(date), %id%);
export %extperkey% = %extperkey_at_date%(%available_start%);


/* Employment start/end considering partial coverage of pp.*/
/*table crew_employment_limits_table(AbsTime st, AbsTime et) =
  crew.%id%, st, et
  -> export Abstime %employment_first_start_in_period%,
     export Abstime %employment_last_end_in_period%;
  external %crew_employment_table%;
  crew, <=validto, >=validfrom
  -> min(validfrom),
     max(validto);
end
*/

export %employment_first_start_in_period%(Abstime st, Abstime et) =
  model_crew.%employment_first_start_in_period%(%id%, st, et);

export %employment_last_end_in_period%(Abstime st, Abstime et) =
  model_crew.%employment_last_end_in_period%(%id%, st, et);

%_employment_first_start_in_pp% = model_crew.%employment_first_start_in_period%(%id%, %pp_start%, %pp_end%);
%_employment_last_end_in_pp% = model_crew.%employment_last_end_in_period%(%id%, %pp_start%, %pp_end%);

%employment_first_start_in_pp% =
  nmax(%pp_start%, %_employment_first_start_in_pp%);
%employment_last_end_in_pp% =
  nmin(%pp_end%, %_employment_last_end_in_pp%);

/*
 * Availability
 */
export %available_start% =
  if parameters.%is_salary_run% then
    nmax(default(%employment_first_start_in_period%(parameters.%salary_month_start_p%, parameters.%salary_month_end_p%), parameters.%salary_month_end_p%), parameters.%salary_month_start_p%)
  else
    default(%employment_first_start_in_pp%, %pp_end%);

export %available_end% =
  default(%employment_last_end_in_pp%, %pp_start% - 0:01);

%available_end_day% =
  round_down(%available_end% - 0:01, 24:00);

%available_days% =
  nmax(0, 1 + ((%available_end_day% - %available_start%) / 24:00));

%available_iter_date%(Int ix) =
  %available_start% + (ix-1)*24:00;

export %has_employment_for_leg% =
    not void(%employment_start%(leg.%start_hb%)) and
    not void(%employment_start%(leg.%end_hb% - 0:01));

/*
 * Region / Homebase /Country
 */
export %homebase% = %base_at_date%(%available_start%);
export %homebase_not_void% = default(%homebase%, "");
export %homebase_pp_start% = %base_at_date%(%pp_start%);
export %homebase_pp_end% = %base_at_date%(%pp_end%);
export %homebase_next_in_pp% =
  %base_at_date%(nmin(%employment_pp_start_valid_to%, %pp_end%));

export %homebase_change% =
  %base_at_date%(%available_start%)
   <> %base_at_date%(%available_end%);

export %homebase_change_in_pp% =
   %homebase_pp_start_valid_to% < %pp_end%;

export %homebase_next_different_in_pp% =
    if %homebase_change_in_pp% then
        %base_at_date%(%homebase_pp_start_valid_to%)
    else
        %homebase_pp_start%;

/* Returns the date of the last homebase change before pp_end.
   If a value equal or larger than pp_end is returned it means that
   there was no change in pp. */
export %homebase_pp_start_valid_to% =
  if %homebase_pp_start% <> %homebase_next_in_pp% then
    %employment_pp_start_valid_to%
  else if %homebase_pp_start% <> %homebase_pp_end% then
    %employment_pp_end_valid_from%
  else
    /* There was no change in pp */
    %pp_end%;

export %is_homebase_skd% =
  %homebase% = "CPH";
export %is_homebase_skn% =
  %homebase% = "OSL" or %homebase% = "TRD" or %homebase% = "SVG" or %homebase% = "BGO";
export %is_homebase_sks% =
  %homebase% = "STO";

export %is_homebase_skj% =
  %homebase% = "NRT";

export %is_homebase_scand% =
  %is_homebase_skd% or %is_homebase_skn% or %is_homebase_sks%;

set scand_regions = "SKS", "SKN", "SKD", "SKI";

export %is_region_scand% =
  %region% in scand_regions;

export %company% = %company_at_date%(%available_start%);

/* Region definition from 20071211
**
** NOTE: "REGION should no longer be used, as it is pretty undefined in some situations. Instead use
** agreement group, agreemnent qualification group, ac employer or other alternatives.
** In particlar, region does not work for Cimber. Lars Westerlind
*/
export %is_SKD% = %region% = "SKD";
export %is_SKN% = %region% = "SKN";
export %is_SKS% = %region% = "SKS";
export %is_SKJ% = %region% = "SKJ"; /* Japanese CC */
export %is_SKK% = %region% = "SKK"; /* Chinese CC */
export %is_SKI% = %is_SKJ% or %is_SKK% or %region% = "SKI";

export %is_SVS% = %region% = "SVS"; /* SAS LINK */
export %is_SKD_at_date%(abstime date_hbt) = default(%region_at_date%(date_hbt) = "SKD", false);
export %is_SKN_at_date%(abstime date_hbt) = default(%region_at_date%(date_hbt) = "SKN", false);
export %is_SKS_at_date%(abstime date_hbt) = default(%region_at_date%(date_hbt) = "SKS", false);
export %is_SKJ_at_date%(abstime date_hbt) = default(%region_at_date%(date_hbt) = "SKJ", false);
export %is_SKK_at_date%(abstime date_hbt) = default(%region_at_date%(date_hbt) = "SKK", false);
export %is_SKI_at_date%(abstime date_hbt) = %is_SKJ_at_date%(date_hbt)  or
                                            %is_SKK_at_date%(date_hbt)  or
                                            default(%region_at_date%(date_hbt) = "SKI", false);
export %is_SVS_at_date%(abstime date_hbt) = default(%region_at_date%(date_hbt) = "SVS", false);
export %is_SKI_in_month%(AbsTime date) =
  (crew.%is_SKI_at_date%(round_up_month(date)) or
  crew.%is_SKI_at_date%(round_down_month(date)));
export %is_FC_SKN_SKS_SKD_FD_AG% =
  %flight_crew% and
  (crew.%is_SKN% or
   crew.%is_SKS% or
   crew.%has_agmt_group_skd_fd%);

export %region% =
  %region_at_date%(%available_start%);

export %is_SKI_dk% =
  %region% = "SKI" and %homebase% = "CPH";
export %is_SKI_no% =
  %region% = "SKI" and %homebase% = "OSL";
export %is_SKI_se% =
  %region% = "SKI" and %homebase% = "STO";

export %is_fc% = 
  %is_fc_dk% or
  %is_fc_no% or
  %is_fc_se%;

export %is_fc_dk% =
  %flight_crew% and
  (%is_SKD% or %is_SKI_dk%);

export %is_fc_no% =
  %flight_crew% and
  (%is_SKN% or %is_SKI_no%);

export %is_fc_se% =
  %flight_crew% and
  (%is_SKS% or %is_SKI_se%);

/* For SAS, the home station is the BASE from which the crew's trips start.
* Normally base and station for a swedish crew is STO, which is NOT an airport.
* When an airport is desired, please use %homeairport% or %airport_at_date%!
*/
export %homestation% = %station_at_date%(%available_start%);
export %homeairport% = %airport_at_date%(%available_start%);

/* %country% already taken... [acosta:06/312@10:25] */
export %employment_country% = %country_at_date%(%available_start%);

export %employment_country_change% =
  %country_at_date%(%available_start%) <> %country_at_date%(%available_end%);


/* Crew on loan to other base% */

export %is_on_loan_at_date%(Abstime date) =
  crew_contract.%is_on_long_term_loan_at_date%(date) or
  %is_on_ad_hoc_loan_at_date%(date);

export %region_on_loan_to_at_date%(Abstime date) =
  if crew_contract.%is_on_long_term_loan_at_date%(date) then
    %region_at_date%(date)
  else
    leg.%employer_region%;

/* The definition is in crew_contract to avoid circular references */
export %region_at_date%(Abstime lookuptime) =
    crew_contract.%region_at_date%(lookuptime);
export %base_at_date%(Abstime lookuptime) =
    crew_contract.%base_at_date%(lookuptime);
export %planning_group_at_date%(Abstime lookuptime) =
    crew_contract.%planning_group_at_date%(lookuptime);

export %planning_group% =
    %planning_group_at_date%(%available_start%);

export %ac_employer_code_at_date%(Abstime d) =
  let ret = %planning_group_at_date%(d);
  if ret="SKJ" or ret="SKK" then "SKI"
  else ret;

export %ac_employer_id_at_date%(Abstime d) =
  leg.%ac_employer_id_from_code%(%ac_employer_code_at_date%(d));

export %flying_qa_ac_employer%(Abstime d) =
  %ac_employer_id_at_date%(d) = leg.%ac_employer_qa%;

export %is_on_ad_hoc_loan_at_date%(Abstime date) =
  leg.%is_active_flight% and
  %region_at_date%(date) =
    fundamental.%region_at_base%(%base_at_date%(date)) and
  leg.%employer_region%  <> "SKI" and
  %region_at_date%(date) <> leg.%employer_region%;


/*
 * Rank and category
 */
table crew_rank_set_table(String rank) =
  rank -> export String %maincat_for_rank%;
  external %crew_rank_set_table%;
  id   -> maincat;
  -    -> "?";
end


export %rank% =
  /* rank_pp_start never voids, but we need to handle new employes without rank
     at pp_start */
  if %rank_pp_start% = "-" then
    %_rank_start_default%
  else
    %rank_pp_start%;
%_rank_start_default% = %rank_at_date%(%available_start%);
export %rank_not_void% = default(%rank%, "");

export %rank_end% = default(%rank_pp_end%, %_rank_end_default%);
%_rank_end_default% = %rank_at_date%(%available_end%);

/* 2009-01-07 Janne C. Fairness needs a rank_at_date that does not return "-"
   WP FAT-CCR 260
   AA crew isn't handled in fairness, but they should be in the AH group anyway
   /EKG 090225 */
set cabin_ranks_for_fairness = "AP", "AS", "AH";
export %fairness_rank% =
    let rank = %titlerank_at_date%(%available_start%);
    if crew.%is_cabin% and rank not in cabin_ranks_for_fairness then "AH"
    else rank;

export %rank_sub_category% =
  concat(%rank%, %sub_category%(%available_start%));

export %rank_change% =
  %rank% <> %rank_end%;

export %rank_trip_start% = %rank_at_date%(trip.%start_hb%);
export %rank_leg_start% = %rank_at_date%(leg.%start_hb%);
export %titlerank_leg_start% = %titlerank_at_date%(leg.%start_hb%);

export %rank_pp_start% = %rank_at_date%(%pp_start%);
export %rank_pp_end% = %rank_at_date%(%pp_end%);
export %rank_next_in_pp% =
  %rank_at_date%(nmin(%employment_pp_start_valid_to%, %pp_end%));

export %rank_change_in_pp% =
   %rank_pp_start_valid_to% < %pp_end%;

export %rank_next_different_in_pp% =
    if %rank_change_in_pp% then
        %rank_at_date%(%rank_pp_start_valid_to%)
    else
        %rank_pp_start%;

/* Returns the date of the last rank change before pp_end.
   If a value equal or larger than pp_end is returned it means that
   there was no change in pp. */
export %rank_pp_start_valid_to% =
  if %rank_pp_start% <> %rank_next_in_pp% then
    %employment_pp_start_valid_to%
  else if %rank_pp_start% <> %rank_pp_end% then
    %employment_pp_end_valid_from%
  else
    /* There was no change in pp */
    %pp_end%;

/* Flightcrew or Cabin.
   They are checked independently to avoid bugs based on data-errors. */
export %is_pilot% = %main_func% = "F";
export %is_cabin% = %main_func% = "C";

export %main_func% = %maincat_for_rank%(%rank%);
export %main_func_at_date%(abstime a) =
  %maincat_for_rank%(%rank_at_date%(a));
export %main_func_trip_start% = %maincat_for_rank%(%rank_trip_start%);
export %main_func_at_plan_start% = %maincat_for_rank%(%rank_trip_start%);

/* Rank and base */
export %seniority_group% = concat(%homebase%,"-",%rank%);

/* Temporary crew have the contract description set to Temp... This information
 * should be enough in order to properly identify all temp crew. */

export %is_temporary_at_date%(Abstime date) =
  model_crew.%is_temporary_at_date%(%id%, date);

export %is_temporary% = %is_temporary_at_date%(%pp_start%);

export %is_temporary_pp_end% = %is_temporary_at_date%(%pp_end%);

export %is_temporary_trip_start% =
  not %is_not_temp_in_pp% and
  %is_temporary_at_date%(trip.%start_hb%);

export %is_temporary_leg_start% = %is_temporary_at_date%(leg.%start_hb%);

%is_not_temp_in_pp% =
  not %is_temporary% and
  not %is_temporary_pp_end%;


/*
    Admin crew has administrative contract
*/

export %is_crew_admin_at_date%(Abstime date) = model_crew.%is_crew_admin_at_date%(%id%, date);


export %is_crew_admin_leg_start% = %is_crew_admin_at_date%(leg.%start_hb%);


/* Monthly parttine contract */

export %is_crew_monthly_parttime_at_date%(Abstime date) = model_crew.%is_crew_monthly_parttime_at_date%(%id%, date);


export %is_crew_monthly_parttime_leg_start% = %is_crew_monthly_parttime_at_date%(leg.%start_hb%);


/* Parttime contracts due to Legal reasons */
export %is_legal_pt_wop_start% = %is_legal_pt_at_date%(wop.%start_hb%) or
                                 %is_study_pt_at_date%(wop.%start_hb%) or
                                 %is_parental_pt_at_date%(wop.%start_hb%);

export %is_legal_pt_at_date%(Abstime date) =
  default(locate("Legal F",%contract_desc_short%(date)) > 0, false);
export %is_study_pt_at_date%(Abstime date) =
  default(locate("Study F",%contract_desc_short%(date)) > 0, false);
export %is_parental_pt_at_date%(Abstime date) =
  default(locate("NNS F",%contract_desc_short%(date)) > 0, false);

/* Resource pool */
export %is_resource_pool_pp_start_or_pp_end% =
  %is_temporary_at_date%(%pp_start%) or
  %is_temporary_at_date%(%select_pp_end%);

/* SKBU Resource pool */
export %is_skbu_resource_pool_pp_start_or_pp_end% =
  %is_skbu_resource_pool_at_date%(%pp_start%) or
  %is_skbu_resource_pool_at_date%(%select_pp_end%);

export %is_skbu_resource_pool_at_date%(Abstime date) =
  %is_skn% and %is_temporary_at_date%(date);

export %is_skbu_resource_pool% =
  %is_SKN% and %is_temporary%;

export %is_skbu_resource_pool_pp_end% =
  %is_SKN% and %is_temporary_pp_end%;

/* Crew leased to non-SAS companies */
table crew_leased_table(Abstime date) =
  %id%, date -> String %_leased_id%,
                Bool %_is_leased_without_overtime%,
                Bool %_is_leased_without_perdiem%;
  external %crew_leased_table%;
  "crew", ("validfrom", "validto"( -> "crew", "overtime", "perdiem";
     -,            -             -> void_string, void_bool, void_bool;
end

export %is_leased%(Abstime date) = not void(%_leased_id%(date));
export %is_leased_wop_start% = first(trip(wop), %is_leased_trip_start%);
export %is_leased_trip_start% = first(duty(trip), %is_leased_duty_start%);

/* Crew that are not leased at neither pp_start nor pp_end is considered
** not to be leased at all in period.
** If crew is leased at either pp_start or end or both we check on
** duty-level
*/
export %is_leased_duty_start% =
  (not %is_not_leased_in_pp%) and
  %is_leased%(duty.%start_hb%);

%is_not_leased_in_pp% =
  (not %is_leased%(%pp_start%)) and
  (not %is_leased%(%pp_end%));

export %is_leased_without_overtime%(Abstime date) =
/* Crew leased to non-SAS companies, not being paid overtime */
  default(not %_is_leased_without_overtime%(date), False);
export %is_leased_without_perdiem%(Abstime date) =
/* Crew leased to non-SAS companies, not being paid perdiem */
  default(not %_is_leased_without_perdiem%(date), False);

table rudob_crew_leased_table =
  %id%, fundamental.%loaded_data_period_end%,
  fundamental.%loaded_data_period_start% ->
     export Abstime %leased_validfrom%,
     export Abstime %leased_validto%,
     export String %leased_day_comment%;
  external %crew_leased_table%;
  "crew", >="validfrom", <="validto" -> "validfrom","validto","si";
  - ,               -,          -  -> void_abstime, void_abstime, void_string;
end

export %leased_validfrom_rudob% =
  nmax(%leased_validfrom%, fundamental.%loaded_data_period_start%);
export %leased_validto_rudob% =
  nmin(%leased_validto%, fundamental.%loaded_data_period_end%);

export %leased_days_length% =
  let validto = %leased_validto_rudob%,
      validfrom = %leased_validfrom_rudob%;
  if not void(validfrom) and not void(validto)
  then validto - validfrom
  else 0:00;

export %matching_leased_period_exists%(Abstime validfrom, int days) =
  %leased_validfrom% = validfrom and %leased_validto% = validfrom + days*24:00;

/* the next variables are for selecting crew back from lease
   in the planning period */
export %back_from_lease_pp% =
  %pp_start% <= %leased_validto% and %leased_validto% < %pp_end%;

table back_from_lease_pp =
  crew.%id%, %pp_start%, %pp_end% ->
    export AbsTime %back_from_lease_pp_sort%;
  external "crew_leased";
  "crew", <="validto", >"validto" -> min("validfrom");
end

/*******************************************************************
**
** Section 4: Seniority and Fairness
**
** The seniority order should be normalised in order for the
** bid and fairness calculations to work properly. This will be
** dealt with in the Rostering Subproject.
********************************************************************/

/* Grp TBD */
/*
 * Lookup of crew seniority. Lower value is higher seniority.
 */

table crew_seniority_table(Abstime lookuptime, string sen_group) =
  %id%, sen_group, lookuptime -> int %_seniority_value%;
  external %crew_seniority_table%;
  crew, grp, (validfrom, validto( -> seniority;
  -, -, - -> 9999;
end

/* We can handle multiple seniority values for each crew if they are planned
 * in different areas. For now this is only used for Norwegian longhaul flight
 * crew. */

export %seniority_value%(abstime date) =
    let local_sen = %_seniority_value%(date,"LOCAL"),
        sas_sen = %_seniority_value%(date,"SAS");
    if (planning_area.%crew_planning_group% = "SKN" or
        planning_area.%crew_planning_group% = "SAS") and /* SAS is used in tracking only, which will give trackers local seniority if it exist, else SAS */
        local_sen < 9999
    then local_sen
    else sas_sen;

/*%_seniority_group% = planning_area.%crew_region%;*/
export %seniority% = %seniority_value%(%pp_start%);

export %seniority_order% = %value_int%("Seniority order");
export %max_seniority_order% = %crew_value_int%(%seniority_group%,"Max seniority order");
export %min_seniority_order% = 1;

/*
 * Crew value table
 *
 *  This is a table for caching information during an optimiser run
 */
table value_table(String CrewId, String Value) =
  CrewId, Value ->
    export Int %crew_value_int%,
    export Reltime %crew_value_rel%,
    export Abstime %crew_value_abs%,
    export String %crew_value_string%;
  external %value_table%;
  CrewId, "Type" -> Int1,Rel1,Abs1,Str1;
  -,- -> 0,0:00,1jan86,"";
end

export %value_int%(String Value) = %crew_value_int%(%id%, Value);
export %value_rel%(String Value) = %crew_value_rel%(%id%, Value);
export %value_abs%(String Value) = %crew_value_abs%(%id%, Value);
export %value_string%(String Value) = %crew_value_string%(%id%, Value);

/****************************************************************
 * Section 5: Qualifications
 ***************************************************************/
/*
 * Standard lookup
 */
table qln(String key, Abstime date, Int seq) =
  %id%, key, date, seq ->
    export String %qln%,/* Could be either ac-type, station or country */
    export Abstime %qln_valid_from%,
    export Abstime %qln_valid_to%;
  external %qln_table%;
  crew, qual_typ, (validfrom,validto(, match_number ->
    qual_subtype, validfrom, validto;
  -, -, -, - -> "", void_abstime, void_abstime;
end

table all_qln_table(Abstime date, Int seq) =
  seq, %id%, date ->
    export String %qln_type_at_time%, export String %qln_subtype_at_time%,
    export Abstime %qln_validfrom_at_time%, export Abstime %qln_validto_at_time%;
  external %qln_table%;
  match_number, crew, (validfrom, validto( ->
    qual_typ, qual_subtype, validfrom, validto;
  -, -, - -> void_string, void_string, void_abstime, void_abstime;
end

/* One lookup for all variables */
table all_qln_in_pp(Int seq) =
  %id%, seq, %pp_start%, %pp_end% ->
                export String %qln_type%,
                export String %qln_subtype%,
                export Abstime %qln_validfrom%,
                export Abstime %qln_validto%;
  external %qln_table%;
  crew, match_number, <validto, >validfrom -> qual_typ, qual_subtype, validfrom, validto;
  -, -, -, -                  -> void_string, void_string, void_abstime, void_abstime;
end

export %number_of_qualifications% =
    count(times(100))
    while(not void(%qln_type%(%times_index_0%)));

export %has_qln_in_pp%(String type, String subtype) =
    any(times(%number_of_qualifications%), %qln_subtype%(%times_index_0%) = subtype)
    where (%qln_type%(%times_index_0%) = type);
export %has_acqln_in_pp%(String acqual) =
    %has_qln_in_pp%("ACQUAL", acqual);

export %has_aptqln_in_pp%(String apt) =
    %has_acq_qln%("AIRPORT", apt, %virtual_qual_ac_qual%(%ac_qln1%), %pp_start%) or
    %has_acq_qln%("AIRPORT", apt, %virtual_qual_ac_qual%(%ac_qln%(%pp_end% - 0:01, 1)), %pp_end% - 0:01);

export %has_qln_lh_in_pp% =
  any(times(%number_of_qualifications%), %qln_subtype%(%times_index_0%) in long_haul_qlns_set)
  where (%qln_type%(%times_index_0%) = "ACQUAL");

/*
 * Expiry lookup
 */
table qln_expiry_date(String type, String subtype, Abstime date) =
  %id%, type, subtype, date ->
    export Abstime %qln_entry_date%,
    export Abstime %qln_expiry_date%;
  external %qln_table%;
  crew, qual_typ, qual_subtype, (validfrom,validto( ->
    validfrom, validto;
  -, -, -, - -> 01jan1986, 01jan1986;
end

/* related to SKCMS-1878*/
table qln_exists_at_date(String type, String subtype, Abstime date) =
  %id%, type, subtype, date ->
  export String %qln_exists%;
  external %qln_table%;
  crew, qual_typ, qual_subtype, (validfrom,validto( -> crew;
  -, -, -, - -> void_string;
end

table qln_ac_qual_expiry_date(String type, String subtype, String acqqual_type, String acqqual_subtype, Abstime date) =
  %id%, type, subtype, acqqual_type, acqqual_subtype, date ->
    export Abstime %qacq_entry_date%,
    export Abstime %qacq_expiry_date%;
  external %qln_acqual_table%;
  crew, qual_typ, qual_subtype, acqqual_typ, acqqual_subtype, (validfrom,validto( ->
    validfrom, validto;
  -, -, -, -, -, - -> 01jan1986, 01jan1986;
end

table qln_ac_qual_general_lookup1(String type, String subtype, String acqual, Abstime date) =
  %id%, type, subtype, acqual, date ->
    /*export String  %qacq_acqual_type%,            ACQUAL etc. */
    /*String  %_qacq_acqual_subtype%,   A3, 90 etc. */
    Abstime %_qacq_validto%;
  external %qln_acqual_table%;
  crew, acqqual_typ, acqqual_subtype, qual_subtype, (validfrom, validto( ->
    validto;
  -, -, -, -, - -> 01jan1986;
end

/* This lookup is only to be used in reports */
table qln_ac_qual_general_lookup(Int ix) =
  %id%, ix, %pp_start%, %pp_end% ->
    export String  %qacq_acqual_type%,            /* ACQUAL etc. */
    export String  %qacq_acqual_subtype%,          /* A3, 90 etc. */
    export String  %qacq_acqqual_type%,      /* INSTRUCTOR etc. */
    export String  %qacq_acqqual_subtype%,   /* TRI, TRE etc. */
    export Abstime %qacq_validfrom%,
    export Abstime %qacq_validto%;
  external %qln_acqual_table%;
  crew, match_number, <validto, >validfrom ->
    qual_typ, qual_subtype, acqqual_typ, acqqual_subtype, validfrom, validto;
  -, -, -, - -> void_string, void_string, void_string, void_string, void_abstime, void_abstime;
end

export %qacq_rows% =
    count(times(100))
    while (not void(%qacq_acqual_type%(%times_index_0%)));

/*
 * Lookup in acqual, but look for acqqual_typ
 */
table qln_3(String qual_typ, String acqual_typ, Abstime date, Int seq) =
  %id%, qual_typ, acqual_typ, date, seq ->
    export String %qln_3%,/* if ACQUAL: aircraft type qyal code  */
    export String %acqln_3%, /* if INSTRUCTOR: instructor type */
    export Abstime %qln_valid_from_3%,
    export Abstime %qln_valid_to_3%;
  external %qln_acqual_table%;
  crew, qual_typ, acqqual_typ, (validfrom,validto(, match_number ->
    qual_subtype,acqqual_subtype, validfrom, validto;
  -, -, -, -, - -> "", "", void_abstime, void_abstime;
end

/*
 * Last expiry lookup
 */
table last_qln_expiry_date(String type, String subtype, Abstime date) =
  %id%, type, subtype, date ->
    Abstime %_qln_last_expiry_date%;
  external %qln_table%;
  crew, qual_typ, qual_subtype, >=validfrom -> max(validto);
end

table last_qacq_expiry_date(String type, String subtype, String acqqual_type, String acqqual_subtype, Abstime date) =
  %id%, type, subtype, acqqual_type, acqqual_subtype, date ->
    Abstime %_qacq_last_expiry_date%;
  external %qln_acqual_table%;
  crew, qual_typ, qual_subtype, acqqual_typ, acqqual_subtype, >=validfrom -> max(validto);
end

table qln_in_period(String type, String subtype, Abstime ival_start, Abstime ival_end) =
  %id%, type, subtype, ival_start, ival_end -> String %_qln_in_period%;
  external %qln_table%;
  crew, qual_typ, qual_subtype, <validto, >validfrom -> qual_subtype;
  -, -, -, -, - -> "";
end

table qln_in_whole_period(String type, String subtype, Abstime ival_start, Abstime ival_end) =
  %id%, type, subtype, ival_start, ival_end -> String %_qln_in_whole_period%;
  external %qln_table%;
  crew, qual_typ, qual_subtype, >=validfrom, <validto -> qual_subtype;
  -, -, -, -, - -> "";
end

table limited_qln_in_whole_period(String type, String subtype, Abstime ival_start, Abstime ival_end) =
  %id%, type, subtype, ival_start, ival_end -> String %_limited_qln_in_whole_period%;
  external %qln_ac_table_p%;
  crew, acqqual_typ, acqqual_subtype, >=validfrom, <validto -> acqqual_subtype;
  -, -, -, -, - -> "";
end

/*
 * Iterations lookup
 */
table max_iter(String key, Abstime date) =
  %id%, key, date ->
    Int %_max_iter%;
  external %qln_table%;
  crew, qual_typ, (validfrom,validto( -> count(row_number);
end

table max_iter_2(String key, Abstime date) =
  %id%, key, date ->
    Int %max_iter_2%;
  external %qln_acqual_table%;
  crew, acqqual_typ, (validfrom,validto( -> count(row_number);
end

/* this selects only code valid for current AC type */
table max_iter_3(String qual_typ, String acqual_typ, Abstime date) =
  %id%, qual_typ, acqual_typ, date ->
    Int %max_iter_3%;
  external %qln_acqual_table%;
  crew, qual_typ, acqqual_typ, (validfrom,validto( -> count(row_number);
end

/*
** Lookup lifus instructors.
**
*/

/* Required qualification for LIFUS instructor is 'LIFUS'. */
%is_lifus_matching_qual%(Bool timecheck, String subtype, Abstime fdate, Abstime limdate)=
  if subtype <> "LIFUS" then
    false
  else if not timecheck then
    true
  else
    fdate <= limdate; /* instructor need be instructor before limdate */

/* check if current legs qual code mathes ACQUAL in CREW_QUAL_ACQUAL entry */
%is_matching_acqual%(String actyp) =
  leg.%qual_eq_3638%(actyp);


/* check if crew has any matching qualification for lifus / lifus x
   Note that ACQ qual check is not regarding AC type in the tests; it is assumed that an instructor is
   not present if he has not the qualification for the AC
*/
%has_matching_qual%(Bool lifus_x, String type,Abstime date,Abstime limdate) =
    any(times(%max_iter_3%("ACQUAL",type,date)),
      leg.%qual_eq_3638%(%qln_3%("ACQUAL",type,date,%times_index_0%)) and
      %is_lifus_matching_qual%(lifus_x and not %is_ski%, %acqln_3%("ACQUAL",type,date,%times_index_0%),
          %qln_valid_from_3%("ACQUAL",type,date,%times_index_0%), limdate));

/*  check if crew is valid instructor for LIFUS / X LIFUS duty */
export %is_lifus_matching_instr%(Bool lifus_x,Abstime date) =
    %has_matching_qual%(lifus_x,"INSTRUCTOR",date,add_years(date,-1));

/*  producting error text, assumed there IS an error */
export %lifus_instructor_str%(Bool lifus_x, Abstime date) =
    if lifus_x and %is_lifus_matching_instr%(false, date) then
        "Instructor, with > 1 year qualification"
    else if not %is_lifus_matching_instr%(lifus_x,date) then
        "Instructor (may have apt, but not LIFUS instr)"
    else
        "Instructor, which is airport qualified";

/*
 * Airport qualification lookup
 */

/* Get max iteration for each crew and qualification type */
export %max_iter%(String key, Abstime date) =
  default(%_max_iter%(key, date), 0);

/* Get subqualifications for a date and qualification type */
export %qlns_type_at_date%(String type, Abstime date) =
  cat(times(%max_iter%(type,date)),
      %qln%(type,date,%times_index_0%), " ");

/*
 * AcType
 */
export %has_qln%(String type, String subtype, Abstime date) =
  %qln_expiry_date%(type, subtype, date) > 01jan1986 or
  %has_acq_qln%(type, subtype, "-", date);


export %has_acq_qln%(String type, String subtype, String acqual, Abstime date) =
    /* If we're called without acqual we only check crew's first qual */
    if acqual = "-" then
        any(times(%max_iter%("ACQUAL", date)),
            %qacq_validto_is_set_real_or_virtual%(type, subtype, %ac_qln_at_date_ix%(date, %times_index_0%), date))
    else
        %qacq_validto_is_set_real_or_virtual%(type, subtype, acqual, date);

%qacq_validto_is_set_real_or_virtual%(String type, String subtype, String real_acqual, Abstime date) =
    (%_qacq_validto%(type, subtype, real_acqual, date) > 01jan1986) or
    (%_qacq_validto%(type, subtype, %virtual_qual_ac_qual%(real_acqual), date) > 01jan1986);

%qln_last_expiry_date%(String type, String subtype, Abstime date) =
  default(%_qln_last_expiry_date%(type, subtype, date), 01jan1986);

%qacq_last_expiry_date%(String type, String subtype, String acqqual_type, String acqqual_subtype, Abstime date) =
  default(%_qacq_last_expiry_date%(type, subtype, acqqual_type, acqqual_subtype, date), 01jan1986);

/* Get instructor subqualifications for a date and qualification type */
export %ac_instr_qlns_at_date%(Abstime date) =
  cat(times(%max_iter_2%("INSTRUCTOR",date)),
      %qacq_acqqual_subtype%(%times_index_0%), " ");

/* The interval overlaps partly with a qualification */
export %has_qln_in_period%(String type, String subtype, Abstime ival_start, Abstime ival_end) =
  %_qln_in_period%(type, subtype, ival_start, ival_end) <> "";

  /* Crew has the qualification for the whole interval */
export %has_qln_whole_period%(String type, String subtype, Abstime ival_start, Abstime ival_end) =
  %_qln_in_whole_period%(type, subtype, ival_start, ival_end) <> "";

  /* Crew has the limited qualification for the whole interval */
export %has_limited_qln_whole_period%(String type, String subtype, Abstime ival_start, Abstime ival_end) =
  %_limited_qln_in_whole_period%(type, subtype, ival_start, ival_end) <> "";

%_qual_w_new_restr_ix%(Abstime date, Int ix) =
 let ac_qual = %ac_qln_at_date_ix%(date, ix);
 if %has_qual_restr_new_actype%(date, ac_qual)
  then  concat(ac_qual,"+N")
  else ac_qual;

export %aircraft_qlns% = %ac_qlns_at_date%(%pp_start%);
/* For sanity */
export %aircraft_qlns_pp_start% = %ac_qlns_at_date%(%pp_start%);
export %aircraft_qlns_pp_end% = %ac_qlns_at_date%(%pp_end%);

export %ac_qlns_wop_start% = %ac_qlns_at_date%(wop.%start_hb%);
export %ac_qlns_at_date%(abstime date) =
  cat(times(%ac_qln_max_iter_at_date%(date)),
    %ac_qln_at_date_ix%(date, %times_index_0%), " ");

/* Returns the date of the first new qual in pp */
export %ac_qlns_at_date_first_change%(abstime date) =
  min(times(%ac_qln_max_iter_at_date%(date)),
       %ac_qln_at_date_ix_valid_from%(date, %times_index_0%))
  where (%ac_qln_at_date_ix_new_in_pp%(date, %times_index_0%));

export %ac_qlns_at_date_first_change_JC%(abstime date) =
  min(times(%ac_qln_max_iter_at_date%(date)),
       %ac_qln_at_date_ix_valid_to%(date, %times_index_0%));

export %has_ac_qln%(abstime date, string ac_type) =
    %has_ac_qln_at_date%(date, ac_type);

export %has_ac_qln_at_date%(abstime date, string ac_type) =
    %has_qln%("ACQUAL", ac_type, date);

export %has_a2_qln%(abstime date) =
    %has_qln%("ACQUAL", "A2", date);

export %agmt_group_no_of_ac_type_restr_at_date%(Abstime date, String ac_type) =
 if model_crew.%agmt_group_has_ac_type_restr_at_date%(%id%,date,ac_type) then
    1
 else
   0;



/* Table enabling a string of crew's acquals in SAS standard way
   Cabin crew only
   Q4 included for historical logging. */
table ac_quals(Int ix) =
    ix  ->  export %_acqual_by_ix%;
    1   ->  "AL";
    2   ->  "A2";
    3   ->  "A3";
    4   ->  "A4";
    5   ->  "A5";
    6   ->  "EJ";
    7   ->  "F5";
    8   ->  "M8";
    9   ->  "Q4";
    10  ->  "36";
    11  ->  "37";
    12  ->  "38";
    13  ->  "90";
    -   ->  void_string;
end

table ac_qualpos(Int ix) =
    ix  ->  export %_acqualpos_by_ix%;
    1   ->  "A2NX";
  /*2   ->  "LR"; might become relevant if LR becomes "standalone" position, see SKCMS-2392*/ 
    -   ->  void_string;
end

export %nr_ac_quals% =
  count(times(1000)) while (not void(%_acqual_by_ix%(times_index(0))));

export %nr_qualpos% =
  count(times(1000)) while (not void(%_acqualpos_by_ix%(times_index(0))));

export %ac_qln_sep_string%(Abstime date) =
    cat(times(%nr_ac_quals%), concat(%_acqual_by_ix%(%times_index_0%), ";"))
        where(%has_ac_qln%(date, %_acqual_by_ix%(%times_index_0%)));

export %ac_qln_string%(Abstime date) =
    cat(times(%nr_ac_quals%), %_acqual_by_ix%(%times_index_0%))
        where(%has_ac_qln%(date, %_acqual_by_ix%(%times_index_0%)));

export %ac_qualpos_string%(Abstime date) =
    cat(times(%nr_qualpos%), %_acqualpos_by_ix%(%times_index_0%))
        where(%has_qln%("POSITION", %_acqualpos_by_ix%(%times_index_0%), date) and %has_a2_qln%(date));

export %lr_no_a2%(Abstime date) =
    if %has_a2_qln%(date) or not %has_qln%("POSITION", "A2NX", date) then ""
    else " LR";

export %ac_qln_A2_opt%(Abstime date) =
    cat(times(%nr_ac_quals%), %_acqual_by_ix%(%times_index_0%))
        where(%has_ac_qln%(date, %_acqual_by_ix%(%times_index_0%)) and not (%_acqual_by_ix%(%times_index_0%) = "A2" and %has_qln%("POSITION", "A2NX", date)));

export %ac_qln_pos_string%(Abstime date) = concat(%ac_qualpos_string%(date), %ac_qln_A2_opt%(date), %lr_no_a2%(date));

export %ac_qln_string_leg_start% =
  %ac_qln_string%(leg.%start_date%);

export %ac_qln_at_date_ix%(abstime date, int ix) = %qln%("ACQUAL", date, ix);
export %ac_qln_at_date_ix_valid_from%(abstime date, int ix) = %qln_valid_from%("ACQUAL", date, ix);
export %ac_qln_at_date_ix_valid_to%(abstime date, int ix) = %qln_valid_to%("ACQUAL", date, ix);
export %ac_qln_at_date_ix_new_in_pp%(abstime date, int ix) =
  %ac_qln_at_date_ix_valid_from%(date, ix) >= %pp_start%;

export %ac_qln_max_iter_at_date%(abstime date) = %max_iter%("ACQUAL", date);

/* Cache variables used in module recency */
export %ac_qln_max_iter_leg_end% = %max_iter%("ACQUAL", leg.%end_UTC%);
export %ac_qln_max_iter_leg_start% = %max_iter%("ACQUAL", leg.%start_UTC%);

export %ac_qln%(Abstime date, Int ix) = %qln%("ACQUAL", date, ix);

export %last_ac_qln_expiry_date%(String val, Abstime date) =
  %qln_last_expiry_date%("ACQUAL", val, date);
export %ac_qln_max_iter% =
  %max_iter%("ACQUAL", %pp_start%);
export %ac_qln_max_iter_trip_start% =
  %max_iter%("ACQUAL", trip.%start_hb%);
export %ac_qln_max_iter_duty_start% =
  %max_iter%("ACQUAL", duty.%start_hb%);

export set awb_ac_quals = "A3", "A4", "A5";

%virtual_qual_ac_qual%(String ac_qual) =
  if ac_qual in awb_ac_quals then "AWB" else ac_qual;

export %airport_qual_validto%(string airport, abstime date) =
 if (airport = "US") then
    %qacq_expiry_date%("ACQUAL", "AWB", "AIRPORT", airport, date)
  else
    %qacq_expiry_date%("ACQUAL", %virtual_qual_ac_qual%(crew.%ac_qln%(date, 1)), "AIRPORT", airport, date);

export %airport_qual_validfrom%(string airport, abstime date) =
  if (airport = "US") then
    %qacq_entry_date%("ACQUAL", "AWB", "AIRPORT", airport, date)
  else
    %qacq_entry_date%("ACQUAL", %virtual_qual_ac_qual%(crew.%ac_qln%(date, 1)), "AIRPORT", airport, date);

export %airport_qual_validto_max%(string airport, abstime date) =
  if (airport = "US") then
    %qacq_last_expiry_date%("ACQUAL", "AWB", "AIRPORT", airport, date)
  else
    %qacq_last_expiry_date%("ACQUAL", %virtual_qual_ac_qual%(crew.%ac_qln%(date, 1)), "AIRPORT", airport, date);

export %has_or_had_airport_qual%(string airport, abstime date) =
    %airport_qual_validto_max%(airport, date) > 01jan1986;

export %ac_qln1_duty_start% = %ac_qln%(duty.%start_hb%, 1);
export %ac_qln1% = %ac_qln%(%pp_start%, 1);
export %ac_qln2% = %ac_qln%(%pp_start%, 2);
export %ac_qln3% = %ac_qln%(%pp_start%, 3);

export %ac_qln1_validto% =
  /* In most cases ac_qln1_validto, but if ac qual changes in pp
     we need to check if ac_qln_1 is still valid in pp_end. If it is,
     the valid_to date from the qual in pp_end is used.*/
  if %has_ac_qln%(%pp_end%, %ac_qln1%) then
    %qln_expiry_date%("ACQUAL", %ac_qln1%, %pp_end%)
  else
    %ac_qln_at_date_ix_valid_to%(%pp_start%, 1);

export %ac_qln2_validto% =
  if %has_ac_qln%(%pp_end%, %ac_qln2%) then
    %qln_expiry_date%("ACQUAL", %ac_qln2%, %pp_end%)
  else
    %ac_qln_at_date_ix_valid_to%(%pp_start%, 2);

export %ac_qln3_validto% =
  if %has_ac_qln%(%pp_end%, %ac_qln3%) then
    %qln_expiry_date%("ACQUAL", %ac_qln3%, %pp_end%)
  else
    %ac_qln_at_date_ix_valid_to%(%pp_start%, 3);


/* Defined for FC SKI */
export %is_a3a4_qualified_at_date%(Abstime date) =
  if date < %pp_start% or date > %ac_qlns_change_in_pp_date%
  then %_is_a3a4_qualified_at_date%(date)
  else %is_double_qualified%;

export %_is_a3a4_qualified_at_date%(Abstime date) =
  %has_ac_qln%(date, "A3") and %has_ac_qln%(date, "A4");



export %is_double_qualified_new% = %is_double_qualified% or %is_double_qualified_skn%;
export %is_double_qualified_skn% = %is_skn_double_qualified_at_date%(%pp_start%);
export %is_double_qualified_ski_trip_start% = %_is_a3a4_qualified_at_date%(trip.%start_day%);
export %is_double_qualified% = %_is_a3a4_qualified_at_date%(%pp_start%) ;
export %is_double_qualified_trip_start% = %is_a3a4_qualified_at_date%(trip.%start_day%);

export %is_crew_double_qualified% = %is_a2a3_qualified% or %is_a3a5_qualified% or %is_a2a5_qualified% ;



export %is_skn_double_qualified_at_date%(Abstime date) =
    %has_ac_qln%(date, "37") and
    %has_ac_qln%(date, "38");

export %is_a2a3_qualified_at_date%(Abstime date) =
  if date < %pp_start% or date > %ac_qlns_change_in_pp_date%
  then %_is_a2a3_qualified_at_date%(date)
  else %is_a2a3_qualified%;
%_is_a2a3_qualified_at_date%(Abstime date) =
  %has_ac_qln%(date, "A2") and
  %has_ac_qln%(date, "A3");

export %is_a2a3_qualified% = %_is_a2a3_qualified_at_date%(%pp_start%);
export %is_a2a3_qualified_pp_start_or_end% = 
%_is_a2a3_qualified_at_date%(%pp_start%) or %_is_a2a3_qualified_at_date%(%pp_end%);

export %is_a2a5_qualified_at_date%(Abstime date) =
  if date < %pp_start% or date > %ac_qlns_change_in_pp_date%
  then %_is_a2a5_qualified_at_date%(date)
  else %is_a2a5_qualified%;
%_is_a2a5_qualified_at_date%(Abstime date) =
  %has_ac_qln%(date, "A2") and
  %has_ac_qln%(date, "A5");

export %is_a2a5_qualified% = %_is_a2a5_qualified_at_date%(%pp_start%);
export %is_a2a5_qualified_pp_start_or_end% = 
%_is_a2a5_qualified_at_date%(%pp_start%) or %_is_a2a5_qualified_at_date%(%pp_end%);

/* Workaround to prevent changes from possibly changing functionality of other things that rely
   on the previous behavior where double_qualified was assumed to always be A3A4. */
export %is_a3a5_qualified_at_date%(Abstime date) =
  if date < %pp_start% or date > %ac_qlns_change_in_pp_date%
  then %_is_a3a5_qualified_at_date%(date)
  else %is_a3a5_qualified%;

%_is_a3a5_qualified_at_date%(Abstime date) =
  %has_ac_qln%(date, "A3") and
  %has_ac_qln%(date, "A5");

export %is_a3a5_qualified% = %_is_a3a5_qualified_at_date%(%pp_start%);

export %is_a4a5_qualified_at_date%(Abstime date) =
  if date < %pp_start% or date > %ac_qlns_change_in_pp_date%
  then %_is_a4a5_qualified_at_date%(date)
  else %is_a4a5_qualified%;
%_is_a4a5_qualified_at_date%(Abstime date) =
  %has_ac_qln%(date, "A4") and
  %has_ac_qln%(date, "A5");

export %is_a4a5_qualified% = %_is_a4a5_qualified_at_date%(%pp_start%);

/* Triple qualifications only for A3/A4/A5 */
export %is_a3a4a5_qualified_at_date%(Abstime date) =
  if date < %pp_start% or date > %ac_qlns_change_in_pp_date%
  then %_is_a3a4a5_qualified_at_date%(date)
  else %is_a3a4a5_qualified%;
%_is_a3a4a5_qualified_at_date%(Abstime date) =
  %has_ac_qln%(date, "A3") and
  %has_ac_qln%(date, "A4") and
  %has_ac_qln%(date, "A5");

export %is_a3a4a5_qualified% = %_is_a3a4a5_qualified_at_date%(%pp_start%);

export %is_a2nx_qualified_at_date%(Abstime date) = %has_ac_qln%(date, "A2") and %is_a2nx_pos%(date);
export %is_a2nx_qualified% = %is_a2nx_qualified_at_date%(%pp_start%);

/* Crew has any of the multiple A2/A3/A4/A5 combinations
   If a new combination is added please add it here.
   Might be able to check that crew has >=2 Ax qualifications */
export %is_multi_qualified_at_date%(Abstime date) =
  crew.%is_a3a4_qualified_at_date%(date) or
  crew.%is_a3a5_qualified_at_date%(date) or
  crew.%is_a4a5_qualified_at_date%(date) or
  crew.%is_a3a4a5_qualified_at_date%(date) or
  crew.%is_a2a3_qualified_at_date%(date) or
  crew.%is_a2a5_qualified_at_date%(date);

export %is_multi_qualified% = %is_multi_qualified_at_date%(%pp_start%);

export %ac_qlns_change_in_pp% =
  %ac_qlns_change_in_pp_date% < %pp_end%;
 /* Counted from pp_end and backwards, due to validfrom easier to handle that validto! */
export %ac_qlns_change_1_in_pp% =
  %last_ac_qlns_change_in_pp_date% < %pp_end%;
export %ac_qlns_change_2_in_pp% =
  %next_ac_qlns_change_in_pp_date% < %pp_end% and
  %next_ac_qlns_change_in_pp_date% < %last_ac_qlns_change_in_pp_date%;
export %ac_qlns_change_3_in_pp% =
  %next_next_ac_qlns_change_in_pp_date% < %pp_end% and
  %next_next_ac_qlns_change_in_pp_date% < %next_ac_qlns_change_in_pp_date%;

export %ac_qlns_change_in_pp_date% =
  default(%ac_qlns_at_date_first_change%(%pp_end%), %pp_end%);

export %last_ac_qlns_change_in_pp_date% =
       default(%prev_ac_qual_change_date%(%pp_end%), %pp_end%);

export %prev_ac_qual_change_date%(Abstime date) =
  max(times(%ac_qln_max_iter_at_date%(date-00:01)),
      %ac_qln_at_date_ix_valid_from%(date-00:01, %times_index_0%));

export %next_ac_qlns_change_in_pp_date% =
  default(%prev_ac_qual_change_date%(%last_ac_qlns_change_in_pp_date%), %pp_end%);

export %next_next_ac_qlns_change_in_pp_date% =
  default(%prev_ac_qual_change_date%(%next_ac_qlns_change_in_pp_date%), %pp_end%);

export %ac_family_by_qual% =
  leg.%_ac_family%(leg.%ac_type_by_qual%(%ac_qln1%));

/*
 * Long haul / Short haul
 */
export set long_haul_qlns_set = "AL", "A3", "A4", "A5";
export %is_long_haul%(Abstime date) =
  any(times(%max_iter%("ACQUAL", date)), crew.%qln%("ACQUAL", date, %times_index_0%)
      in long_haul_qlns_set) or
  %is_a2nx_qualified_at_date%(date);

export %is_short_haul%(Abstime date) =
  any(times(%max_iter%("ACQUAL", date)), crew.%qln%("ACQUAL", date, %times_index_0%)
      not in long_haul_qlns_set);

%is_short_long_combined%(Abstime date) =
  %is_long_haul%(date) and
  %is_short_haul%(date);

set fdrc_qlns_set = "F5", "Q4", "CJ";
export %is_fdrc%(Abstime date) =
  any(times(%max_iter%("ACQUAL", date)), crew.%qln%("ACQUAL", date, %times_index_0%)
      in fdrc_qlns_set);

export %is_ff%(Abstime date) =
  any(times(%max_iter%("ACQUAL", date)), crew.%qln%("ACQUAL", date, %times_index_0%) = "FF");

export %is_short_long_combined_pp_start% = %is_short_long_combined%(%pp_start%);
export %is_short_long_combined_trip_start% = %is_short_long_combined%(trip.%start_hb%);

export %last_short_haul_qln_start% =
  nmax(%qln_entry_date%("ACQUAL", crew.%ac_qln1%, trip.%start_UTC%),
       %qln_entry_date%("ACQUAL", crew.%ac_qln2%, trip.%start_UTC%),
       %qln_entry_date%("ACQUAL", crew.%ac_qln3%, trip.%start_UTC%));

export %last_long_haul_qln_start% =
  nmax(%qln_entry_date%("ACQUAL", "A3", trip.%start_UTC%),
       %qln_entry_date%("ACQUAL", "A4", trip.%start_UTC%),
       %qln_entry_date%("ACQUAL", "A5", trip.%start_UTC%),
       %qln_entry_date%("ACQUAL", "AL", trip.%start_UTC%));

/* Will only work correct for single qual crew.
   Should only be used for SH FD */
export %qln_entry_date_trip% =
  let qual = %ac_qln%(trip.%start_hb%, 1);
  if qual = "36" or qual = "38" then
    nmax(%qln_entry_date%("ACQUAL", "36", trip.%start_hb%),
         %qln_entry_date%("ACQUAL", "38", trip.%start_hb%))
  else
    %qln_entry_date%("ACQUAL", qual, trip.%start_hb%);
export %qln_entry_date_leg% =
  if leg.%qual% = "36" or leg.%qual% = "38" then
    nmax(%qln_entry_date%("ACQUAL", "36", leg.%start_hb%),
         %qln_entry_date%("ACQUAL", "38", leg.%start_hb%))
  else
    %qln_entry_date%("ACQUAL", leg.%qual%, leg.%start_hb%);

/* Cache variables */
export %is_ff_pp_start% = %is_ff%(%pp_start%);
export %is_short_haul_pp_start% = %is_short_haul%(%pp_start%);
export %is_long_haul_pp_start% = %is_long_haul%(%pp_start%);
export %is_long_haul_pp_end% = %is_long_haul%(%pp_end%);
export %is_long_haul_wop_start% = %is_long_haul%(wop.%start_hb%);
export %is_short_haul_wop_start% = %is_short_haul%(wop.%start_hb%);
export %is_fdrc_wop_start% = %is_fdrc%(wop.%start_hb%);
export %is_fdrc_pp_start% = %is_fdrc%(%pp_start%);
export %is_short_haul_trip_start% = %is_short_haul%(trip.%start_hb%);
export %is_long_haul_trip_start% = %is_long_haul%(trip.%start_hb%);
export %is_short_haul_leg_start% = %is_short_haul%(leg.%start_hb%);
export %is_long_haul_leg_start% = %is_long_haul%(leg.%start_hb%);
/*
 * Line check
 */
/* [acosta:07/170@14:57] Don't touch these without consulting me! They are used
 * in several reports and interfaces.
 */
export %is_line_check%(AbsTime date) =
    %is_line_check_pilot%(date);
export %is_line_check_pilot%(AbsTime date) =
    %has_qln%("POSITION", "LCP", date);
export %is_base_chief_pilot%(AbsTime date) =
    %has_qln%("POSITION", "BCP", date);
export %is_chief_pilot%(AbsTime date) =
    %has_qln%("POSITION", "CP", date);
export %is_A2NX_pos%(AbsTime date) =
    %has_qln%("POSITION", "A2NX", date);
export %is_lcp_trip_start% =
    %is_line_check_pilot%(trip.%start_hb%);

/* Performance managment mentor qualification */
export %is_pm_mentor%(AbsTime date) =
    %has_qln%("POSITION", "PMM", date);

/* should crew attend PM meetings?  */
export %is_pm_allowed% =
    %cabin_crew% and (%is_SKS% or %is_SKD% or %is_SKN%);
/*
 * "INSTRUCTOR" qualifications
 */
/* OPT and CRM Instructors are only used for information and should not
 * be included in legality and selects treating instructors. HenrikA 04oct2007
 *
 * 2014-09-16 Lars W: don't think the code delivers. The intention was probably to give 'true' for any instructor
 *              code except OPT/CRM. But the code gives false whenever a there is OPT/CRM valid, except if a LIFUS
 *              qualification is present. Today the code is less used as is_lifus_matching_instr was created.
 */
export %is_instructor%(Abstime date) =
  ((%max_iter%("INSTRUCTOR", date) > 0 or
    %max_iter_2%("INSTRUCTOR", date) > 0) and
   not %is_opt_instr%(date) and
   not %is_crm_any_qual%(date)) or
  %is_lifus_instr%(date) or
  %is_etops_lifus_lc_instr%(date);

set instructor_exceptions = "CRM", "OPT";
export %is_instructor_in_pp% =
  any(times(%number_of_qualifications%) where (%qln_type%(%times_index_0%) = "INSTRUCTOR"),
    not (%qln_subtype%(%times_index_0%) in instructor_exceptions))
  or
  any(times(%qacq_rows%) where (%qacq_acqqual_type%(%times_index_0%) = "INSTRUCTOR"),
    not (%qacq_acqual_subtype%(%times_index_0%) in instructor_exceptions));

export %has_qacq_in_pp%(String type, String subtype) =
    any(times(%qacq_rows%), %qacq_acqqual_subtype%(%times_index_0%) = subtype)
    where (%qacq_acqqual_type%(%times_index_0%) = type);


/* Flight crew */
export %is_sim_instr%(Abstime date) =
  %is_tri_tre_sfi_sfe_any_qual%(date) or
  %is_sup_any_qual%(date) or
  %is_ol_any_qual%(date);
export %is_sim_instr_trip_start% = %is_sim_instr%(trip.%start_hb%);
export %is_opt_instr%(Abstime date) = %has_qln%("INSTRUCTOR", "OPT", date);
export %is_lifus_instr%(Abstime date) =
  %has_qln%("INSTRUCTOR", "LIFUS", date);
%is_lifus_instr_since_one_year_back%(AbsTime date) =
    %is_lifus_instr%(date - 365*24:00);

export %is_etops_lifus_lc_instr%(AbsTime date)=
 /*%is_lifus_instr%(date) or %is_lcp_instr%(date) and %is_a2nx_qualified_at_date%(date);*/
 (%is_subcat_q%(date) and %is_a2nx_qualified_at_date%(date)) or
 (%is_subcat_s%(date) and %is_a2nx_qualified_at_date%(date));

export %is_etops_lifus_lc_instr_str% = "FCQ or FCI";

export %is_fam_flt_instr%(Abstime date) =
  %is_subcat_q%(date) or
  %is_subcat_i%(date) or 
  %is_subcat_s%(date);
export %is_fam_flt_instr_str% = "FCQ, FCS or FCI";

/*
export %is_etops_lifus_lc_matching_instr%(AbsTime date) =
  %is_lifus_matching_instr%(true, date)
  or crew.%has_qln_lcp%(date) and %is_a2nx_qualified_at_date%(date);
*/

export %is_lr_refresh_instr%(Abstime date) =
  let code = leg.%qual%;

  %is_tre_instr%(code, date) or
  %is_tri_instr%(code, date) or
  %is_sfe_instr%(code, date) or
  %is_sfi_instr%(code, date) or
  (%is_lifus_instr%(date) and (%rank_at_date%(date) = "FC"));
export %is_lr_refresh_instr_str% = "Min. SFI or FC with LIFUS";

export %is_tri_instr%(String ac_qual, Abstime date) =
  %has_acq_qln%("INSTRUCTOR", "TRI", ac_qual, date);
export %is_tri_any_qual%(Abstime date) =
    %has_qln%("INSTRUCTOR", "TRI", date);
export %is_tre_instr%(String ac_qual, Abstime date) =
  %has_acq_qln%("INSTRUCTOR", "TRE", ac_qual, date);
export %is_tre_any_qual%(Abstime date) =
    %has_qln%("INSTRUCTOR", "TRE", date);
export %is_sup_instr%(String ac_qual, Abstime date) =
  %has_acq_qln%("INSTRUCTOR", "SUP", ac_qual, date);
export %is_ol_instr_ac_qual%(String ac_qual, Abstime date) =
  %has_acq_qln%("INSTRUCTOR", "OL", ac_qual, date);

export set airbus = "A2", "A3", "A4", "A5";
export set b737 = "36", "37", "38";  /* note: 36 no longer in use */

export %has_airbus_qual_at_date%(Abstime d) =
  model_crew.%has_ac_qual_at_date%(%id%,"A2", d) or
  model_crew.%has_ac_qual_at_date%(%id%,"A3", d) or
  model_crew.%has_ac_qual_at_date%(%id%,"A4", d) or
  model_crew.%has_ac_qual_at_date%(%id%,"A5", d);

export %has_boeing_qual_at_date%(Abstime d) =
  model_crew.%has_ac_qual_at_date%(%id%,"37", d) or
  model_crew.%has_ac_qual_at_date%(%id%,"38", d);

export %is_sup_instr_qualgroup%(String ac_qual, Abstime date) =
  %is_sup_instr%(ac_qual, date)
  or
  ac_qual in airbus and
  (%is_sup_instr%("A2", date) or %is_sup_instr%("A3", date) 
    or %is_sup_instr%("A4", date) or %is_sup_instr%("A5", date))
  or
  ac_qual in b737 and
  (%is_sup_instr%("36", date) or %is_sup_instr%("37", date) or %is_sup_instr%("38", date));
export %is_sup_any_qual%(Abstime date) =
    %has_qln%("INSTRUCTOR", "SUP", date);
export %is_ol_any_qual%(Abstime date) =
    %has_qln%("INSTRUCTOR", "OL", date);
export %is_sfi_instr%(String ac_qual, Abstime date) =
  %has_acq_qln%("INSTRUCTOR", "SFI", ac_qual, date);
export %is_sfi_any_qual%(Abstime date) =
    %has_qln%("INSTRUCTOR", "SFI", date);
export %is_sfe_instr%(String ac_qual, Abstime date) =
  %has_acq_qln%("INSTRUCTOR", "SFE", ac_qual, date);
export %is_sfe_any_qual%(Abstime date) =
    %has_qln%("INSTRUCTOR", "SFE", date);
export %is_crm_instr%(String ac_qual, Abstime date) =
  %has_acq_qln%("INSTRUCTOR", "CRM", ac_qual, date);
export %is_crm_any_qual%(Abstime date) =
    %has_qln%("INSTRUCTOR", "CRM", date);
export %is_tri_tre_sfi_sfe_sup%(String ac_qual, Abstime date) =
    %is_tri_instr%(ac_qual, date) or %is_tre_instr%(ac_qual, date) or
    %is_sfe_instr%(ac_qual, date) or %is_sfi_instr%(ac_qual, date) or
    %is_sup_instr%(ac_qual, date) or %is_ol_instr_ac_qual%(ac_qual, date);
export %is_tri_tre_sfi_sfe_any_qual%(Abstime date) =
    %is_tri_any_qual%(date) or %is_tre_any_qual%(date) or
    %is_sfi_any_qual%(date) or %is_sfe_any_qual%(date);

table crew_has_qual_at_date(String required_instructor, AbsTime trip_start) =
    required_instructor -> export Bool %has_instructor_qualification_at_date_hb%;
    "ZFTT LIFUS" -> %is_tri_any_qual%(trip_start) and %no_medical_restriction%(trip_start);
    "LIFUS" -> %is_lifus_matching_instr%(False, trip_start);
    "X LIFUS" -> (%is_lifus_matching_instr%(True, trip_start)) or ((%is_tri_any_qual%(trip_start) or %is_tre_any_qual%(trip_start) or %is_sfe_any_qual%(trip_start)) and %is_lifus_matching_instr%(False, trip_start));
    "ILC" -> %is_lcp_instr%(trip_start); 
    "LC" -> %is_lcp_instr%(trip_start);
    
end

%is_lcp_instr%(AbsTime trip_start) =
    %has_qln_lcp%(trip_start);

%no_medical_restriction%(AbsTime trip_start) =
    not %has_restr_medical%(trip_start);

/* Cabin crew */
export %is_linst_instr%(Abstime date) = %has_qln%("INSTRUCTOR", "LINST", date);
export %is_linst_ac_qual_instr%(String ac_qual, Abstime date) =
  %has_acq_qln%("INSTRUCTOR", "LINST", ac_qual, date);
export %is_as_instr%(Abstime date) = %has_qln%("INSTRUCTOR", "AS", date);
export %is_rec_instr%(Abstime date) = %has_qln%("INSTRUCTOR", "REC", date);
export %is_oaa_instr%(Abstime date) = %has_qln%("INSTRUCTOR", "OAA", date);
export %is_ol_instr%(Abstime date) = %has_qln%("INSTRUCTOR", "OL", date); /* SASCMS-4588 */
export %is_lcs%(Abstime date) = %has_qln%("POSITION", "LCS", date);

export %is_scc%(Abstime date) =
if %has_agmt_group_svs_cc_at_date%(date) then
  %rank_at_date%(date) <> "AP" and
  %has_qln%("POSITION", "SCC", date)
else
  %rank_at_date%(date) = "AP" or
  %has_qln%("POSITION", "SCC", date) or
  %has_qln%("INSTRUCTOR", "LINST", date);

export %is_ahp%(Abstime date) =
  %has_qln%("POSITION", "AHP", date);

export %is_cc_instr%(Abstime date) =
  %has_qln%("INSTRUCTOR", "INSTR", date);

export %is_scc_qualified_at_date%(abstime date) =
  %is_scc%(date);

export %is_scc_in_pp% =
  %ce_has_rank_in_pp%("AP") or
  %has_qln_in_pp%("POSITION", "SCC") or
  %has_qacq_in_pp%("INSTRUCTOR", "LINST");

/* Cache variables */
export %is_instructor_trip_start% = %is_instructor%(trip.%start_hb%);
export %is_instructor_leg_start% = %is_instructor%(leg.%start_hb%);
/* Flight crew */
export %is_opt_instr_trip_start% = %is_opt_instr%(leg.%start_hb%);
export %is_crm_instr_trip_start% = %is_crm_instr%(leg.%qual%, leg.%start_hb%);

export %is_opt_instr_leg_start% = %is_opt_instr%(leg.%start_hb%);
export %is_lifus_instr_leg_start% = %is_lifus_instr%(leg.%start_hb%);
export %is_tri_instr_leg_start% = %is_tri_instr%(leg.%qual%, leg.%start_hb%);
export %is_tre_instr_leg_start% = %is_tre_instr%(leg.%qual%, leg.%start_hb%);
export %is_sfi_instr_leg_start% = %is_sfi_instr%(leg.%qual%, leg.%start_hb%);
export %is_sfe_instr_leg_start% = %is_sfe_instr%(leg.%qual%, leg.%start_hb%);
export %is_crm_instr_leg_start% = %is_crm_instr%(leg.%qual%, leg.%start_hb%);
/* Cabin crew */
export %is_linst_instr_leg_start% = %is_linst_instr%(leg.%start_hb%);
export %is_as_instr_leg_start% = %is_as_instr%(leg.%start_hb%);
export %is_scc_leg_start% = %is_scc%(leg.%start_hb%);
export %is_scc_trip_start% = %is_scc%(trip.%start_hb%);
export %is_scc_pp_start% = %is_scc%(%pp_start%);
export %is_ahp_trip_start% = %is_ahp%(trip.%start_hb%);


/*
 * "LCP" qualifications
 */
/* LCP is an own main type, i.e. %has_qln%("LCP", "LCP", date).
 * Hence, it is enough to check the main type "LCP" */
export %has_qln_lcp%(Abstime date) =
    /* Note: LCP should be move to POSITION maintype. It is not correct to count
    everything with maintype LCP as lcp. /EKG 080904 */
    %max_iter%("LCP", date) > 0 or
    %has_qln%("POSITION", "LCP", date);

/* Cache variables */
export %has_qln_lcp_pp_start% = %has_qln_lcp%(%pp_start%);
export %has_qln_lcp_trip_start% = %has_qln_lcp%(trip.%start_hb%);
export %has_qln_lcp_leg_start% = %has_qln_lcp%(leg.%start_hb%);

/*
 * "POSITION" qualifications
 */
export %has_position_chief_pilot%(Abstime date) = %has_qln%("POSITION", "CP", date);
export %has_position_test%(Abstime date) = %has_qln%("POSITION", "TEST", date);

/* Cache variables */
export %has_position_chief_pilot_trip_start% = %has_position_chief_pilot%(trip.%start_hb%);
export %has_position_chief_pilot_leg_start% = %has_position_chief_pilot%(leg.%start_hb%);
export %has_position_test_leg_start% = %has_position_test%(leg.%start_hb%);

%position_max_iter%(Abstime date) =
  %max_iter%("POSITION", date);

export %qln_position%(Abstime date) =
  if %position_max_iter%(date) > 0 then
    %qln%("POSITION", date, 1)
  else
    void_string;

export %qln_position_pp_start% = %qln_position%(%pp_start%);

/*******************************************************************
**
** Section 6: Contract
**
********************************************************************/
/*
 * Table look-up used for selections in Studio.  These definitions makes it
 * possible to find crew that has e.g. variable group within an interval (e.g.
 * planning period)
 */
table cco_table(int match) =
  %id%, match ->
    export string %cco_contract_m%,
    export abstime %cco_validfrom_m%,
    export abstime %cco_validto_m%,
    export int %cco_cyclestart_m%,
    export string %cco_si_m%,
    export string %cco_endreason_m%;
  external %crew_contract_table%;
  "crew", "match_number"
  ->
  "contract", "validfrom", "validto", "cyclestart", "si", "endreason";
  -, - -> void_string, void_abstime, void_abstime, void_int,
    void_string, void_string;
end

table ccs_table(string contract) =
  contract ->
    export int %ccs_dutypercent%,
    export string %ccs_grouptype%,
    export int %ccs_pattern%,
    export string %ccs_parttimecode%,
    export string %ccs_descshort%,
    export string %ccs_desclong%;
  external %crew_contract_set_table%;
  id
  ->
  "dutypercent", "grouptype", "pattern", "parttimecode",
    "descshort", "desclong";
  - -> void_int, void_string, void_int, void_string,
    void_string, void_string;
end

export %is_active_at_date%(Abstime date) = not %is_retired_at_date%(date);
%is_retired_at_date%(Abstime date) = default(%group_at_date%(date) = "R", false);

export %is_retiring_in_interval%(AbsTime date, RelTime interval) =
    any(times(%n_cco%), not void(%cco_validfrom_m%(%times_index_0%)))
              where (%ccs_grouptype%(%cco_contract_m%(%times_index_0%))  = "R" and
                   %cco_validfrom_m%(%times_index_0%) >= date and
                   %cco_validfrom_m%(%times_index_0%) <= date + interval);
%retirement_date_at_date_next%(Abstime date) =
    min(times(%n_cco%), %cco_validfrom_m%(%times_index_0%))
              where (%ccs_grouptype%(%cco_contract_m%(%times_index_0%))  = "R" and
                   %cco_validfrom_m%(%times_index_0%) > date) - 24:0;
%retirement_date_at_date_prev%(Abstime date) =
    max(times(%n_cco%), %cco_validfrom_m%(%times_index_0%))
              where (%ccs_grouptype%(%cco_contract_m%(%times_index_0%))  = "R" and
                   %cco_validfrom_m%(%times_index_0%) <= date) - 24:00;
%retirement_date_at_date_prev_prev%(Abstime date) =
    max(times(%n_cco%), %cco_validfrom_m%(%times_index_0%))
              where (%ccs_grouptype%(%cco_contract_m%(%times_index_0%))  = "R" and
                   %cco_validfrom_m%(%times_index_0%) <= date and
                   %cco_validfrom_m%(%times_index_0%) < %retirement_date_at_date_prev%(date)) - 24:00;
%retirement_date_at_date%(Abstime date) =
    if %is_active_at_date%(date) then
      %retirement_date_at_date_next%(date)
    else
      %retirement_date_at_date_prev%(date);

export %is_starting_in_interval%(AbsTime date, RelTime interval) =
    let int_end = date + interval,
        ref_date = date - 00:01;
    any(times(%n_cco%), not void(%cco_validto_m%(%times_index_0%)))
              where (%ccs_grouptype%(%cco_contract_m%(%times_index_0%))  = "R" and
                   %cco_validto_m%(%times_index_0%) >= date and
                   %cco_validto_m%(%times_index_0%) <= int_end) and
                   not void(%employment_date_at_date_next%(ref_date));
%employment_date_at_date_next%(Abstime date) =
    min(times(%n_cco%), %cco_validfrom_m%(%times_index_0%))
            where (%ccs_grouptype%(%cco_contract_m%(%times_index_0%)) <> "R" and
                   %cco_validfrom_m%(%times_index_0%) > date);
%employment_date_at_date_prev%(Abstime date) =
    min(times(%n_cco%), %cco_validfrom_m%(%times_index_0%))
            where (%ccs_grouptype%(%cco_contract_m%(%times_index_0%)) <> "R" and
                   %cco_validfrom_m%(%times_index_0%) <= date and
                   %cco_validfrom_m%(%times_index_0%) >
                      default(if %is_active_at_date%(date) then
                                 %retirement_date_at_date_prev%(date)
                              else
                                 %retirement_date_at_date_prev_prev%(date), 1Jan1901));
export %employment_date_at_date%(Abstime date) =
    if %is_active_at_date%(date) then
      %employment_date_at_date_prev%(date)
    else
      if not void(%employment_date_at_date_next%(date)) then
         %employment_date_at_date_next%(date)
      else %employment_date_at_date_prev%(date);

export %cco_dutypercent_m%(int match) =
  %ccs_dutypercent%(%cco_contract_m%(match));
export %cco_grouptype_m%(int match) =
  %ccs_grouptype%(%cco_contract_m%(match));
export %cco_desclong_m%(int match) =
  %ccs_desclong%(%cco_contract_m%(match));
export %cco_descshort_m%(int match) =
  %ccs_descshort%(%cco_contract_m%(match));

%n_cco% =
  count(times(1000) while (not void(%cco_validfrom_m%(%times_index_0%))));

%cco_valid_at_date_m%(int m, abstime t) =
  %cco_validfrom_m%(m) >= t and %cco_validto_m%(m) < t;

%cco_valid_interval_m%(int m, abstime s, abstime e) =
  overlap(s, e, %cco_validfrom_m%(m), %cco_validto_m%(m)) > 0:00;

%cco_any_cco_change_in_period%(abstime s, abstime e) =
  /* starts or ends in period */
  %cco_first_validfrom_in_period%(s - 0:01, e) >= s
  or %cco_last_validto_in_period%(s, e) < e
  or %cco_gaps_in_period%(s, e);

export %cco_any_cco_change_in_pp% =
  %cco_any_cco_change_in_period%(%pp_start%, %pp_end%);

%cco_first_validfrom_in_period%(abstime s, abstime e) =
  min(times(%n_cco%) where (%cco_valid_interval_m%(%times_index_0%, s, e)),
    %cco_validfrom_m%(%times_index_0%));

%cco_last_validto_in_period%(abstime s, abstime e) =
  max(times(%n_cco%) where (%cco_valid_interval_m%(%times_index_0%, s, e)),
    %cco_validto_m%(%times_index_0%));

%cco_gaps_in_period%(abstime s, abstime e) =
  any(times(%n_cco% - 1) where (%cco_valid_interval_m%(%times_index_0%, s, e)
        and %cco_valid_interval_m%(%times_index_0% + 1, s, e)),
    %cco_validto_m%(%times_index_0%) < %cco_validfrom_m%(%times_index_0%));

export %cco_is_fulltime_in_period%(abstime s, abstime e) =
  any(times(%n_cco%) where (%cco_valid_interval_m%(%times_index_0%, s, e)),
    %cco_dutypercent_m%(%times_index_0%) = 100);
export %cco_is_fulltime_in_pp% =
  %cco_is_fulltime_in_period%(%pp_start%, %pp_end%);

export %cco_is_parttime_in_period%(abstime s, abstime e) =
  any(times(%n_cco%) where (%cco_valid_interval_m%(%times_index_0%, s, e)),
    %cco_dutypercent_m%(%times_index_0%) <> 100);
export %cco_is_parttime_in_pp% =
  %cco_is_parttime_in_period%(%pp_start%, %pp_end%);

export %cco_in_variable_group_in_period%(abstime s, abstime e) =
  any(times(%n_cco%) where (%cco_valid_interval_m%(%times_index_0%, s, e)),
    %cco_grouptype_m%(%times_index_0%) = "V");
export %cco_in_variable_group_in_pp% =
  %cco_in_variable_group_in_period%(%pp_start%, %pp_end%);

export %cco_in_fixed_group_in_period%(abstime s, abstime e) =
  any(times(%n_cco%) where (%cco_valid_interval_m%(%times_index_0%, s, e)),
    %cco_grouptype_m%(%times_index_0%) = "F");
export %cco_in_fixed_group_in_pp% =
  %cco_in_fixed_group_in_period%(%pp_start%, %pp_end%);

export %cco_in_any_fixed_group_in_period%(abstime s, abstime e) =
  any(times(%n_cco%) where (%cco_valid_interval_m%(%times_index_0%, s, e)),
    model_crew.%in_fixed_group_strings%(%cco_grouptype_m%(%times_index_0%)));
export %cco_in_any_fixed_group_in_pp% =
  %cco_in_any_fixed_group_in_period%(%pp_start%, %pp_end%);

export %cco_in_5_4_flex_group_in_period%(abstime s, abstime e) =
  any(times(%n_cco%) where (%cco_valid_interval_m%(%times_index_0%, s, e)),
    %cco_grouptype_m%(%times_index_0%) = "X" or
    locate("Flex", %cco_desclong_m%(%times_index_0%)) > 0);
export %cco_in_5_4_flex_group_in_pp% =
  %cco_in_5_4_flex_group_in_period%(%pp_start%, %pp_end%);

export %cco_in_fv_group_in_period%(abstime s, abstime e) =
  any(times(%n_cco%) where (%cco_valid_interval_m%(%times_index_0%, s, e)),
    %cco_grouptype_m%(%times_index_0%) = "FV" or
    locate("FVG", %cco_desclong_m%(%times_index_0%)) > 0);
export %cco_in_fv_group_in_pp% =
  %cco_in_fv_group_in_period%(%pp_start%, %pp_end%);

export %cco_is_tempcrew_in_period%(abstime s, abstime e) =
  any(times(%n_cco%) where (%cco_valid_interval_m%(%times_index_0%, s, e)),
    locate("Temp", %cco_desclong_m%(%times_index_0%)) > 0);
export %cco_is_tempcrew_in_pp% =
  %cco_is_tempcrew_in_period%(%pp_start%, %pp_end%);

export %cco_contract_change_in_period%(abstime s, abstime e) =
  any(times(%n_cco% - 1) where (%cco_valid_interval_m%(%times_index_0%, s - 0:01, e)
        and %cco_valid_interval_m%(%times_index_0% + 1, s - 0:01, e)),
    %cco_contract_m%(%times_index_0%) <> %cco_contract_m%(%times_index_0% + 1));

export %cco_is_passive_plus_in_period%(abstime s, abstime e) =
  any(times(%n_cco%) where (%cco_valid_interval_m%(%times_index_0%, s, e)),
    locate("P+", %cco_descshort_m%(%times_index_0%)) > 0);
export %cco_is_passive_plus_in_pp% =
  %cco_is_passive_plus_in_period%(%pp_start%, %pp_end%);


/* select.etab */
export %cco_any_contract_change_in_period%(abstime s, abstime e) =
  %cco_any_cco_change_in_period%(s, e)
  or
  %cco_contract_change_in_period%(s, e);

/* SASCMS-2621. need to lookup with id as parameter
 * in AssignActivities.py
*/
table crew_agreement_table1(String id, Abstime lookuptime) =
  id, lookuptime -> export String %agreement_at_date_name%;
  external %crew_contract_table%;
  crew, (validfrom, validto( -> contract;
  - , -  -> "N/A";
end

/* K12 FC SH Passive + */
export %is_passive_plus%(Abstime date) = crew_contract.%is_passive_plus%(date);

%is_passive_plus_at_pp_start% = %is_passive_plus%(%pp_start%);

/* This table lookups data for the original contract for crew that have a
*  summer contract */
table crew_original_contract_table(Abstime lookuptime) =
  %remove_s_suffix%(%agreement_at_date%(lookuptime)) ->
    export Int %crew_original_contract_part_time_factor%,
    export Int %original_pattern%;
   external %crew_contract_set_table%;
   id -> dutypercent, pattern;
   -  -> 100, void_int;
end


/*Removes S suffix from summer contract code to find the code
* for the original contract*/
%remove_s_suffix%(String contract_code) =
  let pos_s = locate("/S", contract_code);
  if %cabin_crew% and %is_skd% and (pos_s > 0) then
    substr(contract_code, 1, pos_s - 1)
  else
    contract_code;


/* SASCMS-2621. need to lookup with id as parameter
 * in AssignActivities.py
*/
table crew_agreement_set_table1(String id, Abstime lookuptime) =
  %agreement_at_date_name%(id, lookuptime) -> export String %grouptype_at_date%;
  external %crew_contract_set_table%;
  id -> grouptype;
  -  -> void_string;
end

table pattern_set(Int pattern) =
  pattern ->
    Abstime %_pattern_fixed_cycle_start%,
    export Int %pattern_no_of_days%,
    Int %pattern_no_of_prod_days%,
    String %pattern_descr%;
  external %pattern_set_table%;
  id -> fixcyclestart, noofdays, noofproddays, descshort;
  - -> void_abstime, void_int, void_int, void_string;
end

table pattern_acts(Int pattern, Int ix) =
  pattern, ix ->
    String %_pattern_daytype%,
    String %_pattern_activity%,
    export Int %pattern_act_start%,
    export Int %pattern_act_end%;
  external %pattern_acts_table%;
  pattern, (startpos, endpos) -> daytype, "activity", startpos, endpos;
  -, - -> void_string, void_string, void_int, void_int;
end

table pattern_length(Int pattern) =
  pattern ->
    Int %pattern_length%;
  external %pattern_acts_table%;
  pattern -> max(endpos);
  /*- -> void_int;*/
end

/*
** Arbeids-/fritidsordning knyttet til 5-3
** Not really a 'special contract' but differs
** from ordinary freeday requirement on monthly
** freeday requirements.
*/
export %is_afo_SKN%(Abstime date) =
  crew.%is_cabin% and
  crew.%is_SKN% and
  %contract_desc_short%(date) in afo_skn_set;

set afo_skn_set = "100% V", "100%FVG FV", "80% V", "80%FVG FV", "60% V";

export %is_fulltime_temp_SKN% =
    %is_fulltime_temp_SKN_at_date%(%available_start%);

export %is_fulltime_temp_SKN_at_date%(Abstime date) =
    crew.%is_cabin%
    and crew.%is_SKN%
    and crew.%contract_desc_long%(date) = "Temp"
    and crew.%crew_contract_part_time_factor_at_date%(date) = 100;

/* General group lookups */
export %group% = %group_at_date%(%available_start%);
export %group_at_pp_start% = %group_at_date%(%pp_start%);
export %group_at_pp_end% = %group_at_date%(%pp_end%);

export %next_group_at_date%(Abstime date) =
  default(
          %group_at_date%(%agreement_at_date_valid_to%(date)),
          "");
export %next_group_at_pp_start% = %next_group_at_date%(%pp_start%);

export %next_next_group_at_date%(Abstime date) =
  default(
          %group_at_date%(%next_agreement_at_date_valid_to%(date)),
          "");
export %next_next_group_at_pp_start% = %next_next_group_at_date%(%pp_start%);

export %next_next_next_group_at_date%(Abstime date) =
  default(
          %group_at_date%(%next_next_agreement_at_date_valid_to%(date)),
          "");
export %next_next_next_group_at_pp_start% = %next_next_next_group_at_date%(%pp_start%);

/* The lookup is made non-inclusive for the end limit.
   Three changes in period is supported. */
export %has_group_in_period%(String grp, Abstime start, Abstime stop) =
  %group_at_date%(start) = grp or
  %group_at_date%(stop - 0:01) = grp or
  (%agreement_at_date_valid_to%(start) < stop and
    (%next_group_at_date%(start) = grp or
     %next_agreement_at_date_valid_to%(start) < stop and
     %next_next_group_at_date%(start) = grp));

/* Two changes in pp are supported */
%group_constant_in_pp% =
  /* The agreement doesn't change in pp */
  (%agreement_pp_start_valid_to% >= %pp_end%)
  or
  /* The agreement changes one time in pp and the group for the
     next agreement is the same */
  (%next_agreement_pp_start_valid_to% >= %pp_end% and
   %group_at_pp_start% = %next_group_at_pp_start%)
  or
  /* The agreement changes two times in pp and the group for the
     next two agreements is the same */
  (%next_next_agreement_pp_start_valid_to% >= %pp_end% and
    (%group_at_pp_start% = %next_group_at_pp_start% and
     %group_at_pp_start% = %next_next_group_at_pp_start%))
  or
  /* The agreement changes more than two times in pp. We only check if
     the next three groups are the same */
  (%group_at_pp_start% = %next_group_at_pp_start% and
   %group_at_pp_start% = %next_next_group_at_pp_start% and
   %group_at_pp_start% = %next_next_next_group_at_pp_start%);

export %group_change_in_pp% =
  not %group_constant_in_pp%;

export %first_group_change_date%(Abstime date) =
  default(%_first_group_change_date%(date),31dec2035);

%_first_group_change_date%(Abstime date) =
  let startgroup = %group_at_date%(date);
  if startgroup <> %next_group_at_date%(date) then
    %agreement_at_date_valid_to%(date)
  else if startgroup <> %next_next_group_at_date%(date) then
    %next_agreement_at_date_valid_to%(date)
  else if startgroup <> %next_next_next_group_at_date%(date) then
    %next_next_agreement_at_date_valid_to%(date)
  else
    31dec2035;

export %second_group_change_date%(Abstime date) =
  /* We need this first check so that we dont get a group change
     long before the date */
  if %first_group_change_date%(date) = 1jan1986 then
    1jan1986
  else
    %first_group_change_date%(%first_group_change_date%(date));

/* Cache variables */
export %first_group_change_date_pp_start% =
  %first_group_change_date%(%pp_start%);

export %second_group_change_date_pp_start% =
  %second_group_change_date%(%pp_start%);

/*
 * Group definitions
 *
 * "Variable" is default.
 *    ("V")
 * "Fixed" consists of:
 *   - regular fixed ("F")
 *   - fixed variable ("FV")
 *   - 5/4 Flex ("X")
 * "Retired" ("R")
 */
export %in_fixed_group_ppstart% = %in_fixed_group%(%pp_start%);
export %in_fixed_group%(Abstime date) = %in_fixed_group_at_date%(date);
export %in_fixed_group_at_date%(Abstime date) =
  model_crew.%agreement_selected_at_date%(model_crew.%AGMT_SEL_FG%, crew.%id%, date);

export %in_variable_group%(Abstime date) = not %in_fixed_group_at_date%(date);
export %in_variable_group_at_date%(Abstime date) = not %in_fixed_group_at_date%(date); /* NB: this counts also retired as VG ! */
export %in_variable_active_group_at_date%(Abstime date) =
  model_crew.%agreement_selected_at_date%(model_crew.%AGMT_SEL_VG%, crew.%id%, date);

export %in_fixed_group_excl_specials%(Abstime date) =
  model_crew.%agreement_selected_at_date%(model_crew.%AGMT_SEL_FG_PLAIN%, crew.%id%, date);

export %in_variable_group_ppstart% = not %in_fixed_group_ppstart%;


/*
** Start of variable contract in period.
** If VG contract starts before 'start_hb', 'start_hb' is returned
** If no VG contract in period, void_abstime is returned
** NB! Only 1 change in period is supported
*/
export %variable_group_start%(Abstime start_hb, Abstime stop_hb) =
  let first_group_change_date = %first_group_change_date%(start_hb);
  if %in_variable_group%(start_hb) then
    start_hb
  else if first_group_change_date < stop_hb and
       %in_variable_group%(first_group_change_date) then
      first_group_change_date
  else
    void_abstime;
/*
** End of variable contract in period.
** If VG contract ends after 'stop_hb', 'stop_hb' is returned
** If no VG contract in period, void_abstime is returned
** NB! Only 1 change in period is supported
*/
export %variable_group_end%(Abstime start_hb, Abstime stop_hb) =
  let first_group_change_date = %first_group_change_date%(start_hb);
  if %in_variable_group%(start_hb) then
    nmin(first_group_change_date, stop_hb)
  else if first_group_change_date < stop_hb and
          %in_variable_group%(first_group_change_date) then
    stop_hb
  else
    void_abstime;

/*
** Start of variable contract in period.
** If FG contract starts before 'start_hb', 'start_hb' is returned
** If no FG contract in period, void_abstime is returned
** NB! Only 1 change in period is supported
*/
export %fixed_group_start%(Abstime start_hb, Abstime stop_hb) =
  let first_group_change_date = %first_group_change_date%(start_hb);
  if %in_fixed_group%(start_hb) then
    start_hb
  else if first_group_change_date < stop_hb and
       %in_fixed_group%(first_group_change_date) then
      first_group_change_date
  else
    void_abstime;

/*
** End of variable contract in period.
** If FG contract ends after 'stop_hb', 'stop_hb' is returned
** If no FG contract in period, void_abstime is returned
** NB! Only 1 change in period is supported
*/
export %fixed_group_end%(Abstime start_hb, Abstime stop_hb) =
  let first_group_change_date = %first_group_change_date%(start_hb);
  if %in_fixed_group%(start_hb) then
    nmin(first_group_change_date, stop_hb)
  else if first_group_change_date < stop_hb and
          %in_fixed_group%(first_group_change_date) then
    stop_hb
  else
    void_abstime;

export %fixed_days_in_period%(Abstime start, Abstime stop) =
  let grpchange1 = %first_group_change_date%(start),
      grpchange2 = %first_group_change_date%(%first_group_change_date%(start)+0:01);
    if grpchange1 < stop and grpchange1 > start then
        (if %in_fixed_group%(start) then
          (grpchange1 - start) / 24:00
        else
          0)
        +
        (if grpchange2 < stop and grpchange2 > start then
          (if %in_fixed_group%(grpchange1) then
            (grpchange2 - grpchange1) / 24:00
          else
            (stop - grpchange2) / 24:00)
        else
          if %in_fixed_group%(grpchange1) then
            (stop - grpchange1) / 24:00
          else
            0)
    else
      if %in_fixed_group%(start) then
        (stop - start) / 24:00
      else
        0;

/* Special contracts (SKBU)
 *
 * The "or" cases, checking contract_desc_long, should
 * be removed when all supporting data is migrated. /EkG
 */
export %in_5_4_flex_group%(Abstime date) =
  default(%group_at_date%(date) = "X", false) or
  %contract_desc_long%(date) = "Flex";

export %in_fixed_variable_group%(Abstime date) =
  default(%group_at_date%(date) = "FV", false) or
  locate("FVG",%contract_desc_long%(date)) <> 0;

/* These definitions are cumbersome.
 * Variable group will work right away, but when we use fixed group, we need
 * work-arounds since fixed group includes more than "F" in the group string. */
export %has_some_variable_group_in_period%(Abstime start, Abstime stop) =
  %has_group_in_period%("V", start, stop);

export %has_some_fixed_group_in_period%(Abstime start, Abstime stop) =
  %has_group_in_period%("F", start, stop) or
  %has_group_in_period%("FV", start, stop) or
  %has_group_in_period%("X", start, stop);

export %has_some_5_4_flex_group_in_period%(Abstime start, Abstime stop) =
  %has_group_in_period%("X", start, stop) or
  /* This is a left-over from the old data and should
     eventually be removed */
  %in_5_4_flex_group%(start) or
  %in_5_4_flex_group%(stop - 0:01) or
  any(times((stop-start)/24:00),
      %in_5_4_flex_group%(start + %times_index_0% * 24:00));

export %has_some_fixed_variable_group_in_period%(Abstime start, Abstime stop) =
  %has_group_in_period%("FV", start, stop) or
  /* This is a left-over from the old data and should
     eventually be removed */
  %in_fixed_variable_group%(start) or
  %in_fixed_variable_group%(stop - 0:01) or
  any(times((stop-start)/24:00),
      %in_fixed_variable_group%(start + %times_index_0% * 24:00));

/* Cache variables */
export %in_variable_group_pp_start% = %in_variable_group%(%pp_start%);
export %in_variable_group_pp_end% = %in_variable_group%(%select_pp_end%);
export %in_variable_group_pp_start_or_pp_end% =
  %in_variable_group_pp_start% or %in_variable_group_pp_end%;
export %in_variable_group_trip_start% = %in_variable_group%(trip.%start_hb%);
export %in_variable_group_wop_start% = %in_variable_group%(wop.%start_hb%);
export %in_variable_group_wop_end% = %in_variable_group%(wop.%end_hb%);
export %in_variable_group_duty_end% = %in_variable_group%(duty.%end_hb%);
export %has_some_variable_group_in_month% =
  %has_some_variable_group_in_period%(wop.%start_month_start%, wop.%start_month_end%);
export %has_some_variable_group_in_publ% =
  %has_some_variable_group_in_period%(%pp_start%, %publ_period_end%);

export %has_some_variable_group_in_pp% =
  %in_variable_group_pp_start_or_pp_end% or
  %has_some_variable_group_in_period%(%pp_start%, %select_pp_end%);

export %in_fixed_group_pp_start% = %in_fixed_group%(%pp_start%);
export %in_fixed_group_pp_end% = %in_fixed_group%(%select_pp_end%);
export %in_fixed_group_pp_start_or_pp_end% =
  %in_fixed_group_pp_start% or %in_fixed_group_pp_end%;
export %in_fixed_group_trip_start% = %in_fixed_group%(trip.%start_hb%);
export %in_fixed_group_wop_start% = %in_fixed_group%(wop.%start_hb%);
export %has_some_fixed_group_in_pp% =
  %in_fixed_group_pp_start_or_pp_end% or
  %has_some_fixed_group_in_period%(%pp_start%, %select_pp_end%);

export %in_fixed_group_excl_specials_pp_start% = %in_fixed_group_excl_specials%(%pp_start%);
export %in_fixed_group_excl_specials_pp_end% = %in_fixed_group_excl_specials%(%select_pp_end%);
export %in_fixed_group_excl_specials_pp_start_or_pp_end% =
  %in_fixed_group_excl_specials_pp_start% or %in_fixed_group_excl_specials_pp_end%;

export %in_fixed_group_entire_period_without_service_grade_change%(Abstime start, Abstime stop) =
  all(trip(chain), %in_fixed_group%(trip.%start_hb%))
  where(trip.%start_hb% >= start and trip.%start_hb% <= stop) and
  not %service_grade_change_in_period%(start, stop);

export %in_5_4_flex_group_pp_start% = %in_5_4_flex_group%(%pp_start%);
export %in_5_4_flex_group_pp_end% = %in_5_4_flex_group%(%select_pp_end%);
export %in_5_4_flex_group_pp_start_or_pp_end% =
  %in_5_4_flex_group_pp_start% or %in_5_4_flex_group_pp_end%;
export %in_5_4_flex_group_wop_start% = %in_5_4_flex_group%(wop.%start_hb%);
export %has_some_5_4_flex_group_in_pp% =
  %in_5_4_flex_group_pp_start_or_pp_end% or
  %has_some_5_4_flex_group_in_period%(%pp_start%, %pp_end%);

export %in_fixed_variable_group_pp_start% = %in_fixed_variable_group%(%pp_start%);
export %in_fixed_variable_group_pp_end% = %in_fixed_variable_group%(%select_pp_end%);
export %in_fixed_variable_group_pp_start_or_pp_end% =
  %in_fixed_variable_group_pp_start% or %in_fixed_variable_group_pp_end%;
export %in_fixed_variable_group_wop_start% = %in_fixed_variable_group%(wop.%start_hb%);

export %change_to_fg_in_period_date%(Abstime start, Abstime stop) =
  default(%_change_to_fg_in_period_date%(start, stop), 1jan1986);

%_change_to_fg_in_period_date%(Abstime start, Abstime stop) =
  first(times((stop - start) / 24:00), start + %times_index_0% * 24:00)
  where (
         %group_at_date%(start + (%times_index_0%-1) * 24:00) = "V" and
         (%group_at_date%(start + %times_index_0% * 24:00) = "F" or
          %group_at_date%(start + %times_index_0% * 24:00) = "X")); /* 5/4 flex */

export %change_fg_to_vg_at_date%(abstime date) =
    %in_fixed_group_at_date%(date-24:00)
    and not %in_fixed_group_at_date%(date);

export %change_vg_to_fg_at_date%(abstime date) =
    not %in_fixed_group_at_date%(date-24:00)
    and %in_fixed_group_at_date%(date);

export %group_detailed_pp_start% =
  %group_detailed_at_date%(%pp_start%);

export %group_detailed_pp_end% =
  %group_detailed_at_date%(%pp_end%);

export %group_detailed_next_in_pp% =
    %group_detailed_at_date%(%agreement_pp_start_valid_to%);

export %group_detailed_next_next_in_pp% =
    %group_detailed_at_date%(%next_agreement_pp_start_valid_to%);

export %group_detailed_next_next_next_in_pp% =
    %group_detailed_at_date%(%next_next_agreement_pp_start_valid_to%);

export %group_detailed_at_date%(Abstime date) =
    concat(%_group_detailed_at_date%(date),
           if %in_fixed_group%(date) then
                format_int(default(%cycle_start_at_day%(date),-1), "/%d")
           else "");

/* group_at_date in crew_contract_set now includes X for 54Flex and FV for
   fixed variable group */
%_group_detailed_at_date%(Abstime date) =
    concat(if default(%is_skbu_resource_pool_at_date%(date),false) then "RP-"
           else "",
           default(%group_at_date%(date), ""));

%_group_detailed_pp_start% =
    %_group_detailed_at_date%(%pp_start%);

%_group_detailed_pp_end% =
    %_group_detailed_at_date%(%pp_end%);

/* Some functionality (compensation days) uses the contract / pattern specified
   length/work ratio to calculate ratio */
export %pattern_prod_ratio_at_date%(Abstime tim) =
  default(%_pattern_prod_ratio_at_date%(tim),
          if %flight_crew% then 180 else 160);
%_pattern_prod_ratio_at_date%(Abstime tim) =
  let pid = %original_pattern%(tim);
  (100*%pattern_no_of_days%(pid))/%pattern_no_of_prod_days%(pid);


/* Note: add retired here or some other check, part time factor maybe? */
export %is_plannable% = true;/*%part_time_factor% > 0;*/

/*
 * Part time
 */
/* 1. Check if current part time factor is defined in special schedule table,
 * 2. Get the part time factor as defined in crew contract table. */
export %part_timer_and_not_fixed_at_date%(abstime date) =
  %part_time_factor_at_date%(date) < 100 and
  not %in_fixed_group%(date);

export %part_time_factor_at_date%(Abstime date) =
  default(%_spec_sched_limit_int_to%("PartTime", date),
          %crew_contract_part_time_factor_at_date%(date));

/* Used for finding original part time factor for crew with summer contracts */
export %original_part_time_factor_at_date%(Abstime date) =
  default(%_spec_sched_limit_int_to%("PartTime", date),
          %crew_original_contract_part_time_factor%(date));


export %part_time_factor_at_date_validto%(Abstime date) =
    default(%_spec_sched_limit_validto%("PartTime", date),
            %agreement_at_date_valid_to%(date));

export %part_time_factor_pp_start_validto% =
    %part_time_factor_at_date_validto%(%pp_start%);

export %part_time_factor% =
  %part_time_factor_at_date%(%available_start%);

/*
13May2008, HVA: this variable is needed for knowing part time factor
  of a crew in a calendar year. Cabin Danish crew
  WP 357
*/
export %part_time_factor_in_period%(Abstime a1, Abstime a2) =
/* Assume no more than three years are used */
  if %part_time_change_in_period%(a1, a2)
  then
    ((sum(times(36),
         %_part_time_factor_in_period%(add_months(a1, %times_index_0%-1),
                                       add_months(a1, %times_index_0%)))
      while (not (add_months(a1, %times_index_0%) >= a2))
     + %_part_time_factor_in_period%(round_down_month(a2), a2)) * 100)
    / (%_num_months%(a1,a2) + 1)
  else
    %part_time_factor_at_date%(a1) * 100;

%_part_time_factor_in_period%(Abstime a1, Abstime a2) =
  if %part_time_change_in_period%(a1, a2)
  then
    default(%_part_time_factor_in_changed_period%(a1,a2), 0)
  else %part_time_factor_at_date%(a1);

%_part_time_factor_in_changed_period%(Abstime a1, Abstime a2) =
  let change_date = %part_time_change_date_in_period%(a1, a2);
  ((%_part_time_factor_at_date%(a1) * ((change_date - a1) / 24:00))
   + (%_part_time_factor_at_date%(change_date) * ((a2 - change_date) / 24:00)))
  / ((a2 - a1) / 24:00);

%_part_time_factor_at_date%(Abstime date) =
  default(%part_time_factor_at_date%(date), 0);

%_num_months%(Abstime a1, Abstime a2) =
  count(times(36))
  while (add_months(a1, %times_index_0%) <= a2);

/* %part_time_change_in_period% rewritten by pergr 2008-08-28 */
export %part_time_change_in_period%(abstime start_t, abstime end_t) =
    let start_factor = %part_time_factor_at_date%(start_t);
    if end_t <= start_t
        then
            false
    else
        start_factor <> %part_time_factor_at_date%(end_t-00:01) or /*Not inclusive */
        any(times((end_t-start_t)/(24:00*28)),
                start_factor <> %part_time_factor_at_date%(add_months(start_t,%times_index_0%)-00:01))
             while (add_months(start_t,%times_index_0%)<= end_t);

export %part_time_change_in_pp% =
    %part_time_factor_pp_start_validto% < %pp_end%;

export %part_time_change_in_publ% =
    %part_time_factor_pp_start_validto% < %publ_period_end%;

export %part_time_change_in_month% =
  %part_time_factor_month_start% <> %part_time_factor_month_end%;

%part_time_change_in_year% =
    let start_date = round_down_year(%pp_start%),
        end_date = round_up_year(%pp_start%+0:01);

        void(%part_time_change_date_in_period%(start_date, end_date));

export %part_time_change_date% =
    %part_time_change_date_in_period%(wop.%start_month_start%, wop.%start_month_end%);

export %part_time_change_in_publ_date% =
  %part_time_change_date_in_period%(%pp_start%, %publ_period_end%);

export %part_time_change_date_in_period%(Abstime a1, Abstime a2) =
  let period_days = (a2 - a1) / 24:00,
      start_pt = crew.%part_time_factor_at_date%(a1);
  first(times(period_days), a1 + %times_index_0% * 24:00)
  where (start_pt <> crew.%part_time_factor_at_date%(a1 + %times_index_0% * 24:00) and
         (a1 + %times_index_0% * 24:00) < a2);

export %part_time_change_in_pp_date% =
    %part_time_change_date_in_period%(%pp_start%, %pp_end%);

/* Usage: divide the result with wop.%month_days% (this is to keep the decimals) */
export %avg_pt_factor_times_days_in_month% =
  ((crew.%part_time_change_date% - wop.%start_month_start%) / 24:00 *
    crew.%part_time_factor_at_date%(wop.%start_month_start%)) +
  ((wop.%start_month_end% - crew.%part_time_change_date%) / 24:00 *
    crew.%part_time_factor_at_date%(wop.%start_month_end% - 24:00));

/* Cache variables */
export %part_time_factor_pp_start% = %part_time_factor_at_date%(%pp_start%);
export %part_time_factor_pp_end% = %part_time_factor_at_date%(%pp_end%);
export %part_time_factor_publ_end% = %part_time_factor_at_date%(%publ_period_end%);

/* Changed to wop dependent, HenrikA 03Nov2006 */
export %part_time_factor_month_start% =
  %part_time_factor_at_date%(wop.%start_month_start%);

export %part_time_factor_month_end% =
  %part_time_factor_at_date%(wop.%start_month_end% - 0:01);

export %is_full_time% = %part_time_factor% = 100;
export %is_full_time_start_or_end% =
  %part_time_factor_at_date%(%available_start%) = 100 or
  %part_time_factor_at_date%(%available_end%) =100;
export %is_full_time_wop_start% = %part_time_factor_at_date%(wop.%start_hb%) = 100;
export %is_full_time_in_month% =
  %part_time_factor_at_date%(wop.%start_month_start%) = 100 and
  %part_time_factor_at_date%(wop.%start_month_end% - 0:01) = 100;
export %is_full_time_in_pp% =
  %part_time_factor_at_date%(%pp_start%) = 100 and
  %part_time_factor_at_date%(%pp_end%) = 100;
export %is_part_time_in_pp%(Int part_time) =
  %part_time_factor_at_date%(%pp_start%) = part_time and
  %part_time_factor_at_date%(%pp_end%) = part_time;
export %has_some_part_time_in_month% = not %is_full_time_in_month%;
export %has_some_part_time_in_pp% = not %is_full_time_in_pp%;

export %is_full_time_at_date%(Abstime date) =
  %part_time_factor_at_date%(date) = 100;
export %is_part_time_at_date%(Abstime date) =
  not %is_full_time_at_date%(date);
export %is_part_time_start_or_end% =
  %part_time_factor_at_date%(%available_start%) < 100 or
  %part_time_factor_at_date%(%available_end%) < 100;
export %part_time_factor_duty_start% = %part_time_factor_at_date%(duty.%start_hb%);
export %part_time_factor_trip_start% = %part_time_factor_at_date%(trip.%start_hb%);
export %part_time_factor_wop_start% = %part_time_factor_at_date%(wop.%start_hb%);
export %part_time_factor_wop_end% = %part_time_factor_at_date%(wop.%end_hb%);
export %is_parttime_ill% =
  %crew_contract_part_time_factor_at_date%(calendar.%month_start%) <>
  default(%_spec_sched_limit_int_to%("PartTime", calendar.%month_start%),
          %crew_contract_part_time_factor_at_date%(calendar.%month_start%));

/*
 * Contract and pattern
 */
export %agreement% = %agreement_at_date%(%available_start%);
export %agreement_pp_start% = %agreement_at_date%(%pp_start%);
export %agreement_pp_end% = %agreement_at_date%(%pp_end%);

export %agreement_at_date_valid_to%(Abstime date) =
  default(%_agreement_at_date_valid_to%(date), 31dec2035);
export %agreement_pp_start_valid_to% =
  %agreement_at_date_valid_to%(%pp_start%);

export %agreement_pp_start_valid_from% =
  default(%agreement_at_date_valid_from%(%pp_start%), 1jan1986);

export %next_agreement_at_date_valid_to%(Abstime date) =
  nmin(%agreement_at_date_valid_to%(%agreement_at_date_valid_to%(date)),
       %pp_end%);
export %next_agreement_pp_start_valid_to% =
  nmin(%agreement_at_date_valid_to%(%agreement_pp_start_valid_to%),
       %pp_end%);

export %next_next_agreement_at_date_valid_to%(Abstime date) =
  nmin(%agreement_at_date_valid_to%(%next_agreement_at_date_valid_to%(date)),
       %pp_end%);
export %next_next_agreement_pp_start_valid_to% =
  nmin(%agreement_at_date_valid_to%(%next_agreement_pp_start_valid_to%),
       %pp_end%);

export %next_next_next_agreement_at_date_valid_to%(Abstime date) =
  nmin(%agreement_at_date_valid_to%(%next_next_agreement_at_date_valid_to%(date)),
       %pp_end%);
export %next_next_next_agreement_pp_start_valid_to% =
  nmin(%agreement_at_date_valid_to%(%next_next_agreement_pp_start_valid_to%),
       %pp_end%);


export %agreement_change_in_pp% =
  %agreement_pp_start_valid_to% < %pp_end% or
  %agreement_pp_start_valid_from% = %pp_start%;

export %agreement_change_2_in_pp% =
  %next_agreement_pp_start_valid_to% > %agreement_pp_start_valid_to% and
  %next_agreement_pp_start_valid_to% < %pp_end%;

export %agreement_change_3_in_pp% =
  %next_next_agreement_pp_start_valid_to% > %next_agreement_pp_start_valid_to% and
  %next_next_agreement_pp_start_valid_to% < %pp_end%;



export %agreement_wop_start% = %agreement_at_date%(wop.%start_hb%);

export %agreement_details% = %_agreement_details%;

%_agreement_details% =
  /*concat(%group_at_date%(%available_start%), ", ",*/
  format_int(%part_time_factor_at_date%(%available_start%), "%3d");

export %agreement_is_75_pt_law% =
  %contract_desc_long%(%available_start%) = "75%NNS";

%pattern% = %_pattern_at_date%(%available_start%);

export %pattern_pp_start% = %_pattern_at_date%(%pp_start%);
%pattern_pp_end% = %_pattern_at_date%(%pp_start%);

/* Note: This should use %_pattern_no_of_days% instead
 but data seems faulty */
export %pattern_at_date_length%(Abstime tim) =
  %pattern_length%(%_pattern_at_date%(tim));

export %activity_block_start% (Abstime d) =
  let pattern = %_pattern_at_date%(d),
      day_in_pattern =%day_in_pattern%(pattern,d);
   round_down(d-((day_in_pattern-%pattern_act_start%(pattern,day_in_pattern))*24:00),24:00);


export %activity_block_end%(Abstime d) =
  let pattern = %_pattern_at_date%(d),
      day_in_pattern = %day_in_pattern%(pattern,d);
  %activity_block_start%(d)+(%pattern_act_end%(pattern,day_in_pattern)-%pattern_act_start%(pattern,day_in_pattern))*24:00;

export %in_production_block%(Abstime d)=
   let pattern = %_pattern_at_date%(d),
      day_in_pattern =%day_in_pattern%(pattern,d);
 %_pattern_daytype%(pattern, day_in_pattern) = "P";

export %last_date_in_prod_block%(Abstime d) =
     let pattern = %_pattern_at_date%(d),
      day_in_pattern = %day_in_pattern%(pattern,d),
      pattern_act_end = %pattern_act_end%(pattern, day_in_pattern);
      if %_pattern_daytype%(pattern, day_in_pattern) = "P" then
         round_down((d + 24:00*(pattern_act_end - day_in_pattern)), 24:00)
      else
         void_abstime;

/* Note: This should use %_pattern_no_of_prod_days% instead
 but data seems faulty */
export %pattern_at_date_nr_p_days%(Abstime tim) =
  let pattern = %_pattern_at_date%(tim);
  count(times(%pattern_length%(pattern)))
  where (%_pattern_daytype%(pattern, %times_index_0%) = "P");

export %pattern_daytype%(Int pattern, Int ix) =
  if %_pattern_daytype%(pattern, ix) = "P" then "P" else "F";

export %cyclestart_wop_start% = %cycle_start_at_day%(wop.%start_hb%);
export %cyclestart_pp_start% = %cycle_start_at_day%(%pp_start%);
export %cyclestart_pp_end% = %cycle_start_at_day%(%pp_end%);

export %cycle_start_day_crew%(Abstime date) = %cycle_start_at_day%(date)-1;

%cycle_start_date_crew%(Abstime date) =
  %cycle_start_day_crew%(date)*24:00 + %_pattern_fixed_cycle_start%(%_pattern_at_date%(date));

/* %length_pattern_wop_start% = -1 is when we have corrupt pattern data. */
export %length_pattern_wop_start% =
  let pattern_length = %pattern_at_date_length%(wop.%start_hb%);
  if pattern_length > 0 then
    pattern_length
  else
    -1;

export %nr_p_days_in_pattern_wop_start% =
  %nr_days_in_pattern_wop_start_of_type%("P");

export %nr_f_days_in_pattern_wop_start% =
  %nr_days_in_pattern_wop_start_of_type%("F");

%nr_days_in_pattern_wop_start_of_type%(String type) =
  let pattern = %_pattern_at_date%(wop.%start_hb%);
  count(times(%length_pattern_wop_start%))
  where (%_pattern_daytype%(pattern, %times_index_0%) = type);

export %day_in_pattern%(Int pattern, Abstime date) =
  let days = (date - %cycle_start_date_crew%(date))/24:00,
      pattern_length = %pattern_length%(pattern),
      cycles = days / pattern_length;
  1 + days - cycles*pattern_length;

export %pattern_daytype_at_date_using_date_of_pattern%(Abstime date, Abstime date_of_pattern) =
  let pattern = %_pattern_at_date%(date_of_pattern);
  %_pattern_daytype%(pattern, %day_in_pattern%(pattern, date));

/* overload function */
export %pattern_daytype_at_date%(Abstime date) =
  %pattern_daytype_at_date_using_date_of_pattern%(date, date);

export %pattern_activity_at_date%(Abstime date) =
  let pattern = %_pattern_at_date%(date);
  %_pattern_activity%(pattern, %day_in_pattern%(pattern, date));

/* date_index starts at pp_start */
export %pattern_activity_at_date_ix% =
  %pattern_activity_at_date%(%date_index%);

export %rudob_change_in_pp% =
  %agreement_change_in_pp% or
  %homebase_change_in_pp% or
  %ac_qlns_change_in_pp%;

export %rudob_change_in_pp_date% =
  nmin(%agreement_pp_start_valid_to%,
       %homebase_pp_start_valid_to%,
       %ac_qlns_change_in_pp_date%);

export %change_text_agreement_1% = %change_text_agreement%;
export %change_text_agreement_2% =
  if %agreement_change_2_in_pp% then
    concat("Contract change (",
           %contract_desc_long%(%agreement_pp_start_valid_to%), ", ",
           %group_detailed_next_in_pp%, " > ",
           %contract_desc_long%(%next_agreement_pp_start_valid_to%), ", ",
           %group_detailed_next_next_in_pp%, ")")
  else
    "";
export %change_text_agreement_3% =
  if %agreement_change_3_in_pp% then
    concat("Contract change (",
           %contract_desc_long%(%next_agreement_pp_start_valid_to%), ", ",
           %group_detailed_next_next_in_pp%, " > ",
           %contract_desc_long%(%next_next_agreement_pp_start_valid_to%), ", ",
           %group_detailed_next_next_next_in_pp%, ")")
  else
    "";

export %change_text_agreement% =
  if %agreement_change_in_pp% then
    if %agreement_pp_start_valid_from% = %pp_start% then
      concat("Contract change (",
             %contract_desc_long%(%pp_start%-24:00), ", ",
             %group_detailed_at_date%(%pp_start%-24:00), " > ",
             %contract_desc_long%(%pp_start%), ", ",
             %group_detailed_next_in_pp%, ")")
    else
      concat("Contract change (",
             %contract_desc_long%(%pp_start%), ", ",
             %group_detailed_pp_start%, " > ",
             %contract_desc_long%(%agreement_pp_start_valid_to%), ", ",
             %group_detailed_next_in_pp%, ")")
  else
    "";

export %change_text_homebase% =
  /*if %rudob_change_in_pp_date% = %homebase_pp_start_valid_to% then*/
  if %homebase_change_in_pp% then
    concat("Homebase change (",
           %homebase_pp_start%, " > ",
           %homebase_pp_end%, ")")
  else
    "";

export %change_text_ac_qual% =
  /*if %rudob_change_in_pp_date% = %ac_qlns_change_in_pp_date% then*/
  if %ac_qlns_change_in_pp% then
    concat("AC qual change (",
           %aircraft_qlns_pp_start%, " > ",
           %aircraft_qlns_pp_end%, ")")
  else
    "";

export %change_text_ac_qual_1% =
  /*if %rudob_change_in_pp_date% = %ac_qlns_change_in_pp_date% then*/
  if %ac_qlns_change_1_in_pp% then
    concat("AC qual change (",
           %ac_qlns_at_date%(%last_ac_qlns_change_in_pp_date%-00:01), " > ",
           %aircraft_qlns_pp_end%, ")")
  else
    "";
export %change_text_ac_qual_2% =
  /*if %rudob_change_in_pp_date% = %ac_qlns_change_in_pp_date% then*/
  if %ac_qlns_change_in_pp% then
    concat("AC qual change (",
           %ac_qlns_at_date%(%next_ac_qlns_change_in_pp_date%-00:01), " > ",
           %ac_qlns_at_date%(%last_ac_qlns_change_in_pp_date%-00:01), ")")
  else
    "";
export %change_text_ac_qual_3% =
  /*if %rudob_change_in_pp_date% = %ac_qlns_change_in_pp_date% then*/
  if %ac_qlns_change_in_pp% then
    concat("AC qual change (",
           %ac_qlns_at_date%(%next_next_ac_qlns_change_in_pp_date%-00:01), " > ",
           %ac_qlns_at_date%(%next_ac_qlns_change_in_pp_date%-00:01), ")")
  else
    "";

export %rudob_change_text% =
  if %rudob_change_in_pp% then
    concat(%change_text_agreement%," ",
           %change_text_homebase%, " ",
           %change_text_ac_qual%)
  else
    "No changes in pp";

%has_bidsen_contract%(Abstime date) =
    default(locate("BidSen", %contract_desc_short%(date)) > 0, false);

%has_bidsen_contract_in_pp% =
    %has_bidsen_contract%(%pp_start%) or
    %has_bidsen_contract%(%pp_end% - 00:01);

/* Remapping to crew_contract */
export %agreement_at_date%(AbsTime lookuptime) = crew_contract.%agreement_at_date%(lookuptime);
export %agreement_at_date_valid_from%(AbsTime lookuptime) = crew_contract.%agreement_at_date_valid_from%(lookuptime);
%_agreement_at_date_valid_to%(Abstime lookuptime) = crew_contract.%agreement_at_date_valid_to%(lookuptime);
export %cycle_start_at_day%(AbsTime lookuptime) = crew_contract.%cycle_start_at_day%(lookuptime);

export %crew_contract_part_time_factor_at_date%(Abstime lookuptime) = crew_contract.%crew_contract_part_time_factor_at_date%(lookuptime);
export %group_at_date%(Abstime lookuptime) = crew_contract.%group_at_date%(lookuptime);
 %_pattern_at_date%(Abstime lookuptime) = crew_contract.%pattern_at_date%(lookuptime);
export %contract_parttime_code%(Abstime lookuptime) = crew_contract.%contract_parttime_code%(lookuptime);
export %contract_desc_short%(Abstime lookuptime) = crew_contract.%contract_desc_short%(lookuptime);
export %contract_desc_long%(Abstime lookuptime) = crew_contract.%contract_desc_long%(lookuptime);

/*******************************************************************
**
** Section 7: Documents
**
** These functions are here mainly for compatibility. You may certainly
** call model_crew functions directly, they are more systematic.
********************************************************************/

/* first some fresh routines, getting what is regarded as valid also when duplicates are present.
   Use these function when possible
*/
export %doc_current_dest_nationality%(Abstime d, String destination) =
  model_crew.%country_passport_info%(model_crew.%docitem_nationality%, crew.%id%, destination, d);

export %doc_current_dest_passport_no%(Abstime d, String destination) =
  model_crew.%country_passport_info%(model_crew.%docitem_docno%, crew.%id%, destination, d);

export %doc_current_dest_passport_issuer%(Abstime d, String destination) =
  model_crew.%country_passport_info%(model_crew.%docitem_issuer%, crew.%id%, destination, d);

export %doc_current_dest_passport_validto_str%(Abstime d, String destination) =
  model_crew.%country_passport_info%(model_crew.%docitem_validto%, crew.%id%, destination, d);

export %doc_current_dest_visa_no%(Abstime d, String destination) =
  model_crew.%country_visa_info%(model_crew.%docitem_docno%, crew.%id%, destination, d);

export %doc_current_dest_visa_issuer%(Abstime d, String destination) =
  model_crew.%country_visa_info%(model_crew.%docitem_issuer%, crew.%id%, destination, d);

export %doc_current_dest_visa_validto_str%(Abstime d, String destination) =
  model_crew.%country_visa_info%(model_crew.%docitem_validto%, crew.%id%, destination, d);

export %doc_current_license_no%(Abstime d) =
  model_crew.%crew_document_type_exp%(model_crew.%docitem_docno%, crew.%id%, model_crew.%doctyp_license%, d);

export %doc_current_license_issuer%(Abstime d) =
  model_crew.%crew_document_type_exp%(model_crew.%docitem_issuer%, crew.%id%, model_crew.%doctyp_license%, d);

export %doc_current_license_validto_str%(Abstime d) =
  model_crew.%crew_document_type_exp%(model_crew.%docitem_validto%, crew.%id%, model_crew.%doctyp_license%, d);

export %doc_current_recurrent_validto%(String subtype) =
  model_crew.%doc_max_validto_date%(crew.%id%, "REC", subtype, leg.%start_utc%);

export %doc_acqual_current_recurrent_validto%(String subtype, String ac_qual) =
  model_crew.%_doc_acqual_type_max_validto_date%(crew.%id%, "REC", subtype, ac_qual, leg.%start_utc%);

/* Here follows the rest. Careful if using */
export %doc_subtype%(String typ, String subtype, Abstime date) =
  model_crew.%doc_subtype%(%id%, typ, subtype, date);

export %crew_doc_subtyp_ix%(String typ, Abstime date, Int ix) =
  model_crew.%crew_doc_subtype_ix%(%id%, typ, date, ix);

export %number_of_doc%(Abstime i_start, Abstime i_end) =
  model_crew.%number_of_doc%(%id%, i_start, i_end);

export %doc_type_at_time%(Abstime date, Int ix) =
  model_crew.%all_doc_type%(%id%, date, ix);

export %doc_subtype_at_time%(Abstime date, Int ix)  =
  model_crew.%all_doc_subtype%(%id%, date, ix);

export %doc_nr_at_time%(Abstime date, Int ix) =
  model_crew.%all_doc_nr%(%id%, date, ix);

export %doc_exp_date_at_time%(Abstime date, Int ix) =
  model_crew.%all_doc_exp_date%(%id%, date, ix);

export %doc_issuer_at_time%(Abstime date, Int ix) =
  model_crew.%all_doc_issuer%(%id%, date, ix);

export %nationality_prefer%(Abstime date, String nationality) =
  model_crew.%nationality_prefer%(%id%, date, nationality);

export %has_passport%(Abstime date, String country) =
  model_crew.%has_passport%(%id%, date, country);

export %max_iter_crew_doc%(String typ, Abstime date) =
  default(model_crew.%max_ix_crew_doc%(%id%, typ, date),0);

export %has_valid_doc%(string doc_type, string doc_subtype, abstime date) =
  default(%doc_max_validto_date%(doc_type, doc_subtype, date) >= date, false);
  /* backed to old code as hotfix; old code makes a general search when doc_subtype=""
  not void(model_crew.%doc_subtype%(%id%, doc_type, doc_subtype, date));*/

export %has_required_visa_or_passport%(Abstime date, String country) =
  model_crew.%has_passport%(%id%, date, country)
  or not void(model_crew.%passport_nationality_by_required_visa%(%id%, date, country));

export %doc_max_validto_date%(string doc_type, string doc_subtype, abstime date) =
    model_crew.%doc_max_validto_date%(%id%, doc_type, doc_subtype, date);

export %doc_max_validto_date_for_ac_qual%(string doc_type, string doc_subtype, string ac_qual, abstime date) =
    model_crew.%doc_max_validto_date_for_ac_qual%(%id%, doc_type, doc_subtype, ac_qual, date);

export %expiry_doc_no%(String doc_type, String doc_subtype, Abstime date) =
    model_crew.%best_match_subtyp_doc%(model_crew.%docitem_docno%, %id%, doc_type, doc_subtype, date);

export %expiry_doc_si%(String doc_type, String doc_subtype, Abstime date) =
    model_crew.%best_match_subtyp_doc%(model_crew.%docitem_si%, %id%, doc_type, doc_subtype, date);

/* Returns the AC qualification of the document of type+subtype with longest validity. */
export %expiry_doc_any_ac_qual%(String doc_type, String doc_subtype, Abstime date) =
    let last_date = 
        
            default(model_crew.%doc_max_validto_date%(%id%,doc_type, doc_subtype, date)-0:01,date), /* if doc expired, look at earlier date */
        doc_qual = 
        
            default(model_crew.%best_match_subtyp_doc%(model_crew.%docitem_acqual%, %id%, doc_type, doc_subtype, last_date),"");
    doc_qual;

export %expiry_doc_active_ac_qual%(String doc_type, String doc_subtype, Abstime date) =
    let doc_validto = 
       default(%min_expiry_doc_date_for_active_qual%(doc_type, doc_subtype, date), date),
        doc_qual = default(%ac_qual_for_expiry_doc%(doc_type, doc_subtype, doc_validto, date), %active_ac_qual%);
    doc_qual;

%min_expiry_doc_date_for_active_qual%(String doc_type, String doc_subtype, Abstime date) =
    min(times(%max_iter%("ACQUAL", date)),
        model_crew.%doc_max_validto_date_for_ac_qual%(%id%, doc_type, doc_subtype, %qln%("ACQUAL", date, %times_index_0%), date));

%ac_qual_for_expiry_doc%(String doc_type, String doc_subtype, Abstime doc_validto, Abstime date) =
    first(times(%max_iter%("ACQUAL", date)),
          %qln%("ACQUAL", date, %times_index_0%))
    where(doc_validto = model_crew.%doc_max_validto_date_for_ac_qual%(%id%, doc_type, doc_subtype, %qln%("ACQUAL", date, %times_index_0%), date));


/* Returns the AC qualification of the document of type+subtype with longest validity.
   For LC and a crew with dual/triple quals, this actually returns the alternating AC qual
   according to the current setup for A3/A4/A5. */
export %expiry_doc_alternating_ac_qual%(String doc_type, String doc_subtype, String doc_qual_in, Abstime date) =
    let doc_qual = (if doc_qual_in = %any_ac_qual% then
                      %expiry_doc_any_ac_qual%(doc_type, doc_subtype, date)
                    else
                      if doc_qual_in = %active_ac_qual% then
                        %expiry_doc_active_ac_qual%(doc_type, doc_subtype, date)
                      else
                        doc_qual_in),
        a3a4_qual = %_alternate_ac_qual_a3a4%(doc_qual),
        a3a5_qual = %_alternate_ac_qual_a3a5%(doc_qual, date);
    /* Double and Triple qualified SKI crew should alternate. We also handle the case where 
       SKI crew looses one of their qualifications */
    if %is_a3a4a5_qualified_at_date%(date) then
        %_alternate_ac_qual_a3a4a5%(doc_qual, date)
    else if %is_a3a4_qualified_at_date%(date) or %has_ac_qln%(date, a3a4_qual) then
        a3a4_qual
    else if %is_a3a5_qualified_at_date%(date) or %has_ac_qln%(date, a3a5_qual) then
        a3a5_qual
    /* A4A5 should not exist, so no support for that, add here if needed in the future. */
    else
        doc_qual;

%_alternate_ac_qual_a3a4%(String qual) =
  if qual = "A3" then "A4"
  else if qual = "A4" then "A3"
  else "-";

%_alternate_ac_qual_a3a5%(String qual, Abstime date) =
  if qual = "A3" then 
    /* If crew has not yet performed A5 ILC, normal LC should be calculated on A3 */
    if %_has_lc_doc_with_ac_qual%("A5") then "A5" else "A3"
  else if qual = "A5" then "A3"
  else "-";

%_alternate_ac_qual_a3a4a5%(String qual, Abstime date) =
  if (qual = "A3" or qual = "A4") then 
    /* If crew has not yet performed A5 ILC, normal LC should be calculated on A3/A4 rotation as before */
    if %_has_lc_doc_with_ac_qual%("A5") then "A5" else %_alternate_ac_qual_a3a4%(qual)
  else if qual = "A5" then "A3 or A4"
  else "-";

%_has_lc_doc_with_ac_qual%(String qual) =
  default(model_crew.%doc_subtype_ac_qual_validto_date%(crew.%id%, "REC", "LC", qual), 01Jan1986) > 01Jan1986;

/* Wrappers for the edgecase above for triple qual crew, where upcoming lc qual is "A3 or A4" */
export %has_ac_qual_override_a3a4%(String ac_qual, Abstime date) =
  if ac_qual = "A3 or A4" then
    %has_ac_qln%(date, "A3") and %has_ac_qln%(date, "A4")
  else %has_ac_qln%(date, ac_qual);

export %has_ac_qual_override_a3a5%(String ac_qual, Abstime date) =
  if ac_qual = "A3 or A5" then
    %has_ac_qln%(date, "A3") and %has_ac_qln%(date, "A5")
  else %has_ac_qln%(date, ac_qual);

/* assume first applicable passport is "nationality" */
export %nationality%(Abstime date) =
  model_crew.%any_passport_country%(%id%, date);

export %document_expiry_date_subtype%(String doc_type, String doc_subtype, String ac_qual, Abstime date) =
    if ac_qual = %any_ac_qual% then
      %doc_max_validto_date%(doc_type, doc_subtype, date)
    else
      %doc_max_validto_date_for_ac_qual%(doc_type, doc_subtype, ac_qual, date);

export %any_ac_qual% = ""; /* Used for recurrent searches when ac qual does not matter */
export %active_ac_qual% = "__active__"; /* Used for recurrent searches when ac qual needs to be active */

export %license_renewal_date%(Abstime date) =
  %doc_max_validto_date%("LICENCE", "", date);

export %medical_renewal_date%(Abstime date) =
  %doc_max_validto_date%("MEDICAL", "", date);
  
export %crew_id_badge_renewal_date%(Abstime date) =
  %doc_max_validto_date%("BADGE", "", date);

/*
 * VISA
 * actually checks if crew has a valid or passport for the country, which is said to be required.
 * any visa must also have corressponding passsport number. It returns false if there are no requirments.
 */
export %has_visa_at_date%(Abstime date, String country) =
  not void(model_crew.%passport_nationality_by_required_visa%(%id%, date, country));

/*
 * VACCINATION
 * checks if crew has any vaccination subtyp which is said to be required.
 * If there are no requirments for the country, it will still be returning false !
 */
export %has_vaccination_at_date%(Abstime date, String country) =
  not void(model_crew.%required_docno_by_type_and_country%(model_crew.%doctyp_vaccination%, %id%, date, country));

/*
 * VISA
 */
export %has_req_specific_visa_at_date%(Abstime date, String country) =
  not void(model_crew.%required_docno_by_type_and_country%(model_crew.%doctyp_visa%, %id%, date, country));

/*
 * LICENCE - Temp PC
 */
export %temp_licence_pc_expiry_date%(Abstime date) =
  %doc_max_validto_date%("LICENCE", "Temp PC", date);

/* Number of documents touching pp. */
export %number_of_doc_in_pp% =
  %number_of_doc%(fundamental.%pp_start%, fundamental.%pp_end%);

export %is_on_training_wop_start% = false;
export %is_on_training_wop_end% = false;


/*******************************************************************
**
** Section 8: Special Schedule
**
********************************************************************/
/*
Contents of special_schedules_set:
"ForbiddenAcFam", "Forbid a specific ac family",
"ForbiddenAct", "Forbid a specific activity (task code or task group code) or acting below rank (LOWER)",
"TripLength", "Only allow trips within the interval",
"TimeOff", "Forbid on duty activities on the defined dates and weekdays",
"CheckIn", "Forbid check in earlier than defined and on certain weekdays",
"CheckOut", "Forbid check out later than defined and on certain weekdays",
"MaxDuty", "Only allow duties with duty time less than defined",
"MaxLegs", "Only allow duties with nr legs less than defined",
"MaxBlh", "Only allow legs with block time less than defined",
"ForbiddenDest", "Forbid legs to specific destination",
"PartTime", "Part-time degree",
"SingleFUnbid",  "Bid avoiding single F days",
"SpecialMealCode", "Special meal preference",
"LimitLHUnbid", "Bid disregarding LH trip limit for part time crew"

 * Fieds in table special_schedules:
 * Used by:      crewid, validfrom, validto, str_val, int_from, int_to, time_val
 * ForbiddenAct     x        x           x        x        -         -       -
 * TripLength       x        x           x        -        x         x       -
 * TimeOff          x        x           x        -        x         x       -
 * CheckIn          x        x           x        -        x         x       x
 * CheckOut         x        x           x        -        x         x       x
 * MaxDuty          x        x           x        -        -         -       x
 * MaxLegs          x        x           x        -        -         x       -
 * MaxBlh           x        x           x        -        -         -       x
 * ForbiddenDest    x        x           x        x        -         -       -
 * SingleFUnbid     x        x           x        -        -         -       -
 * SpecialMealCode  x        x           x        x        -         -       -
 * LimitLHUnbid     x        x           x        -        -         -       -
 *
 * NB! int_from, int_to have different meaning depending on what type is used.
 *       - for types "TimeOff", "CheckIn", "CheckOut", the valid weekdays
 *         interval should be entered
 *         (e.g. "TimeOff every friday" will be entered as 5, 5).
 *       - for type "TripLength", the valid trip length interval should
 *         be entered
 *         (e.g. "Only 2 and 3 day trips allowed" will be entered as 2, 3).
 */
%spec_sched_descr%(Int nr) =
  let type = %spec_sched_type%(nr),
  days = calendar.%weekdays_string%(
                                    default(%spec_sched_int_from%(nr),0),
                                    default(%spec_sched_int_to%(nr),0)
                                    );
  if (type = "ForbiddenAct") then
    concat("Forbidden activity: ",%spec_sched_str%(nr))
  else if (type = "ForbiddenDest") then
    concat("Forbidden destination: ",%spec_sched_str%(nr))
  else if (type = "ForbiddenAcFam") then
    concat("Forbidden AC-family: ",%spec_sched_str%(nr))
  else if (type = "TripLength") then
    if (%spec_sched_int_from%(nr) = %spec_sched_int_to%(nr)) then
      format_int(%spec_sched_int_from%(nr), "Only trips of %d days allowed")
    else
      concat(
           format_int(%spec_sched_int_from%(nr), "Only trips of %d "),
           format_int(%spec_sched_int_to%(nr), "to %d days allowed"))
  else if (type = "TimeOff") then
    concat("Time off every ", days)
  else if (type = "CheckIn") then
    concat("Check-Ins no earlier than ",
           format_time(%spec_sched_time%(nr), "%H:%02M"),
           ", every ",days)
  else if (type = "CheckOut") then
    concat("Check-Outs no later than ",
           format_time(%spec_sched_time%(nr), "%H:%02M"),
           ", every ",days)
  else if (type = "MaxDuty") then
    format_time(%spec_sched_time%(nr), "Max duty time: %H:%02M")
  else if (type = "MaxBlh") then
    format_time(%spec_sched_time%(nr), "Max block time for legs: %H:%02M")
  else if (type = "MaxLegs") then
    format_int(%spec_sched_int_to%(nr), "Max legs in duty: %i")
  else if (type = "PartTime") then
    format_int(%spec_sched_int_to%(nr), "Parttime factor: %i%%")
  else if (type = "SingleFUnbid") then
    "Bid avoiding single F days"
  else if (type = "LimitLHUnbid") then
    "Bid disregarding LH trip limit for part time crew"
  else "";

/* Standard lookup */
table special_schedule_lookup_table(Int nr) =
  %id%, %pp_start%, %pp_end%, nr ->
    String %spec_sched_type%,
    Abstime %spec_sched_start%,
    Abstime %spec_sched_end%,
    String %spec_sched_str%,
    Int %spec_sched_int_from%,
    Int %spec_sched_int_to%,
    Reltime %spec_sched_time%,
    String %spec_sched_si%;

  external %spec_sched_table%;
  "crewid", <"validto", >"validfrom", "match_number" ->
    "typ", "validfrom", "validto", "str_val", "int_from", "int_to", "time_val", "si";
  -, -, -, - -> void_string, void_abstime, void_abstime, void_string, void_int, void_int, void_reltime, void_string;
end

/* Table lookup returning the crew id if crew has any matching row
 * of any type in the table. Used as a quick check in rule validity. */
export %has_spec_sched% = %spec_sched_count% > 0;
export %spec_sched_count% = default(%_spec_sched_count%,0);
table spec_sched_count =
  %id%, %pp_start%, %pp_end% ->
    Int %_spec_sched_count%;
  external %spec_sched_table%;
  "crewid", <"validto", >"validfrom" ->
    count("row_number");

end

/* Table lookup returning the crew id if crew has any matching row
 * of a specified type at a specified time. Used in rule validity. */
export %has_spec_sched_in_trip%(String typ) = not void(%_has_spec_sched_in_trip%(typ));
table crew_has_spec_sched_in_trip(String typ) =
  %id%, typ, trip.%start_day%, trip.%end_day% ->
    String %_has_spec_sched_in_trip%;
  external %spec_sched_table%;
  crewid, typ, <validto, >=validfrom ->
    crewid;
  -, -, -, - -> void_string;
end

/* Table lookup returning the crew id if the input str matches a row.
 * - Used for types: ForbiddenAcFam, ForbiddenAct, ForbiddenDest */
table spec_sched_str(String typ, String str_val, Abstime date) =
  %id%, typ, str_val, date ->
    export String %spec_sched_limit_str%;
  external %spec_sched_table%;
  crewid, typ, str_val, (validfrom, validto( ->
    crewid;
  -, -, -, - -> void_string;
end

table spec_sched_none(String type, Abstime date) =
  %id%, type, date ->
    export String %spec_sched_limit_none%;
  external %spec_sched_table%;
  crewid, typ, (validfrom, validto( ->
    crewid;
  -, -, - -> void_string;
end

export %spec_sched_unbid_single_f%(Abstime d) =
  not void(%spec_sched_limit_none%("SingleFUnbid",d));

export  %spec_sched_unbid_limit_lh%(Abstime d) =
  not void(%spec_sched_limit_none%("LimitLHUnbid", d));


/* Table lookup returning the int_to and time_val if the input int is within the
 * intervals defined in the table.
 * - Used for types: TripLength, TimeOff, CheckIn, CheckOut */
table spec_sched_int_time(String typ, Int int_val, Abstime date) =
  %id%, typ, int_val, date ->
    export Int %spec_sched_limit_int%,
    export Reltime %spec_sched_limit_time%;
  external %spec_sched_table%;
  crewid, typ, (int_from, int_to), (validfrom, validto( ->
    int_to, time_val;
  -, -, -, - -> void_int, void_reltime;
end

/*
** Table lookup to check if the trip spans the valid date period.
** Used for types: CheckIn, CheckOut
*/
table spec_sched_limit_span(String typ) =
  %id%, typ, trip.%start_day%, trip.%end_day% ->
    export Reltime %spec_sched_limit_span_time%,
    export Abstime %spec_sched_limit_valid_from%;
  external %spec_sched_table%;
  crewid, typ, < validto, >= validfrom -> time_val, validfrom;
     -  ,  - ,     -    ,       -      -> void_reltime, void_abstime;
end

/* Table lookup returning the integer and time limits.
 * - Used for types: MaxDuty, MaxLegs, MaxBlh, PartTime */
table spec_sched(String typ, Abstime date) =
  %id%, typ, date ->
    export Int %_spec_sched_limit_int_from%,
    export Int %_spec_sched_limit_int_to%,
    export Reltime %_spec_sched_limit_time%,
    export Abstime %_spec_sched_limit_validfrom%,
    export Abstime %_spec_sched_limit_validto%,
    String %_spec_sched_limit_str_val%;
  external %spec_sched_table%;
  crewid, typ, (validfrom, validto( ->
    int_from, int_to, time_val, validfrom, validto, str_val;
  -, -, - -> void_int, void_int, void_reltime, void_abstime, void_abstime, void_string;
end

export %special_meal_code%(AbsTime date) =
    %_spec_sched_limit_str_val%("SpecialMealCode", date);

/****************************************************************
 * Section 9: Restrictions
 ***************************************************************/
table crew_restriction(Int ix) =
  %id%, ix ->
    export String  %restr_type%,
    export String  %restr_subtype%,
    export Abstime %restr_validfrom%,
    export Abstime %restr_validto%;
  external %restriction_table%;
  crew, match_number ->
    rest_typ, rest_subtype, validfrom, validto;
  -, - -> void_string, void_string, void_abstime, void_abstime;
end

export %last_training_start_before_date%(Abstime date) =
  max(times(%restr_rows%), %restr_validfrom%(%times_index_0%)) where
      (%restr_type%(%times_index_0%) = "TRAINING" and
       %restr_validfrom%(%times_index_0%) <= date);

export %restr_rows% =
    count(times(100))
    while (not void(%restr_type%(%times_index_0%)));

/* Max iterations for restriction type at date */
table restriction_type_max_iter(String type, Abstime istart, Abstime iend) =
  %id%, type, istart, iend ->
    Int %_restriction_type_max_iter%;
  external %restriction_table%;
  crew, rest_typ, < validto, > validfrom -> count(row_number);
end

table restriction_max_iter(Abstime date) =
  %id%, date ->
    Int %_restriction_max_iter%;
  external %restriction_table%;
  crew, (validfrom, validto( -> count(row_number);
end

/* Get max iteration for each crew restriction */
export %restriction_max_iter%(Abstime date) =
  default(%_restriction_max_iter%(date), 0);

export %has_restriction_ix%(Abstime date, String type, String subtype, Int seq) =
  not void(%_has_restriction_ix%(date, type, subtype, seq));

export %restriction_type_ix%(Abstime date, Int seq) =
  default(%_restriction_type_ix%(date, seq), "");

export %restriction_subtype_ix%(Abstime date, Int seq) =
  default(%_restriction_subtype_ix%(date, seq),"");

export %any_restriction_subtype_ix%(Abstime date, Int seq, String qual) =
  default(
    default(%_restriction_subtype_ix%(date, seq),
                  %qrestr_restr_type_ival%(seq, date, date))
  ,
    "");

%restriction_type_subtype_ix%(String type, Abstime date, Int seq) =
  default(%_restriction_type_subtype_ix%(type, date, seq),"");

table crew_restriction_type_subtype(Abstime date, String type, String subtype, Int seq) =
  %id%, date, type, subtype, seq ->
    String %_has_restriction_ix%;
  external %restriction_table%;
  crew, (validfrom,validto(, rest_typ, rest_subtype, match_number ->
    crew;
  -, -, -, -, - -> void_string;
end

table crew_restriction_subtype(Abstime date, Int seq) =
  %id%, date, seq ->
    String %_restriction_type_ix%,
    String %_restriction_subtype_ix%;
  external %restriction_table%;
  crew, (validfrom,validto(, match_number ->
    rest_typ, rest_subtype;
  -, -, - -> void_string, void_string;
end

table crew_restriction_type_subtype_ix(String typ, Abstime date, Int seq) =
  %id%, typ, date, seq ->
    String %_restriction_type_subtype_ix%;
  external %restriction_table%;
  crew, rest_typ, (validfrom, validto(, match_number ->
     rest_subtype;
  -, -, -, - -> void_string;
end

table crew_restriction_type_table(String typ, Abstime date) =
  %id%, typ, date ->
    export Abstime %restriction_type_startdate%,
    export Abstime %restriction_type_enddate%;
  external %restriction_table%;
  crew, rest_typ, (validfrom, validto( ->
    validfrom, validto;
  -, -, - -> void_abstime, void_abstime;
end

table crew_restriction_subtype_date_table(String typ, String subtype, Abstime date) =
  %id%, typ, subtype, date ->
    export String %_has_restriction_subtype%,
    export Abstime %restriction_subtype_startdate%,
    export Abstime %restriction_subtype_enddate%;
  external %restriction_table%;
  crew, rest_typ, rest_subtype, (validfrom, validto( ->
    rest_subtype, validfrom, validto;
  -, -, -, - -> void_string, void_abstime, void_abstime;
end

table id_restriction_subtype_date_table(String id, String typ, String subtype, Abstime date) =
  id, typ, subtype, date ->
    export String %_id_has_restriction_subtype%,
    export Abstime %id_restriction_subtype_startdate%,
    export Abstime %id_restriction_subtype_enddate%;
  external %restriction_table%;
  crew, rest_typ, rest_subtype, (validfrom, validto( ->
    rest_subtype, validfrom, validto;
  -, -, -, - -> void_string, void_abstime, void_abstime;
end

/* The acqual is in field qual_typ/qual_subtype
   The restriction is in field acqrestr_typ/acqrestr_subtype */
table crew_qual_restr_date_table(String qual_typ, String qual_subtype,
                                   String restr_typ, String restr_subtype, Abstime date) =
  %id%, qual_typ, qual_subtype, restr_typ, restr_subtype, date ->
    export String %_has_acqrestr%,
    export Abstime %acqual_restriction_startdate%,
    export Abstime %acqual_restriction_enddate%;
  external %restr_acqual_table%;
  crew, qual_typ, qual_subtype, acqrestr_typ, acqrestr_subtype, (validfrom, validto( ->
    acqrestr_typ, validfrom, validto;
  -, -, -, -, -, - -> void_string, void_abstime, void_abstime;
end

table crew_restriction_in_interval(Abstime i_start, Abstime i_end) =
  %id%, i_start, i_end ->
    Int %_nr_restrictions%;
  external %restriction_table%;
  crew, < validto, >= validfrom -> count(row_number);
end

table crew_restriction_acqual(Int ix, Abstime i_start, Abstime i_end) =
  %id%, ix, i_start, i_end ->
    export String  %qrestr_qual_type_ival%,            /* ACQUAL etc. */
    export String  %qrestr_qual_subtype_ival%,          /* A3, 90 etc. */
    export String  %qrestr_restr_type_ival%,      /* NEW etc. */
    export String  %qrestr_restr_subtype_ival%,   /* ACTYPE etc. */
    export Abstime %qrestr_validfrom_ival%,
    export Abstime %qrestr_validto_ival%;
  external %restr_acqual_table%;
  crew, match_number, <validto, >=validfrom ->
    qual_typ, qual_subtype, acqrestr_typ, acqrestr_subtype, validfrom, validto;
  -, -, -, - -> void_string, void_string, void_string, void_string, void_abstime, void_abstime;
end

%_nr_qrestrictions%(Abstime i_start, Abstime i_end) =
    count(times(100))
    while (not void(%qrestr_qual_type_ival%(%times_index_0%, i_start, i_end)));

export %qrestr_qual_type%(int ix) =
    %qrestr_qual_type_ival%(ix, %pp_start%, %pp_end%-0:01);
export %qrestr_qual_subtype%(int ix) =
    %qrestr_qual_subtype_ival%(ix, %pp_start%, %pp_end%-0:01);
export %qrestr_restr_type%(int ix) =
    %qrestr_restr_type_ival%(ix, %pp_start%, %pp_end%-0:01);
export %qrestr_restr_subtype%(int ix) =
    %qrestr_restr_subtype_ival%(ix, %pp_start%, %pp_end%-0:01);
export %qrestr_validfrom%(int ix) =
    %qrestr_validfrom_ival%(ix, %pp_start%, %pp_end%-0:01);
export %qrestr_validto%(int ix) =
    %qrestr_validto_ival%(ix, %pp_start%, %pp_end%-0:01);

export %qrestr_validto_excl%(int ix) =
    %qrestr_validto_ival%(ix, %pp_start%, %pp_end%-0:01) - 24:00;

export %qrestr_rows% =
    count(times(100))
    while (not void(%qrestr_qual_type%(%times_index_0%)));

export %qrestr_new_start_in_ival%(abstime start_t, abstime end_t) =
    first(times(%_nr_qrestrictions%(start_t,end_t)),
        %qrestr_validfrom%(%times_index_0%))
    where(%qrestr_restr_type_ival%(%times_index_0%,start_t, end_t) = "NEW");

export %qrestr_new_end_in_ival%(abstime start_t, abstime end_t) =
    first(times(%_nr_qrestrictions%(start_t,end_t)),
        %qrestr_validto%(%times_index_0%))
    where(%qrestr_restr_type_ival%(%times_index_0%,start_t, end_t) = "NEW");

export %qrestr_new_end%(Abstime start, Abstime stop) =
    first(times(%_nr_qrestrictions%(start, stop)),
        %qrestr_validto%(%times_index_0%))
    where(%qrestr_restr_type_ival%(%times_index_0%,start, stop) = "NEW" and
          %qrestr_validfrom%(%times_index_0%) <= stop and
          %qrestr_validto%(%times_index_0%) > start);

export %qrestr_new_start%(Abstime start, Abstime stop) =
    first(times(%_nr_qrestrictions%(start, stop)),
          %qrestr_validfrom%(%times_index_0%))
    where(%qrestr_restr_type_ival%(%times_index_0%,start, stop) = "NEW" and
          %qrestr_validfrom%(%times_index_0%) <= stop and
          %qrestr_validto%(%times_index_0%) > start);

table crew_restriction_acqual_in_interval(Abstime i_start, Abstime i_end, String acqual) =
  %id%, acqual, i_start, i_end ->
    Int %_nr_restrictions_on_ac_type%;
  external %restr_acqual_table%;
  crew, qual_subtype, < validto, >= validfrom -> count(row_number);
end

table crew_restriction_any_acqual_in_interval(Abstime i_start, Abstime i_end) =
  %id%, i_start, i_end ->
    Int %_nr_restrictions_on_any_ac_type%;
  external %restr_acqual_table%;
  crew, < validto, >= validfrom -> count(row_number);
end

table restriction_subtype_in_ival(String typ, String subtype, Abstime istart, Abstime iend) =
  %id%, typ, subtype, istart, iend ->
    String %_has_restr_subtype_in_ival%,
    export Abstime %_restr_subtype_startdate_in_ival%,
    export Abstime %_restr_subtype_enddate_in_ival%;
  external %restriction_table%;
  crew, rest_typ, rest_subtype, <validto, >=validfrom ->
    crew, validfrom, validto;
  -, -, -, -, - -> void_string, void_abstime, void_abstime;
end

/* */
export %restrs_type_at_date%(String type, Abstime date) =
  cat(times(%restriction_type_max_iter%(type,date)),
      %restriction_type_subtype_ix%(type,date,%times_index_0%), " ");

%test_medical% = %restrs_type_at_date%("MEDICAL", 01MAR2008);

export %has_restr_subtype_in_ival%(String typ, String subtype, Abstime istart, Abstime iend) =
  not void(%_has_restr_subtype_in_ival%(typ, subtype, istart, iend)) or
  (typ = "NEW" and subtype = "ACTYPE"
   and %_nr_restrictions_on_any_ac_type%(istart, iend) > 0);

export %has_restriction%(String typ, String subtype, Abstime date) =
  %has_restriction_subtype%(typ, subtype, date);

%id_has_restriction%(String id, String typ, String subtype, Abstime date) =
    not void(%_id_has_restriction_subtype%(id, typ, subtype, date));

export %has_restriction_subtype%(String typ, String subtype, Abstime date) =
  not void(%_has_restriction_subtype%(typ, subtype, date)) or
  (typ = "NEW" and subtype = "ACTYPE"
   and %_nr_restrictions_on_any_ac_type%(date, date) > 0);

export %has_qual_restriction_subtype%(String restr_typ, String restr_subtype,
                                      String qual_typ, String qual_subtype, Abstime date) =
    not void(%_has_acqrestr%(qual_typ, qual_subtype, restr_typ, restr_subtype, date));

/* Has any restriction at all */
export %has_any_restriction%(Abstime date) =
  %nr_restrictions%(date) > 0;

%has_any_restriction_on_ac_type%(Abstime date, String ac_type) =
  %nr_restrictions_on_ac_type%(date, ac_type) > 0;

export %has_any_restriction_in_pp% = %nr_restrictions_in_pp% > 0;
export %has_any_restriction_leg_start% =
  %has_any_restriction%(leg.%start_hb%) or
  %has_any_restriction_on_ac_type%(leg.%start_hb%, leg.%qual%);
export %has_new_restriction_on_leg% =
    %has_any_restriction_on_ac_type%(leg.%start_hb%, leg.%qual%);
/* Nr restrictions at date */
export %nr_restrictions_leg_start% = %nr_restrictions%(leg.%start_hb%);
export %nr_restrictions%(Abstime date) =
  default(%_nr_restrictions%(date, date), 0) +
  %_nr_qrestrictions%(date, date);

%nr_restrictions_on_ac_type%(Abstime date, String ac_type) =
  default(%_nr_restrictions_on_ac_type%(date, date, ac_type), 0);

/* Number of restrictions touching pp. */
export %nr_restrictions_in_pp% = %nr_restrictions_in_ival%(%pp_start%, %pp_end%);
export %nr_restrictions_in_ival%(Abstime istart, Abstime iend) =
  default(%_nr_restrictions%(istart, iend), 0) +
  %_nr_qrestrictions%(istart, iend);

/* Get max iteration for crew restriction with type */
export %restriction_type_max_iter%(String type, Abstime date) =
  default(%_restriction_type_max_iter%(type, date, date), 0);

/* Shortcut to test if any restrictions of a type exists in pp */
/* 2008-08-18 Janne C. WPCCR 733.
   Adding check in restriction_acqual_table as well*/
%has_restriction_type_in_pp%(String type) =
  default(%_restriction_type_max_iter%(type, %pp_start%, %pp_end%) > 0, false) or
  (type = "NEW" and %_nr_restrictions_on_any_ac_type%(%pp_start%, %pp_end%) > 0);

export %has_restriction_type%(Abstime date, String type) =
  default(%_restriction_type_max_iter%(type, date, date) > 0, false) or
  (type = "NEW" and %_nr_restrictions_on_any_ac_type%(date, date) > 0);

%has_restriction_subtype_in_pp%(String type, String subtype) =
  %has_restr_subtype_in_ival%(type, subtype, %pp_start%, %pp_end%);

export %has_qual_restr_any_qual_in_pp% =
  %_nr_restrictions_on_any_ac_type%(%pp_start%, %pp_end%) > 0;

/*
 * "NEW" restrictions
 */
export %has_restr_new%(Abstime date) =
  %restriction_type_max_iter%("NEW", date) > 0;
export %has_restr_new_new%(Abstime date) =
  %has_restriction%("NEW", "NEW", date);
export %has_restr_new_refr%(Abstime date) =
  %has_restriction%("NEW", "REFR", date);
export %has_restr_new_6m%(Abstime date) =
  %has_restriction%("NEW", "6M", date);
export %has_restr_new_rank%(Abstime date) =
  %has_restriction%("NEW", "RANK", date);

export %id_has_restr_new_rank%(String id, AbsTime date) =
    %id_has_restriction%(id, "NEW", "RANK", date);

export %has_qual_restr_new_actype%(Abstime date, String acqual) =
  %has_qual_restriction_subtype%("NEW", "ACTYPE", "ACQUAL", acqual, date);
export %new_actype_restr_on_leg_end_date% =
    %acqual_restriction_enddate%("ACQUAL", leg.%qual%, "NEW", "ACTYPE", leg.%start_hb%);

/*Returns the startdate of the NEW+ACTYPE restriction on the current leg, can void*/
export %new_actype_restr_on_leg_start_date% =
    %acqual_restriction_startdate%("ACQUAL", leg.%qual%, "NEW", "ACTYPE", leg.%start_hb%);
export %has_qual_restr_new_actype_any_qual%(Abstime date) =
  any(times(3),
      %has_qual_restr_new_actype%(date, %ac_qln%(date, %times_index_0%)));

/* Cache variables */
/* Any New */
export %has_restr_new_leg_start% =
  %has_restr_new%(leg.%start_hb%);
export %has_qual_restr_new_actype_or_rank_duty_start% =
  %has_qual_restr_new_actype%(duty.%start_hb%, duty.%qual%) or
  %has_restr_new_rank%(duty.%start_hb%) and crew.%rank_trip_start% = "FC";
export %has_qual_restr_new_actype_or_rank_now_date% =
  %has_qual_restr_new_actype_any_qual%(%now_date_hb%) or
  %has_restr_new_rank%(%now_date_hb%) and crew.%rank_at_date%(%now_date_hb%) = "FC";
export %has_restr_new_trip_start% =
  %has_restr_new%(trip.%start_hb%);
export %has_restr_new_in_pp% =
  %has_restriction_type_in_pp%("NEW");

/* New New */
export %has_restr_new_new_leg_start% =
  %has_restr_new_new%(leg.%start_hb%);
export %has_restr_new_new_duty_start% =
  %has_restr_new_new%(duty.%start_hb%);
export %has_restr_new_new_trip_start% =
  %has_restr_new_new%(trip.%start_hb%);
export %has_restr_new_new_in_pp% =
  %has_restriction_subtype_in_pp%("NEW", "NEW");

/* New Refr */
export %has_restr_new_refr_leg_start% =
  %has_restr_new_refr%(leg.%start_hb%);
export %has_restr_new_refr_trip_start% =
  %has_restr_new_refr%(trip.%start_hb%);
export %has_restr_new_refr_in_pp% =
  %has_restriction_subtype_in_pp%("NEW", "REFR");

/* New Ac type */

export %has_qual_restr_new_actype_on_leg% =
  %has_qual_restr_new_actype%(leg.%start_hb%, leg.%qual%);
export %has_qual_restr_new_actype_trip_start% =
  %has_qual_restr_new_actype%(trip.%start_hb%, trip.%qual%);
export %has_qual_restr_new_actype_in_pp% =
  %has_restriction_subtype_in_pp%("NEW", "ACTYPE");


/* New 6 months */
export %has_restr_new_6m_leg_start% =
  %has_restr_new_6m%(leg.%start_hb%);
export %has_restr_new_6m_in_pp% =
  %has_restriction_subtype_in_pp%("NEW", "6M");

/* New rank */
export %has_restr_new_rank_leg_start% =
  %has_restr_new_rank%(leg.%start_hb%);
export %has_restr_new_rank_duty_start% =
  %has_restr_new_rank%(duty.%start_hb%);
export %has_restr_new_rank_trip_start% =
  %has_restr_new_rank%(trip.%start_hb%);
export %has_restr_new_rank_pp_start% =
  %has_restr_new_rank%(%pp_start%);
export %has_restr_new_rank_in_pp% =
   %has_restriction_subtype_in_pp%("NEW", "RANK");

export %has_had_new_restriction_recently% =
  %has_restr_subtype_in_ival%("NEW", "ACTYPE", add_months(%pp_start%, -6), %pp_start%);

/*
 * Recent A4 for block_time_ilc_acc
 */
export %a4_qual_recently% =
  (%pp_start% - %qln_entry_date%("ACQUAL", "A4", %pp_end%)) / 24:00 <= 90;
  
  
/*
 * "MEDICAL" restrictions
 */
export %has_restr_medical%(Abstime date) =
  %restriction_type_max_iter%("MEDICAL", date) > 0;
export %has_restr_medical_medic%(Abstime date) =
  %has_restriction%("MEDICAL", "MEDICAL", date);
export %has_restr_medical_loail%(Abstime date) =
  %has_restriction%("MEDICAL", "LOAIL", date);

/* Cache variables */
export %has_restr_medical_leg_start% =
  %has_restr_medical%(leg.%start_hb%);
export %has_restr_medical_in_pp% =
  %has_restriction_type_in_pp%("MEDICAL");

export %has_restr_medical_medic_leg_start% =
  %has_restr_medical_medic%(leg.%start_hb%);
export %has_restr_medical_medic_in_pp% =
  %has_restriction_subtype_in_pp%("MEDICAL", "MEDICAL");

/*
* 60plus restrictipons
*/
/* This is not a type that is defined in crew_restriction table, but is
 * calculated dynamically based on birth_date looked up in crew table.
 * Cabin crew shouldn't have this restriction. /EkG */
export %has_restr_medical_60plus%(Abstime date) =
  default(%is_pilot% and
  (date > add_years(%birthday%, 60)),false)
  ;

/*
 * "TRAINING" restrictions
 */
export %has_restr_training%(Abstime date) =
  %restriction_type_max_iter%("TRAINING", date) > 0;
export %has_restr_training_capt%(Abstime date) =
  %has_restriction%("TRAINING", "CAPT", date);
export %has_restr_training_dct%(Abstime date) =
  %has_restriction%("TRAINING", "DCT", date);
export %has_restr_training_foc%(Abstime date) =
  %has_restriction%("TRAINING", "FOC", date);
export %has_restr_training_refr%(Abstime date) =
  %has_restriction%("TRAINING", "REFR", date);
export %has_restr_training_dct_foc_refr%(Abstime date) =
  %has_restr_training_dct%(date) or %has_restr_training_foc%(date) or %has_restr_training_refr%(date);

/* Cache variables */
export %has_restr_training_wop_start% =
  %has_restr_training%(wop.%start_hb%);
export %has_restr_training_trip_start% =
  %has_restr_training%(trip.%start_hb%);
export %has_restr_training_leg_start% =
  %has_restr_training%(leg.%start_hb%);
export %has_restr_training_in_pp% =
  %has_restriction_type_in_pp%("TRAINING");

export %has_restr_training_capt_dct_foc_refr_wop_start% =
  %has_restr_training_capt%(wop.%start_hb%) or
  %has_restr_training_dct_foc_refr%(wop.%start_hb%);

export %has_restr_training_capt_leg_start% =
  %has_restr_training_capt%(leg.%start_hb%);
export %has_restr_training_capt_in_pp% =
  %has_restriction_subtype_in_pp%("TRAINING", "CAPT");

export %has_restr_training_dct_leg_start% =
  %has_restr_training_dct%(leg.%start_hb%);

export %has_restr_training_foc_leg_start% =
  %has_restr_training_foc%(leg.%start_hb%);

export %has_restr_training_refr_leg_start% =
  %has_restr_training_refr%(leg.%start_hb%);

export %has_restr_training_dct_foc_refr_leg_start% =
  %has_restr_training_dct_foc_refr%(leg.%start_hb%);

export %has_restr_training_dct_foc_refr_in_pp% =
  %has_restr_training_dct_in_pp% or %has_restr_training_foc_in_pp% or %has_restr_training_refr_in_pp%;

export %has_restr_training_dct_in_pp% =
  %has_restriction_subtype_in_pp%("TRAINING", "DCT");

export %has_restr_training_foc_in_pp% =
  %has_restriction_subtype_in_pp%("TRAINING", "FOC");

export %has_restr_training_refr_in_pp% =
  %has_restriction_subtype_in_pp%("TRAINING", "REFR");

export %restr_training_dct_end%(Abstime date) =
  default(%restriction_subtype_enddate%("TRAINING", "DCT", date),1jan1986);

export %restr_training_dct_start%(Abstime date) =
  default(%restriction_subtype_startdate%("TRAINING", "DCT", date),1jan1986);

export %restr_training_foc_end%(Abstime date) =
  default(%restriction_subtype_enddate%("TRAINING", "FOC", date),1jan1986);

export %restr_training_foc_start%(Abstime date) =
  default(%restriction_subtype_startdate%("TRAINING", "FOC", date),1jan1986);

export %restr_training_refr_end%(Abstime date) =
  default(%restriction_subtype_enddate%("TRAINING", "REFR", date),1jan1986);

export %restr_training_refr_start%(Abstime date) =
  default(%restriction_subtype_startdate%("TRAINING", "REFR", date),1jan1986);

export %restr_new_new_start%(Abstime date) =
  default(%restriction_subtype_startdate%("NEW", "NEW", date),1jan1986);

export %restr_new_new_end%(Abstime date) =
  default(%restriction_subtype_enddate%("NEW", "NEW", date),1jan1986);

/****************************************************************
 * Section 10: Crew landings.

  There are three possible outcomes of %active_landing%:
  true  - the crew exists in the table and landing is active
  false - the crew is in the table and landing not active
  void  - the crew is not in the table

  Special cases

  Two flight entries for the same crew, %active_landing% -> true.

  leg                           crew    airport nr_landings  activ
  20070910+SK 001589 +ARN   19265   ARN 0        false
  20070910+SK 001589 +ARN   19265   BRU 1        true

  Two flight entries for the same crew, %active_landing% -> false.
  20070910+SK 001589 +ARN   19265   ARN 0        false
  20070910+SK 001589 +ARN   19265   BRU 0        false

  Return to OSL by 38921 and 38921 landed at TRD %active_landing% -> true for both crew
  20070915+SK 000336 +OSL   38921   OSL 1   true
  20070915+SK 000336 +OSL   37271   OSL 0   false
  20070915+SK 000336 +OSL   37271   TRD 1   true
  20070915+SK 000336 +OSL   38921   TRD 0   false

  %nr_landings% returns the number from column nr_landings if %active_landing% = true
  else 0.

 ***************************************************************/
/*  Crew landing table is parallel-loaded to rave on load, therefor it
*   is vital that the resorce "default", "config", "ParallelLoad" has the value
*   "crew_landing;crew.crew_landing2:crew_landing;". If you change teh tabel value
*   DO NOT FORGET TO UPDATE RESOURCE in
*   Resources/CarmResources/Customer.etab
*/
table crew_landing(Abstime udor, String fd, String adep, String crew, String ades) =
  udor, fd, adep, crew, ades -> Int %__nr_landings%;
  external %crew_landings_table%;
  leg_udor, leg_fd, leg_adep, crew, airport -> max(nr_landings);
end
/*  Crew landing table is parallel-loaded to rave on load, therefor it
*   is vital that the resorce "default", "config", "ParallelLoad" has the value
*   "crew_landing;crew.crew_landing2:crew_landing;". If you change teh tabel value
*   DO NOT FORGET TO UPDATE RESOURCE in
*   Resources/CarmResources/Customer.etab
*/
table crew_landing2 =
  leg.%udor%,
  leg.%flight_descriptor%,
  leg.%start_station%,
  leg.%end_station% -> Int %_nr_landings_any_crew%;
  external %crew_landings_table%;
  leg_udor, leg_fd, leg_adep, airport -> max(nr_landings);
end

/* This variable will be true if the flight is in landing table for anyone */
export %landing_any_crew% =
  default(%_nr_landings_any_crew%, 0) > 0;

/* This variable will be true if someone else than this crew lands */
%landing_other_crew% =
  %landing_any_crew% and %nr_landings% = 0;

/* This variable will be true if this crew lands, false if someone else is
   logged as landing, void if flight not logged at all. */
export %landing_this_crew% =
  if %landing_any_crew% then
    %nr_landings% > 0
  else if leg.%udor% < %now_date% then
    %nr_landings% > 0
  else void_bool;

export %active_landing% =
  if void(%_nr_landings%) then
    void_bool
  else
    %_nr_landings% > 0;

export %nr_landings% = default(%_nr_landings%, 0);

%_nr_landings% = %__nr_landings%(leg.%udor%, leg.%flight_descriptor%,
                                 leg.%start_station%, %id%, leg.%end_station%);

/****************************************************************
 * Section 11: Crew training need
 ***************************************************************/
/* Moved to training module */

/****************************************************************
 * Section 12: Subcategories
 ***************************************************************/

/*
**  POS.   SUB                         CIS
**  SHORT  CAT RES1  RES2  QUAL1 QUAL2 POS ID
**  ====== === ===== ===== ===== ===== ======
**  Candi  A   101                     101
**  LOA89  A   113                     113
**  New    A   208                     208
**  BCP    B               102         102
**  CP     C               103         103
**  CP/BC  C               120         120
**  Instr  I               104         104
**  TRI    I               123         123
**  TRE    I               128         128
**  SFI    I               129         129
**  SFE    I               130         130
**  InsTe  I               104   116   134
**  Linst  I               212         212
**  Spec   J   207                     207
**  Spec   K   111                     111
**  Medic  M   105                     105
**  LCPM   M   105         110         135
**  InstM  M   105         104         136
**  60+M   M   105   122               137
**  New    N   106                     106
**  New30  N   203                     203
**  New    N   210                     210
**  New    N   213                     213
**  Opt    O               107         107
**  Fleet  P               104         108
**  LFUS   Q               121         121
**  Restr  R   109                     109
**  LOAIL  R   114                     114
**  LCP    S               110         110
**  NoSCC  S   204                     204
**  Test   T               116         116
**  Train  T   205                     205
**  DCT    U   117                     117
**  New90  V   206                     206
**  New6M  V   211                     211
**  Retir  X   199                     199
**  -MDCT  Y   117   105               118
**  60+    +   122                     122 Removed 2015-06-26
**  LCP60  +   122         110         124
**  INS60  +   122         125         125
**  DCT60  +   122   117               127
**  New60  +   122   106               131
**  LINST                  126         126
**  Dual                   214         214    Either seat
**
**    *** Will be phased out ***
**  Temp   C   209                     209
**
**    *** No position ***
**  -                                  100
**
**    *** Not used ***
**  CandM  A                           133
**  Adm    C                           201
**  FPFDA  Q                           115
**  RestM  R                           132
**  NewV   V                           112
**  TestM  Z                           119
**
** [acosta:08/067@16:22] NOTE: Made changes to sub-categories to match new
** data model. Candi -> CAPT
*/

export %sub_category_leg_start% =
  %sub_category%(leg.%start_hb%);

/* Used for CC */
export %sub_category%(abstime date) =
  /*
   * Note: the order is very important.
   */
  if      %is_subcat_x%(date) then "X"
  else if %is_subcat_r%(date) then "R"
  else if %is_subcat_y%(date) then "Y"
  else if %is_subcat_m%(date) then "M"
  else if %is_subcat_plus%(date) then "+"
  else if %is_subcat_p%(date) then "P"
  else if %is_subcat_b%(date) then "B"
  else if %is_subcat_c%(date) then "C"
  else if %is_subcat_o%(date) then "O" /* opt before instructor */
  else if %is_subcat_i%(date) then "I"
  else if %is_subcat_j%(date) then "J"
  else if %is_subcat_q%(date) then "Q"
  else if %is_subcat_n%(date) then "N"
  else if %is_subcat_v%(date) then "V"
  else if %is_subcat_a%(date) then "A"
  else if %is_subcat_s%(date) then "S"
  else if %is_subcat_t%(date) then "T"
  else if %is_subcat_f%(date) then "F"
  else "";

/* Used for FC */
export %sub_category_fc%(abstime date) =
    if %is_subcat_x%(date) then "X"
    else concat(%rest_additional_info%(date), %rest_main_info%(date), %age_notice%(date));

%rest_additional_info%(abstime date) =
  /*
   * Note: the order is very important.
   */
  if %is_subcat_p%(date) then "P"
  else if %is_subcat_b%(date) then "B"
  else if %is_subcat_c%(date) then "C"
  else if %is_subcat_o%(date) then "O" /* opt before instructor */
  else if %is_subcat_i%(date) then "I"
  else if %is_subcat_j%(date) then "J"
  else if %is_subcat_q%(date) then "Q"
  else if (%is_subcat_n%(date) and not %is_subcat_y%(date)) then "N"
  else if %is_subcat_v%(date) then "V"
  else if (%is_subcat_a%(date) and not %is_subcat_y%(date)) then "A"
  else if %is_subcat_s%(date) then "S"
  else if %is_subcat_t%(date) then "T"
  else if %is_subcat_f%(date) then "F"
  else "";

%rest_main_info%(abstime date) =
   if %is_subcat_r%(date) then "R"
   else if %is_subcat_y%(date) then "Y"
   else if %is_subcat_m%(date) then "M"
   else "";

%age_notice%(abstime date) =
  if %is_subcat_plus%(date) then "+"
  else "";

%is_subcat_y%(Abstime d) =
  /* M + (A or N) */
  %is_subcat_m%(d) and
  (%is_subcat_a%(d) or %is_subcat_n%(d));

%is_subcat_a%(abstime d) =
  /* Candidate .OR. LA89 in PRE .OR. C/A New without conv check.*/
  /* [acosta:08/067@16:24] Removed 'MEDICAL' + 'LOA89' (CIS 113)  */
  /* [acosta:08/067@16:24] Removed 'NEW' + 'New' (CIS 208) */
  /* robertt 09Sep08 added TRAINING+CAPT, WP Int 200 */
  /* mahdiab 01Mar16 added TRAINING+FOC */
  /* mahdiab 01Mar16 added TRAINING+REFR */
  %has_restriction%("NEW", "CAPT", d)
  or
  %has_restriction%("TRAINING", "CAPT", d)
  or
  %has_restriction%("TRAINING", "DCT", d)
  or
  %has_restriction%("TRAINING", "FOC", d)
  or
  %has_restriction%("TRAINING", "REFR", d);

%is_subcat_b%(abstime d) =
  /* is POSITION and BCP */
  %has_qln%("POSITION", "BCP", d);

%is_subcat_c%(abstime d) =
  /* Is Base Chief Pilot .OR. Chief Pilot .OR. Dep. Chief
   * Pilot .OR. POSITION that is CP/BC
   * [acosta:08/067@16:27] Removed 'POSITION' + 'CP/BC' (CIS 120)
   */
  if %flight_crew% then %has_qln%("POSITION", "CP", d) else
  %has_qln%("POSITION", "MONITOR", d) or %has_qln%("POSITION", "LEAD OK3", d);

%is_subcat_f%(abstime d) =
  %has_qln%("POSITION", "F-STEWARD", d);

%is_subcat_i%(abstime d) =
  /* crew belongs to a number of instructor positions */
  /* [acosta:08/067@16:29] Renamed Instr -> INSTR (CIS 104),
   * [acosta:08/067@16:30] Renamed Linst -> LINST (CIS 212)
   * [acosta:08/067@16:31] Added 'INSTRUCTOR', 'CRM' (CIS 217).
   */
  %has_qln%("INSTRUCTOR", "INSTR", d)
  or
  %has_qln%("INSTRUCTOR", "TRI", d)
  or
  %has_qln%("INSTRUCTOR", "TRE", d)
  or
  %has_qln%("INSTRUCTOR", "SFI", d)
  or
  %has_qln%("INSTRUCTOR", "SFE", d)
  or
  %has_qln%("INSTRUCTOR", "LINST", d)
  or
  %has_qln%("INSTRUCTOR", "CRM", d)
  or
  %has_qln%("INSTRUCTOR", "SUP", d)
  or
  %has_qln%("INSTRUCTOR", "OL", d)
  or
  %has_qln%("INSTRUCTOR", "REC", d)
  or
  %has_qln%("INSTRUCTOR", "OAA", d);

%is_subcat_j%(abstime d) =
  /* NOTE: originally: 'J' was for restriction '207' - "Speciel duty Agreement"
   * and 'K' for restriction '111' - "Speciel Agreement".  Since these can't be
   * separated now, all crew with any 'Spec' restriction will get the
   * subcategory 'J'.
   *
   * [acosta:08/067@16:37] NOTE: Nobody will have this subcat, our
   * data does not have the type AGREEMENT anymore.
   */
  %has_restriction%("AGREEMENT", "Spec", d);

%is_subcat_k%(abstime d) = %is_subcat_j%(d);

%is_subcat_m%(abstime d) =
  /* Has medical restriction */
  /* [acosta:08/067@16:41] Renamed 'Medic' -> 'MEDICAL' (CIS 105) */
  if %flight_crew% then %has_restriction%("MEDICAL", "MEDICAL", d) else
  %has_qln%("POSITION", "MENTOR", d) or %has_qln%("POSITION", "PMM", d);

%is_subcat_n%(abstime d) =
  /* Crew is new on A/C type .OR. not qualified for NG
   * .OR. "New" .OR. New CCM (30d after U-flight).
   * [acosta:08/067@16:52] Tried to fix this, but the info is not
   * sufficient...
   * Old definition CIS 106, 210, 213, 203 (New, New30)
   * New definition CIS 210, 213 (NEW, ACTYPE)
   */
  %has_restriction%("NEW", "NEW", d)
  or
  %has_restriction%("NEW", "ACTYPE", d)
  or
  %has_restriction%("NEW", "RANK", d);

%is_subcat_o%(abstime d) =
  /* Opt instructor */
  /* [acosta:08/067@16:55] Renamed 'Opt' -> 'OPT' (CIS 107) */
  %has_qln%("INSTRUCTOR", "OPT", d);

%is_subcat_p%(abstime d) =
  /* Is Fleet Chief Pilot */
  /* [acosta:08/067@16:55] Renamed 'Fleet' -> 'FLEET' (CIS 108) */
  %has_qln%("POSITION", "FLEET", d);

%is_subcat_q%(abstime d) =
  /* LFUS Commander */
  /* [acosta:08/067@16:56] 'POSITION', 'LFUS' -> 'INSTRUCTOR', 'LIFUS'
   *  (CIS 121)
   */
  %has_qln%("INSTRUCTOR", "LIFUS", d);

%is_subcat_r%(abstime d) =
  /* New FC - RANK .OR. LOA/ILL */
  %has_restriction%("MEDICAL", "LOAIL", d);

%is_subcat_s%(abstime d) =
  /* Line Check Pilot .OR. C/A without SCC course */
  /* [acosta:08/067@16:58] Changed definition, since restr
   * NoSCC (CIS 204) has been removed.
   */
  %has_qln%("POSITION", "LCP", d)
  or
  (%rank_at_date%(d) = "AP" and
  not %is_scc%(d));

%is_subcat_t%(abstime d) =
  /* Test Pilot .OR. C/A Trainee */
  /* [acosta:08/067@16:59] 'Test' -> 'TEST' (CIS 116)
   * and 'Train' -> 'TRAIN' (CIS 205)
  */
  %has_qln%("POSITION", "TEST", d)
  or
  %has_restriction%("NEW", "TRAIN", d);

%is_subcat_v%(abstime d) =
  /* New CCM (31-90 d. after U-flight) .OR. New 6 months */
  /* [acosta:08/067@17:00] 'New90' (CIS 206) Removed (not in data),
   * 'New6M' -> 'NEW6M' (CIS 211). -> '6M' 28JULRTL.
   */
  %has_restriction%("NEW", "6M", d);

%is_subcat_x%(abstime d) =
  /* crew is retired */
  %is_retired_at_date%(d);

%is_subcat_plus%(abstime d) =
  /* 60 years + */
  /* [acosta:08/067@17:06] Redefined using real age. Removed
   * restriction 'TRAINING', '60+' (CIS 122)
   */
  %has_restr_medical_60plus%(d);



/****************************************************************
 * Section 12b: Visualisation of special qual in rostering
 ***************************************************************/

export %special_qual_pp_start% =
  concat(%_special_qual%(%pp_start%),
         %_restriction_suffix%(%pp_start%));

export %_special_qual%(Abstime date) =
  if %is_tre_any_qual%(date) then
    "TRE"
  else if %is_sup_any_qual%(date) then
    "SUP"
  else if %is_ol_any_qual%(date) then
    "OL"
  else if %is_sfe_any_qual%(date) then
    "SFE"
  else if %is_tri_any_qual%(date) then
    "TRI"
  else if %is_sfi_any_qual%(date) then
    "SFI"
  else if %is_opt_instr%(date) then
    "OPT"
  else if %is_crm_any_qual%(date) then
    "CRM"
  else if %is_lifus_instr%(date) then
    "LIFUS"
  /* Cabin crew */
  else if %is_linst_instr%(date) then
    "LINST"
  else if %is_as_instr%(date) then
    "AS"
  else if %is_rec_instr%(date) then
    "REC"
  else if %is_oaa_instr%(date) then
    "OAA"
  else if %is_instructor%(date) then
    "INSTR"
  else if %is_chief_pilot%(date) then
    "CP"
  else if %is_base_chief_pilot%(date) then
    "BCP"
  else if %is_line_check%(date) then
    "LCP"
  else if (not void(%qln_position%(date)) and %qln_position%(date) <> "SCC" and %qln_position%(date) <> "A2NX") then
    %qln_position%(date)
  else if %has_restr_training_dct%(date) then
    "DCT"
  else if %has_restr_training_foc%(date) then
    "FOC"
  else if %has_restr_training_refr%(date) then
    "REFR"
  else if %has_restr_training_capt%(date) then
    "CAPT"
  else if %has_restr_new_6m%(date) then
    "6M"
  else if %has_qual_restr_new_actype_any_qual%(date) then
    "NEW"
  else if %has_restr_new_rank%(date) then
    "NEW"
  else if %has_restr_new_new%(date) then
    "NEW"
  else
    "";

%_restriction_suffix%(Abstime date) =
  concat(if %has_restr_medical_60plus%(date) then "+" else "",
         if %has_restr_medical_medic%(date) then "M" else "");

/****************************************************************
 * Section 13: Selects & sorts
 ***************************************************************/
export %group_sort% =
  concat(
         %_group_sort%,
         format_int(100-%part_time_factor_pp_start%, "%03d"),
         format_int(%pattern_pp_start%, "%04d"),
         format_int(%cyclestart_pp_start%,"%03d")
         );

%_group_sort% =
  if %in_5_4_flex_group_pp_start% then %54flex_contract_group%
  else %group_at_pp_start%;

table flex_sort =
  %group_detailed_pp_start% ->
    export %54flex_contract_group%;
    "X/1"   -> "FX1";
    "X/29"  -> "FX2";
    "X/57"  -> "FX3";
    "X/22"  -> "FX4";
    "X/50"  -> "FX5";
    "X/15"  -> "FX6";
    "X/43"  -> "FX7";
    "X/8"   -> "FX8";
    "X/36"  -> "FX9";
    -       -> "";
end

/****************************************************************
 * Section 14: Prohibited crew
 ***************************************************************/

export %id_in_not_fly_table% =
  not (void(%_in_not_fly_col_1%) and
  void(%_in_not_fly_col_2%));

table in_not_fly_table_col_1 =
  crew.%id% -> String %_in_not_fly_col_1%;

  external %not_fly_with_table%;
  crew1 -> crew1;
  - -> void_string;
end

table in_not_fly_table_col_2 =
  crew.%extperkey_at_date%(leg.%start_hb%) -> String %_in_not_fly_col_2%;

  external %not_fly_with_table%;
  crew2 -> crew2;
  - -> void_string;
end

export %not_fly_together%(String Id1, String Empno2) =
  not void(%not_fly_validfrom%(Id1, Empno2, leg.%start_hb%));

table not_fly_table(String Id1, String Empno2, Abstime Date) =
  Id1, Empno2, Date -> export Abstime %not_fly_validfrom%;
  External %not_fly_with_table%;
  crew1, crew2, (validfrom, validto) -> validfrom;
  -, -, - -> void_abstime;
end

%not_fly_with_table% = %etab_path%(%not_fly_with_table_p%);

%not_fly_with_table_p% =
  parameter "crew_not_fly_with"
  remark "ETAB: Crew prohibited to fly with each other.";


/****************************************************************
 * Section 1%: -
 ***************************************************************/
%off_days_in_pp% =
    sum(trip(chain), trip.%pp_days%)
    where (trip.%is_off_duty% and trip.%in_pp%);

%off_duty_whole_pp% =
    %off_days_in_pp% = pp.%days%;


/****************************************************************
 * 16. Crew valid for MCL/Crew Manifest
 ****************************************************************/

export %is_valid_for_crew_manifest%(string country, abstime date) =
  let hb_time = %hb_time%(date);
  %crew_has_valid_employment_at_date%(hb_time) and
  %crew_has_valid_passport_in_period%(hb_time, hb_time) and
  %crew_has_valid_name_in_passport%(hb_time) and
  %crew_has_valid_nationality%(hb_time) and
  %crew_has_valid_birth_country% and
  /* Country specific stuff */
  (if country = "US" then
    %apis_valid_for_us%(hb_time)
  else
    true);

export %apis_failtext%(string country, abstime date) =
  let hb_time = %hb_time%(date);
  if not %crew_has_valid_employment_at_date%(hb_time) then
    "APIS: Crew not available"
  else if not %crew_has_valid_passport_in_period%(hb_time, hb_time) then
    "APIS: Crew does not have a valid passport"
  else if not %crew_has_valid_name_in_passport%(hb_time) then
    "APIS: Crew has no valid entry in table crew_passport"
  else if not %crew_has_valid_nationality%(hb_time) then
    "APIS: Invalid nationality (crew_document)"
  else if not %crew_has_valid_birth_country% then
    "APIS: Invalid country of birth (crew)"
  else if country = "US" then
    if not %apis_valid_for_us%(hb_time) then
      "APIS/US: Crew does not have a valid VISA or passport"
    else
      void_string
  else
    void_string;


/* Specific requirements for MCL to USA */
%apis_valid_for_us%(abstime hb_time) =
  %has_required_visa_or_passport%(hb_time, "US");

export %crew_has_valid_employment_at_date%(abstime t) =
  not void(%employment_start%(t));

export %crew_has_valid_passport_in_period%(abstime start, abstime stop) =
  default(crew.%doc_max_validto_date%("PASSPORT", "", start) >= stop, false);
%crew_has_valid_nationality%(abstime start) =
  not void(%country_alpha3%(%nationality%(start)));
%crew_has_valid_birth_country% =
  not void(%country_alpha3%(%country_of_birth%));

table country_table(string alpha2) =
  alpha2 ->
    string %country_name%,
    String %country_si%,
    String %country_alpha3%,
    String %country_number%;
  external "country";
  id -> name, si, long_id, nr_id;
  -  -> void_string, void_string, void_string, void_string;
end

/* comment: move this handling to model_crew, and use issue date of passport for the lookup */
table paxlst_passport_table(abstime searchdate) =
  %id%,
  searchdate ->
    export string %passport_sn%,
    export string %passport_gn%;
  external "crew_passport";
  crew, (validfrom, validto)
  ->
  lastname, firstname;
  -, - -> void_string, void_string;
end

%crew_has_valid_name_in_passport%(abstime t) =
  not void(%passport_sn%(t)) and
  not void(%passport_gn%(t));


/* For Office list (32.12) aka RosterInfo */
export %crew_has_valid_employment_in_period%(abstime s, abstime e) =
  let days = 1 + ((e - s - 0:01) / 24:00);
  any(times(days), not void(%employment_start%(s + (%times_index_0% * 24:00))));

/****************************************************************
 * 17. Sort order for crew lists
 ****************************************************************
 * From "PS07 - Crew list sort rules":
 *
 * List consists of two parts:
 *    (A) Active crew sorted by (1) and then seniority
 *    (P) Passive crew sorted by (2) and then seniority
 *
 *
 * (1) Active crew
 * Cat   Duty Code       Further criteria           Sort index  Comment
 * ----  --------------  -------------------------  ----------  -------------------------------
 * FC    H                                          1           We don't have this case in CMS
 *
 * FC    Not L, LL or U  Commander                  2
 *
 * FC    L               Acting FP                  3
 * FP    Not L or U      Acting FP                  3
 *
 * FC    LL              Acting FR                  4
 * FP    L               Acting FR                  4
 * FR    Not U           Acting FR                  4
 *
 * F?    U               All other pilots           5
 *
 * AP    Not L           Acting SCC                 6
 * AS    H               Acting SCC                 6
 * AH    H               Acting SCC                 6
 * AH                    Acting SCC on CJ flights   6
 *                       (SCC qualified with
 *                       highest seniority)
 *
 * AP    L               Acting AH                  7
 * AS                    Acting AS                  7
 *
 * AH                    Acting AH                  8
 *
 * All other FD                                     9
 * All other CC                                     9
 *
 *
 * (2) Passive crew
 * Category                                         Sort index
 * -----------------------------------------------  ----------
 * FC                                               1
 * FP                                               2
 * FS                                               3
 * FR                                               4
 * AP                                               5
 * AS                                               6
 * AH                                               7
 * All other                                        8
 *
 * crew lists will be sorted ascending (lower numbers first)
 *    sort_by='crew.%sort_key1%'
 *
 *
 * NOTE - IMPORTANT!
 * If you ever want to change this sorting mechanism, do not forget to change
 * the sorting in 'report_sources.hidden.FlightCrewList' where we try to mimic
 * this sort algorithm in Python.
 */


%seniority_leg_start% =
  %seniority_value%(leg.%start_utc%);

/* Note seniority is in interval 0 - 9999 */
export %sort_key% =
  10000 * %sort_key_1% + %seniority_leg_start%;

export %sort_key_1% =
  if leg.%is_deadhead% then
      10 + %sort_key_passive%
  else
      %sort_key_active%;


table sort_key_active_table =
  alias
     cpos = crew_pos.%current_pos%,
     apos = crew_pos.%assigned_pos%,
     scc = crew_pos.%chief_of_cabin%;
  cpos,   apos,  scc    -> export %sort_key_active%;
  -,      1,     -      -> 2; /* Commander */
  -,      2,     -      -> 3;
  -,      3,     -      -> 4;
  -,      4,     -      -> 5;
  -,      (5,7), true   -> 6; /* Acting SCC */
  -,      5,     false  -> 7;
  5,      (6,7), false  -> 8;
  (6,7),  6,     false  -> 8;
  (6,7),  7,     false  -> 9;
  -,      -,     -      -> 10;
end

/* NOTE the use of FS, should it not be FI, and should it not come below FR ??? NOTE */
table sort_key_passive_table =
  crew.%rank% -> export %sort_key_passive%;
  "FC" -> 1;
  "FP" -> 2;
  "FS" -> 3;
  "FR" -> 4;
  "AP" -> 5;
  "AS" -> 6;
  "AH" -> 7;
  - -> 8;
end

/*
** 18. Agreement validity
*/

export %k4exng_cc_sp5_1_valid%(Abstime start) =
  %agreement_valid%("K4ExNG_cc_sp5.1",start) and
  %cabin_crew% and %is_homebase_scand%;

table crew_prod_day_change(Abstime date) =
  %id%, date -> export Abstime %prod_day_change_start_date%,
                export Abstime %prod_day_change_end_date%;
  external %crew_prod_day_change_table%;
  crew, (validfrom, validto( -> validfrom, validto;
  -, - -> void_abstime, void_abstime;
end

export %prod_day_contract_start_date%(Abstime date) =
  %prod_day_change_start_date%(date);

export %prod_day_contract_end_date%(Abstime date) =
  %prod_day_change_end_date%(date);

table crew_prod_day_sg(Abstime date) =
  %id%, date -> export Abstime %prod_day_sg_start_date%,
                export Abstime %prod_day_sg_end_date%,
                export int %prod_day_sg_exclude_days%;
  external %crew_prod_day_sg_table%;
  crew, (validfrom, validto( -> validfrom, validto, exclude_days;
  -, - -> void_abstime, void_abstime, void_int;
end

export %service_grade_at_date%(Abstime date) =
  default(%temp_service_grade_at_date%(date), %part_time_factor_at_date%(date));

%service_grade_change_in_period%(Abstime start, Abstime stop) =
  let first_day_service_grade = %service_grade_at_date%(start);
  any(leg(chain),%service_grade_at_date%(leg.%start_hb%) <> first_day_service_grade)
  where(leg.%start_hb% <= stop and leg.%start_hb% >= start);

%temp_service_grade_at_date%(Abstime date) =
  nmax(%prod_day_sg_working_days_in_period%(date) * 100 / %prod_day_sg_total_days_in_period%(date), 0);

%prod_day_sg_working_days_in_period%(Abstime date) =
  %prod_day_sg_total_days_in_period%(date) - %prod_day_sg_exclude_days%(date);

%prod_day_sg_total_days_in_period%(Abstime date) =
  (%prod_day_sg_end_date%(date) - %prod_day_sg_start_date%(date)) / 24:00;

export %va_year_start_date%(Abstime date) =
  let months =
    if (%base_at_date%(date) = "CPH") then
      4
    else if (%base_at_date%(date) = "STO") then
      5
    else
      0,

  days_in_current_year = add_months(round_down_year(date), months) - round_down_year(date),
  days_in_va_start_year = add_months(round_down_year(date - days_in_current_year), months) - round_down_year(date - days_in_current_year);

  round_down_year(date - days_in_current_year) + days_in_va_start_year;

export %va_year_end_date%(Abstime date) =
  add_years(%va_year_start_date%(date), 1);

export %max_production_days_in_va_year_fd_main_k11_p% =
  parameter 179
  remark "Max production days in year for FD (Main) - K11";

export %max_production_days_in_va_year_fd_rc_k11_p% =
  parameter 185
  remark "Max production days in year for FD (RC) - K11";

export %max_production_days_in_va_year_fd_main_k4exng_p% =
  parameter 190
  remark "Max production days in year for FD (Main) - 4ExNG";

export %max_production_days_in_va_year_fd_rc_k4exng_p% =
  parameter 190
  remark "Max production days in year for FD (RC) - 4ExNG";

%max_production_days_in_va_year_fd_main_k4exng_sks_2012_2013% = 184;
%max_production_days_in_va_year_fd_main_k4exng_skd_2012_2013% = 183;
%max_production_days_in_va_year_fd_rc_k4exng_sks_2012_2013%   = 187;
%max_production_days_in_va_year_fd_rc_k4exng_skd_2012_2013%   = 187;

export %max_production_days_in_va_year_fd_at_date%(Abstime date) =
  if %is_fdrc%(date) then
    if parameters.%k4exng_fc_sp5_1_valid%(date) then
      %max_production_days_in_va_year_fd_rc_k4exng%(date)
    else
      %max_production_days_in_va_year_fd_rc_k11_p%
  else
    if parameters.%k4exng_fc_sp5_1_valid%(date) then
      %max_production_days_in_va_year_fd_main_k4exng%(date)
    else
      %max_production_days_in_va_year_fd_main_k11_p%;

/* Part 2, using agmt_group */
export %agmt_group_id% =
  crew_contract.%agreement_group_at_date%(%available_start%);

export %agmt_group_id_at_date%(Abstime date)=
  crew_contract.%agreement_group_at_date%(date);

export %agmt_group_inv_enum%(Abstime date) =
  model_crew.%agmt_group_inv_enum%(%agmt_group_id_at_date%(date));

export %agmt_group_desc% =
  let id = %agmt_group_id%;
  concat(id,": ",model_crew.%agmt_group_desc%(id));

export %has_agmt_group_qa_fd% = default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_QA_FD%), false);
export %has_agmt_group_qa_cc% = default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_QA_CC%), false);

export %has_agmt_group_svs_fd% = default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_SVS_FD%), false);
export %has_agmt_group_svs_cc% = default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_SVS_CC%), false);
export %has_agmt_group_skd_fd% = default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_SKD_FD%), false);
export %has_agmt_group_skd_cc% = default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_SKD_CC%), false);
export %has_agmt_group_sks_fd% = default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_SKS_FD%), false);
export %has_agmt_group_sks_cc% = default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_SKS_CC%), false);
export %has_agmt_group_skn_fd% = default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_SKN_FD%), false);
export %has_agmt_group_nkf_cc% = default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_NKF_CC%), false);
export %has_agmt_group_snk_cc% = default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_SNK_CC%), false);
export %has_agmt_group_skid_fd% = default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_SKID_FD%), false);
export %has_agmt_group_skis_fd% = default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_SKIS_FD%), false);
export %has_agmt_group_skin_fd% = default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_SKIN_FD%), false);
export %has_agmt_group_skk_cc% = default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_SKK_CC%), false);
export %has_agmt_group_skj_cc% = default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_SKJ_CC%), false);


/* derived agreement groups (combinations of groups) */
export %has_agmt_group_qa% =
    default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_QA%), false); /* Cimber */
export %has_agmt_group_qa_cc_at_date%(Abstime date) =
   default(model_crew.%agmt_group_matching%(%agmt_group_id_at_date%(date),model_crew.%AGMT_GROUP_QA_CC%), false);
export %has_agmt_group_qa_fd_at_date%(Abstime date) =
   default(model_crew.%agmt_group_matching%(%agmt_group_id_at_date%(date),model_crew.%AGMT_GROUP_QA_FD%), false);
export %has_agmt_group_qa_at_date%(Abstime date) =
   default(model_crew.%agmt_group_matching%(%agmt_group_id_at_date%(date), model_crew.%AGMT_GROUP_QA%), false);



export %has_agmt_group_svs% =
    default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_SVS%), false); /* SAS LINK */
export %has_agmt_group_svs_cc_at_date%(Abstime date) =
   default(model_crew.%agmt_group_matching%(%agmt_group_id_at_date%(date),model_crew.%AGMT_GROUP_SVS_CC%), false);
export %has_agmt_group_svs_fd_at_date%(Abstime date) =
   default(model_crew.%agmt_group_matching%(%agmt_group_id_at_date%(date),model_crew.%AGMT_GROUP_SVS_FD%), false);
export %has_agmt_group_svs_at_date%(Abstime date) =
   default(model_crew.%agmt_group_matching%(%agmt_group_id_at_date%(date), model_crew.%AGMT_GROUP_SVS%), false);


export %has_agmt_group_snk_cc_at_date%(Abstime date) =
   default(model_crew.%agmt_group_matching%(%agmt_group_id_at_date%(date),model_crew.%AGMT_GROUP_SNK_CC%), false);
export %has_agmt_group_skn_fd_at_date%(Abstime date) =
   default(model_crew.%agmt_group_matching%(%agmt_group_id_at_date%(date),model_crew.%AGMT_GROUP_SKN_FD%), false);
export %has_agmt_group_skd_fd_at_date%(Abstime date) =
   default(model_crew.%agmt_group_matching%(%agmt_group_id_at_date%(date),model_crew.%AGMT_GROUP_SKD_FD%), false);
export %has_agmt_group_skis_fd_at_date%(Abstime date) =
   default(model_crew.%agmt_group_matching%(%agmt_group_id_at_date%(date),model_crew.%AGMT_GROUP_SKIS_FD%), false);
export %has_agmt_group_skin_fd_at_date%(Abstime date) =
   default(model_crew.%agmt_group_matching%(%agmt_group_id_at_date%(date),model_crew.%AGMT_GROUP_SKIN_FD%), false);
export %has_agmt_group_sk_fd_at_date%(Abstime date) =
   default(model_crew.%agmt_group_matching%(%agmt_group_id_at_date%(date),model_crew.%AGMT_GROUP_SK_FD%), false);
export %has_agmt_group_skn_cc_at_date%(Abstime date) =
   default(model_crew.%agmt_group_matching%(%agmt_group_id_at_date%(date),model_crew.%AGMT_GROUP_SKN_CC%), false);
export %has_agmt_group_nkf_cc_at_date%(Abstime date) =
   default(model_crew.%agmt_group_matching%(%agmt_group_id_at_date%(date),model_crew.%AGMT_GROUP_NKF_CC%), false);
export %has_agmt_group_sks_at_date%(Abstime date) =
   default(model_crew.%agmt_group_matching%(%agmt_group_id_at_date%(date),model_crew.%AGMT_GROUP_SKS%), false);
export %has_agmt_group_skd_at_date%(Abstime date) =
   default(model_crew.%agmt_group_matching%(%agmt_group_id_at_date%(date),model_crew.%AGMT_GROUP_SKD%), false);
export %has_agmt_group_skn_at_date%(Abstime date) =
   default(model_crew.%agmt_group_matching%(%agmt_group_id_at_date%(date),model_crew.%AGMT_GROUP_SKN%), false);
export %has_agmt_group_ski_fd_at_date%(Abstime date) =
   default(model_crew.%agmt_group_matching%(%agmt_group_id_at_date%(date),model_crew.%AGMT_GROUP_SKI_FD%), false);
export %has_agmt_group_skd_cc_at_date%(AbsTime date) =
    default(model_crew.%agmt_group_matching%(%agmt_group_id_at_date%(date),model_crew.%AGMT_GROUP_SKD_CC%), false);
export %has_agmt_group_sks_cc_at_date%(AbsTime date) =
    default(model_crew.%agmt_group_matching%(%agmt_group_id_at_date%(date),model_crew.%AGMT_GROUP_SKS_CC%), false);
export %has_agmt_group_sks_cc_at_date_non_resource_pool%(AbsTime date) =
    %has_agmt_group_sks_cc_at_date%(date) and not %is_temporary_at_date%(date);
export %has_agmt_group_skd_cc_at_date_non_resource_pool%(AbsTime date) =
    %has_agmt_group_skd_cc_at_date%(date) and not %is_temporary_at_date%(date);
export %has_agmt_group_skn_cc_at_date_non_resource_pool%(AbsTime date) =
    %has_agmt_group_skn_cc_at_date%(date) and not %is_temporary_at_date%(date);



export %has_agmt_group_skd% =    default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_SKD%), false); /* SAS DK */
export %has_agmt_group_sks% =    default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_SKS%), false); /* SAS SE */
export %has_agmt_group_skn% =    default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_SKN%), false); /* SAS NO */
export %has_agmt_group_skn_cc% = default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_SKN_CC%), false);
export %has_agmt_group_ski_fd% = default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_SKI_FD%), false);
export %has_agmt_group_sk% =     default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_SK%), false); /* "pure" SAS */
export %has_agmt_group_sk_scand% = default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_SCAND%), false); /* Scandinavian SAS */
export %has_agmt_group_dk% =     default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_DK%), false); /* Danish */
export %has_agmt_group_se% =     default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_SE%), false); /* Swedish */
export %has_agmt_group_no% =     default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_NO%), false); /* Norway */
export %has_agmt_group_sk_cc% =  default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_SK_CC%), false); /* CC Crew at SAS */
export %has_agmt_group_sk_fd% =  default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_SK_FD%), false); /* FD Crew crew SAS */
export %has_agmt_group_sk_sh_fd% = default(model_crew.%agmt_group_matching%(%agmt_group_id%,model_crew.%AGMT_GROUP_SK_FD_SH%), false); /* FD Crew at SH crew SAS */

/*MFF Crew identification */
export %is_mff_at_date%(Abstime date) =
    model_crew.%is_mff_at_date%(%id%, date);
    
export %is_mff% = 
    %is_mff_at_date%(%pp_start%) or %is_mff_at_date%(%pp_end%);

export %has_agmt_group_sk_fd_mff% =
    %has_agmt_group_sk_fd% and %is_mff%;
/*Corona crew identification*/
export %has_corona_at_date%(Abstime date) =
    model_crew.%has_corona_at_date%(%id%, date);

/*
** Agreement group and some qualifications combined
** These were created to handled the SAS employe working for Cimber, but other future uses may evolve.
** The routines are built upon aggrement groups and for most groups the agreement group ID is used. But for
** SKD_FD_AG there are two distinct groups: those with CJ qualifications, and those without.
**
** This is an alternative to be used for crew who are not assigned; when assigned, ac_employer can be used for similar
** purpose.
*/
export %agmt_qual_basic_group_at_date%(Abstime d) =
  model_crew.%agmt_qual_basic_group_at_date%(%id%, d);

export %has_agmt_qual_skd_fd_crj_at_date%(Abstime d) =
  model_crew.%agmt_qual_basic_group_at_date%(%id%, d) = model_crew.%AG_QUAL_SKD_FD_CRJ%;

export %has_agmt_qual_skd_fd_oth_at_date%(Abstime d) =
  model_crew.%agmt_qual_basic_group_at_date%(%id%, d) = model_crew.%AG_QUAL_SKD_FD_OTH%;

export %has_agmt_qual_fd_crj%(Abstime d) =
  %has_agmt_group_qa_fd_at_date%(d) or %has_agmt_qual_skd_fd_crj_at_date%(d);


/*
 * 19. F36 crew data generated by user initiated script.
 *     Contains: target, balance, available days
 */
table f36_targets(String id, Abstime date) =
  id, date ->
    int %_f36_target%,
    String %_f36_balance%,
    int %_f36_availabledays%,
    String %_f36_targets_si%;
  external %f36_targets_table%;
  crew, period -> target, balance, availabledays, si;
  -,  -                    -> void_int, void_string, void_int, void_string;
end

export %monthly_f36_target% =
  default(%_f36_target%(%id%, %pp_start%), 0);

%_input_f36_balance% =
  default(%_f36_balance%(%id%, %pp_start%), "0");

export %input_f36_balance% = fundamental.%str2int%(%_input_f36_balance%);

export %f36_balance_num% = fundamental.%str2int_sign%(%_input_f36_balance%)
                           *(fundamental.%str2int%(%_input_f36_balance%)
                             -fundamental.%str2frac_num%(%_input_f36_balance%)
                             *9*fundamental.%str2frac_dec%(%_input_f36_balance%));
export %f36_balance_den% = nmax(1,fundamental.%str2frac_dec%(%_input_f36_balance%));

export %input_f36_availabledays% =
  default(%_f36_availabledays%(%id%, %pp_start%), 0);

export %f36_targets_si% =
  %_f36_targets_si%(%id%, %pp_start%);

/*
** Transition from K11 to 4ExNG RC
**
** SKN: vacation year 01jan-31dec - 4ExNG 190 P-days applies from 01jan13
**
** SKD: vacation year 01may-20apr
**      For 01may12-30apr13, (8x185)/12 + (4x190)/12 = 187 P-days applies
**
** SKS: vacation year 01may-20apr
**      For 01may12-30apr13, (7x185)/12 + (5x190)/12 = 187 P-days applies
*/
%max_production_days_in_va_year_fd_rc_k4exng%(Abstime date) =
  if %is_skn% then
    %max_production_days_in_va_year_fd_rc_k4exng_p%
  else
    if %transition_k11_4exng%(date) then
      if %is_skd% then
        %max_production_days_in_va_year_fd_rc_k4exng_skd_2012_2013%
      else
        %max_production_days_in_va_year_fd_rc_k4exng_sks_2012_2013%
    else
      %max_production_days_in_va_year_fd_rc_k4exng_p%;

/*
** Transition from K11 to 4ExNG Main
**
** SKN: vacation year 01jan-31dec - 4ExNG 190 P-days applies from 01jan13
**
** SKD: vacation year 01may-20apr
**      For 01may12-30apr13, (8x179)/12 + (4x190)/12 = 183 P-days applies
**
** SKS: vacation year 01may-20apr
**      For 01may12-30apr13, (7x179)/12 + (5x190)/12 = 184 P-days applies
*/
%max_production_days_in_va_year_fd_main_k4exng%(Abstime date)  =
  if %is_fc_no% then
    %max_production_days_in_va_year_fd_main_k4exng_p%
  else
    if %transition_k11_4exng%(date) then
      if %is_fc_dk% then
        %max_production_days_in_va_year_fd_main_k4exng_skd_2012_2013%
      else
        %max_production_days_in_va_year_fd_main_k4exng_sks_2012_2013%
    else
      %max_production_days_in_va_year_fd_main_k4exng_p%;

%transition_k11_4exng%(Abstime date) =
  round_down_year(date) = 01jan2013 and
  round_down_year(%va_year_end_date%(date)) = 01jan2013;

export %max_va_days_in_va_year% = 50;

export %work_factor_at_date%(Abstime date) =
  %max_production_days_in_va_year_fd_at_date%(date) * 1000 / (365 - %max_va_days_in_va_year%);

export %work_factor_pt_at_date%(Abstime date) =
  (%work_factor_at_date%(date) * %service_grade_at_date%(date)) / 100;


/*
*********************************************************************
** Max production days rules for FD SKN 2011 (Can be removed in 2012)
*********************************************************************
** START
*********************************************************************
*/

/*
 * SASCMS-2472 Varibles used in rule max 179 prod days per year SKN
 *
 * SASCMS-3039 - Production, VA and LOA days should only be considered
 * when crew is flying for region SKN. For calculating number of SKN
 * days, %days_in_period_skn% should be used. The variable handles that
 * crew switch region without any limitations.
 *
 */
%skn_at_date%(Abstime date) =
    not void(crew_contract.%region_at_date_by_id%(crew.%id%, date)) and
    crew_contract.%region_at_date_by_id%(crew.%id%, date) = "SKN";

/*
 * Start date for SKN in period (month)
 * NB! Only 1 change in period is supported
 */
export %start_date_skn%(Abstime start_date, Abstime end_date) =
    let start_change_date = %start_employment_change_in_month%(start_date, end_date);

    if %skn_at_date%(start_date) then
        start_date
    else if start_change_date < end_date then
        start_change_date
    else
        end_date;

%start_employment_change_in_month%(Abstime start_date, Abstime end_date) =
    %employment_start_skn%(%_employment_end_date%(start_date), end_date);

%employment_start_skn%(Abstime start_date, Abstime end_date) =
    let date = %_employment_start_date%(start_date);

    if %skn_at_date%(date) then
        date
    else
        end_date;

%_employment_start_date%(Abstime start_date) =
    if void(%is_active_at_date%(start_date)) then
        1Jan2035
    else
        model_crew.%employment_start_by_id%(%id%, start_date);

/*
 * End date for SKN in period (month)
 * NB! Only 1 change in period is supported
 */
export %end_date_skn%(Abstime start_date, Abstime end_date) =
    let end_change_date = %end_employment_change_in_month%(start_date, end_date);

    if %skn_at_date%(end_date) then
        end_date
    else if end_change_date <= end_date then
        end_change_date
    else
        start_date;

%end_employment_change_in_month%(Abstime start_date, Abstime end_date) =
    %_employment_end_date%(%start_date_skn%(start_date, end_date));

%employment_end_skn%(Abstime start_date, Abstime default_date) =
    let date = %_employment_end_date%(start_date);

    if %skn_at_date%(date-0:01) then
        date
    else
        start_date;

%_employment_end_date%(Abstime date) =
    if void(%is_active_at_date%(date)) then
        1Jan1986
    else
        model_crew.%employment_end_by_id%(%id%, date);

%one_emp_change_in_period%(Abstime start_date, Abstime end_date)  =
    let first_employment_end_date = model_crew.%employment_end_by_id%(%id%, start_date),
        last_employment_start_date = default(model_crew.%employment_start_by_id%(%id%, end_date), %emp_end%);

    if void(%is_active_at_date%(end_date)) then
        %no_emp_change_in_period%(start_date, last_employment_start_date)
    else
       last_employment_start_date = first_employment_end_date;

%no_emp_change_in_period%(Abstime start_date, Abstime end_date)  =
  default(model_crew.%employment_end_by_id%(%id%, start_date) >= end_date, true);

export %days_in_period_skn%(Abstime start_date, Abstime end_date) =
   let stat_date_skn = default(%start_date_skn%(start_date, end_date), start_date),
       end_date_skn = default(%end_date_skn%(start_date, end_date), end_date);

   if %no_emp_change_in_period%(start_date, end_date) then
    if %skn_at_date%(start_date) then
        %days_in_period%(start_date, end_date)
    else
        0
   else if %one_emp_change_in_period%(start_date, end_date) then
    %days_in_period%(stat_date_skn, end_date_skn)
   else
    %days_in_period_skn_per_day%(stat_date_skn, end_date);

export %days_in_period%(Abstime start_date, Abstime end_date) =
    nmax(0, 1 + (end_date - start_date - 0:01) / 24:00);

/* Should only be used if there is more then one employment
 * changen during month. One employemnt change and no employment
 * changed should be handle by code above
 */
%days_in_period_skn_per_day%(Abstime start_date, Abstime end_date) =
    let days = %days_in_period%(start_date, end_date);

    sum(times(days), %skn_day%(%_next_day%(start_date)))
        where (%_next_day%(start_date) < end_date);

%skn_day%(Abstime date) =
    if %skn_at_date%(date) then 1 else 0;

%_next_day%(Abstime start_date) =
    start_date + (%times_index_0% - 1) * 24:00;


/*************************************************************************
    New Hire follow up
  *************************************************************************/

table new_hire_follow_up(String crewId) =
    crewId ->
    AbsTime %_new_hire_ilc_date%, String %_new_hire_mentor%,
    AbsTime %_new_hire_follow_up_1_start_date%, AbsTime %_new_hire_follow_up_1_end_date%,
    AbsTime %_new_hire_follow_up_2_start_date%, AbsTime %_new_hire_follow_up_2_end_date%;
  external "new_hire_follow_up";
  crew ->
    ilc_date,  mentor,
    follow_up_1_start_date, follow_up_1_end_date,
    follow_up_2_start_date, follow_up_2_end_date;
  - ->
    void_abstime, void_string,
    void_abstime, void_abstime,
    void_abstime, void_abstime;
end

export %new_hire_ilc_date%               = %_new_hire_ilc_date%(%id%);
export %new_hire_mentor%                 = %_new_hire_mentor%(%id%);
export %new_hire_follow_up_1_start_date% = %_new_hire_follow_up_1_start_date%(%id%);
export %new_hire_follow_up_1_end_date%   = %_new_hire_follow_up_1_end_date%(%id%);
export %new_hire_follow_up_2_start_date% = %_new_hire_follow_up_2_start_date%(%id%);
export %new_hire_follow_up_2_end_date%   = %_new_hire_follow_up_2_end_date%(%id%);
export %new_hire_mentor_for_crew%(String crewId) = %_new_hire_mentor%(crewId);



/*
    Crew is considered new-hired if he has an entry in new_hire_follow_up table

*/
export %crew_is_in_new_hire_program% =
    default((add_months(round_up_month(%new_hire_ilc_date%),8) > %pp_end%), False);



/*
*********************************************************************
** END
*********************************************************************
*/




/*
* Variables used to decide what max production days rule to use *
*
* Note: Can be removed after 01Jun2012
*
*/

export %max_production_days_rule_FC_SKN_valid% =
  %is_skn% and %va_year_start_date%(%pp_start%) < 01Jan2012;

export %max_production_days_rule_FC_ALL_valid% =
  %va_year_start_date%(%pp_start%) >= 01Jan2012;

export %has_rotationsferie_contract_SKN_FD_at_date%(AbsTime date) =
   (crew.%has_agmt_group_skn_fd_at_date%(date) or crew.%has_agmt_group_skin_fd_at_date%(date)) and
   model_crew.%contract_desc_long%(crew.%id%, date) = "rotationsferie";

/* end of file */
