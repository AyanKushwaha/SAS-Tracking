/* -*- crc -*- */
/*******************************************************
crg_trip_info
--------------------------------------------------------

Use:

Documentation:

--------------------------------------------------------
*******************************************************/

 
 
/* WARNING: 
  This file has been generated by substituting m4 macros from a 
  source file in std_concepts. Your changes to this file will be 
  copied to a backup file and must be restored manually if you 
  update the CARMUSR with new packages.
*/

root module crg_pairing_statistics
import levels;
import duty;
import trip;
import leg;
import iterators;
import crew_pos;
import crg_crew_pos;
import fundamental;
import crg_trip;
import crg_date;
import trip_constraints;

/* SELECTED PACKAGES */


/*%base1% = parameter "STO" remark "Statistics Report: Base 1";
%base2% = parameter "OSL" remark "Statistics Report: Base 2";
%base3% = parameter "CPH" remark "Statistics Report: Base 3";*/

%total_flight_time% =
  sum(trip_set, trip.%block_time% * crew_pos.%trip_assigned%);



/*
** 
** Definitions needed for PRT Report "Pairing Statistics Daily"
**
*/

%is_dated_mode% = any(chain_set, is_dated_mode);

%base% = trip.%homebase%;

/* Depending on crg_trip.%time_mode% the departure date
   is in Local or UTC time */
%duty_start_day% =
  round_down(crg_trip.%duty_start%, 24:00);

%duty_start_weekday% = 
  crg_date.%print_weekday%(crg_trip.%duty_start%);
%trip_start_weekday% = 
  crg_date.%print_weekday%(crg_trip.%trip_start%);
  
%duty_starts_in_pp% =
  %duty_start_day% >= fundamental.%pp_start% and 
  %duty_start_day% < fundamental.%pp_end%;

/* Duties grouped together by 
 * 1) if the start date is in the current planning period yes/no 
 * 2) departure date 
 */
iterator dep_date_duty_set = 
  partition(duty)
  by(%duty_starts_in_pp%,
     %duty_start_day%);
end

/* Duties grouped together by 
 * 1) if the start date is in the current planning period yes/no 
 * 2) departure weekday 
 */
iterator dep_weekday_duty_set =  
  partition(duty)
  by(%duty_starts_in_pp%,
     %duty_start_weekday%);
end


%total_num_duty_days% =
  %total_num_duties%("ALL");

/* Is the active_in_lp condition necessary? */
%total_ac_block_time% = sum(leg_set,leg.%block_time%) where(active_in_lp);

%total_block_time% = 
  sum(duty_set, duty.%block_time% * crew_pos.%trip_assigned%);

%total_duty_time_all% = 
  sum(duty_set, duty.%duty_time%(duty.union, True) * crew_pos.%trip_assigned%);

%total_block_time_per_dutyday% = 
  if %total_num_duty_days% = 0 then 0:00 else
  %total_block_time% / %total_num_duty_days%;

%total_duty_time_per_dutyday% = 
  if %total_num_duty_days% = 0 then 0:00 else
  %total_duty_time_all% / %total_num_duty_days%;


/*
** General statistics
*/



iterator new_compressed_leg_set =
  partition(leg) 
  by(%departure_partition%, departure_airport_name, flight_number, deadhead); 
end

%departure_partition% = 
  if is_dated_mode 
    then departure - 01Jan1986 
  else if lp_period_end - lp_period_start > 24:00
    then time_of_week(departure)
    else time_of_day(departure);

%compressed_all_number_of_legs% =
  count(new_compressed_leg_set) where (not leg.%is_deadhead%);

%total_duty_days% = 
  sum(trip_set, trip.%days% * crew_pos.%trip_assigned%);

%total_onduty_per_dutyday% = 
  if %total_duty_days% = 0 then 0:00 else
  %total_flight_time% / %total_duty_days%;

%total_air_time% =
  sum(trip_set, trip.%air_time% * crew_pos.%trip_assigned%);

%total_air_time_per_dutyday% =
  if %total_duty_days% = 0 then 0:00 else
  %total_air_time% / %total_duty_days%;


/*
** Costs
**
** Report uses trip_cost directly
*/



/*
** Penalties
**
** Report uses trip_cost directly
*/


/***********************
** Rank specific values
************************/



/*export %cabin_stat% = parameter false
  remark "Statistics Report: Use the Cabin layout";*/
export %cabin_stat% = fundamental.%cabin_crew%;

export %pos_str% =
  if %cabin_stat% then %pos_cab% else %pos_coc%;
export %pos_str2% =
  if %cabin_stat% then %pos_cab2% else %pos_coc2%;

export %pos_str_vis% = 
  if %pos_str% = "F" or %pos_str% = "C" then
    "ALL"
  else 
    %pos_str%;
    
/* used for cockpit */
%pos_coc% = 
  if %py_index% = 5 then
   "F"
 else
   crew_pos.%pos2func%(
    crg_crew_pos.%vector_start_pos%(crg_crew_pos.cockpit) 
    + %py_index% - 1);
%pos_coc2% = 
  crew_pos.%pos2func%(
    crg_crew_pos.%vector_start_pos%(crg_crew_pos.cockpit) 
    + %py_index1% - 1);
/* used for cabin */
%pos_cab% = 
  if %py_index% = 5 then
   "C"
 else
  crew_pos.%pos2func%(
    crg_crew_pos.%vector_start_pos%(crg_crew_pos.cabin) 
    + %py_index% - 1);
%pos_cab2% = 
  crew_pos.%pos2func%(
    crg_crew_pos.%vector_start_pos%(crg_crew_pos.cabin) 
    + %py_index1% - 1);

/* Assign values for leg and trip */
%leg_num_crew%(string rank) =
  if rank = "C" then %leg_num_crew_cab%
  else if rank = "F" then %leg_num_crew_coc%
  else if rank = "ALL" then %leg_assigned%
  else crew_pos.%leg_assigned_func%(rank);
%trip_num_crew%(string rank) =
  if rank = "C" then %trip_num_crew_cab%
  else if rank = "F" then %trip_num_crew_coc%
  else if rank = "ALL" then crew_pos.%trip_assigned%
  else crew_pos.%trip_assigned_func%(rank);

%leg_assigned% =
  crew_pos.%leg_assigned%;
%leg_num_crew_coc%=
  let start=0, ends= crg_crew_pos.%etab_cockpit_end_pos%,
      rep=ends-start;
  sum(times(rep),crew_pos.%leg_assigned_pos%(%times_index_0%));
%leg_num_crew_cab%=
  let start= crg_crew_pos.%etab_cockpit_end_pos%,
      ends = crg_crew_pos.%etab_cabin_end_pos%,
      rep=ends-start;
  sum(times(rep),crew_pos.%leg_assigned_pos%(%times_index_0%+start));
%trip_num_crew_coc%=
  let start=0, ends= crg_crew_pos.%etab_cockpit_end_pos%,
      rep=ends-start;
  sum(times(rep),crew_pos.%trip_assigned_pos%(%times_index_0%));
%trip_num_crew_cab%=
  let start= crg_crew_pos.%etab_cockpit_end_pos%,
      ends = crg_crew_pos.%etab_cabin_end_pos%,
      rep=ends-start;
  sum(times(rep),crew_pos.%trip_assigned_pos%(%times_index_0%+start));


%duty_num_nights_after%=/*duty.%num_nights_after%*/
  default(
    nmax(0, 1+ (duty.%rest_end% - duty.%rest_start% - 0:01) / 24:00),
    0);
%trip_num_operating_duties%=/*trip.%num_operating_duties%*/
  count(duty(trip)) where(duty.%is_active_flight%);
%trip_num_deadheads%=/*trip.%num_deadheads%*/
  sum(duty(trip),duty.%num_deadheads%);
%trip_num_ac_changes%=/*trip.%num_ac_changes%*/
  sum(duty(trip),duty.%num_ac_changes%);
%trip_tafb%=/*trip.%tafb%*/
  trip.%time%;
%leg_connection_time_in_duty%=/*leg.%connection_time_in_duty%*/
  leg.%connection_time%;
  
/* Conts number of hard duties */
%trip_num_hard_duties%(string rank) = 
  %trip_num_crew%(rank) * 
  count(duty_set) where(duty.%is_heavy%);

/*** RANK AND BASE VALUES ***/



%total_block_hours%(string rank) = 
  sum(trip_set, trip.%block_time% * %trip_num_crew%(rank));

%total_block_per_day%(string rank) = 
  let days = sum(trip_set, trip.%days% * %trip_num_crew%(rank)),
      block = sum(trip_set, trip.%block_time% * %trip_num_crew%(rank));
      if days = 0 then 0:00 else block/days;
%total_block_per_duty%(string rank)=
  let duties= %total_duties%(rank),
      block= %total_block_hours%(rank);
  if duties = 0 then 0:00 else block/duties;

%total_days%(string rank) = 
  sum(trip_set, trip.%days% * %trip_num_crew%(rank));
%total_nights%(string rank) = 
  sum(trip_set, sum(duty(trip), %duty_num_nights_after%) * %trip_num_crew%(rank));
%total_duties%(string rank) = 
  sum(trip_set, trip.%num_duties% * %trip_num_crew%(rank));
%total_operating_duties%(string rank) = 
  sum(trip_set, %trip_num_operating_duties% * %trip_num_crew%(rank));
%total_passive_flights%(string rank) = 
  sum(trip_set, %trip_num_deadheads% * %trip_num_crew%(rank));
%total_deadhead_time%(string rank) = 
  sum(trip_set, trip.%deadhead_time% * %trip_num_crew%(rank));
%total_ac_change%(string rank) = 
  sum(trip_set, %trip_num_ac_changes% * %trip_num_crew%(rank));
%total_duty_time%(string rank) = 
  sum(trip_set, trip.%duty_time%(duty.union, True) * %trip_num_crew%(rank));
%total_tafb%(string rank) = 
  sum(trip_set, %trip_tafb% * %trip_num_crew%(rank));
%total_num_duties%(string rank) =
  sum(duty_set, first(leg(duty),%leg_num_crew%(rank)));
%total_num_pairings%(string rank) =
  sum(trip_set, %trip_num_crew%(rank));
%percentage_trips%(string rank) = 
let divider = sum(above(1), %total_num_pairings%(rank));
  if divider = 0 then 0
  else sum(trip_set, %trip_num_crew%(rank)) * 100 / divider;
%total_hard_duties%(string rank) = 
  sum(trip_set, %trip_num_hard_duties%(rank));
                 
  
/****  CONNECTION STATISTICS ****/


%cxn_lt_100%(string rank) = 
    sum(leg_set, %leg_num_crew%(rank)) 
    where (leg.%is_ac_change% AND
           %leg_connection_time_in_duty% < 1:00);
%cxn_100_115%(string rank) = 
    sum(leg_set, %leg_num_crew%(rank)) 
    where (leg.%is_ac_change% AND
           %leg_connection_time_in_duty% >= 1:00 AND
           %leg_connection_time_in_duty% < 1:15);
%cxn_115_130%(string rank) = 
    sum(leg_set, %leg_num_crew%(rank)) 
    where (leg.%is_ac_change% AND
           %leg_connection_time_in_duty% >= 1:15 AND
           %leg_connection_time_in_duty% < 1:30);
%cxn_130_145%(string rank) = 
    sum(leg_set, %leg_num_crew%(rank)) 
    where (leg.%is_ac_change% AND
           %leg_connection_time_in_duty% >= 1:30 AND
           %leg_connection_time_in_duty% < 1:45);
%cxn_145_200%(string rank) = 
    sum(leg_set, %leg_num_crew%(rank)) 
    where (leg.%is_ac_change% AND
           %leg_connection_time_in_duty% >= 1:45 AND
           %leg_connection_time_in_duty% < 2:00);
%cxn_gt_200%(string rank) = 
    sum(leg_set, %leg_num_crew%(rank)) 
    where (leg.%is_ac_change% AND
           %leg_connection_time_in_duty% >= 2:00);




/*
** Trip days statistics
*/

iterator trip_duty_days_set =
    partition(trip)
    by(trip.%days%);
end

iterator duty_num_leg_set =
    partition(duty)
    by(duty.%num_legs%);
end

/*************************************
Number of complexing patterns
Count how many trips each on-duty leg is covered by
***************************************/

%N_complexing_patterns_not_first%(int num) =
  count(new_compressed_leg_set) where (not leg.%is_deadhead% and (count(leg_set) where (not is_first(leg(duty))) = num));
%N_complexing_patterns%(int num) =
  count(new_compressed_leg_set) where (not leg.%is_deadhead% and (count(leg_set) = num));


%0_complexing_patterns% = %N_complexing_patterns%(0);
%1_complexing_patterns% = %N_complexing_patterns%(1);
%2_complexing_patterns% = %N_complexing_patterns%(2);
%3_complexing_patterns% = %N_complexing_patterns%(3);
%4_complexing_patterns% = %N_complexing_patterns%(4);
%5_complexing_patterns% = %N_complexing_patterns%(5);
%6_complexing_patterns% = %N_complexing_patterns%(6);
%7_complexing_patterns% = %N_complexing_patterns%(7);
%8_complexing_patterns% = %N_complexing_patterns%(8);
%9_complexing_patterns% = %N_complexing_patterns%(9);

%0_complexing_patterns_not_first% = %N_complexing_patterns_not_first%(0);
%1_complexing_patterns_not_first% = %N_complexing_patterns_not_first%(1);
%2_complexing_patterns_not_first% = %N_complexing_patterns_not_first%(2);
%3_complexing_patterns_not_first% = %N_complexing_patterns_not_first%(3);
%4_complexing_patterns_not_first% = %N_complexing_patterns_not_first%(4);
%5_complexing_patterns_not_first% = %N_complexing_patterns_not_first%(5);
%6_complexing_patterns_not_first% = %N_complexing_patterns_not_first%(6);
%7_complexing_patterns_not_first% = %N_complexing_patterns_not_first%(7);
%8_complexing_patterns_not_first% = %N_complexing_patterns_not_first%(8);
%9_complexing_patterns_not_first% = %N_complexing_patterns_not_first%(9);

%leg_num_complexing_patterns% = 
    let flight_id = concat(flight_carrier, format_int(flight_number, "%d"), format_time(departure, "%d%b%Y")); 
    transform(equal_legs,
        count(leg_set) where (not leg.%is_deadhead% and 
                       flight_id = concat(flight_carrier, format_int(flight_number, "%d"), format_time(departure, "%d%b%Y"))));


%average_complexing_patterns% = avg(new_compressed_leg_set, 100 * %leg_num_complexing_patterns%);


/* 
** TURN-IN & TURN-OUT
**
** This code counts number of incoming/outgoing connections from each on-duty leg
** The purpose is to give a number on stability.
** The higher this number is, the worse.
*/




%prev_flight_number% = default(prev(leg(duty), flight_number), 0);
%prev_departure_airport_name%  = default(prev(leg(duty), departure_airport_name), "");
%next_flight_number% = default(next(leg(duty), flight_number), 0);
%next_departure_airport_name%  = default(next(leg(duty), departure_airport_name), "");


iterator turnin_leg_set =
  partition(leg) 
  by(%prev_flight_number%, %prev_departure_airport_name%); 
end
iterator turnout_leg_set =
  partition(leg) 
  by(%next_flight_number%, %next_departure_airport_name%); 
end


%N_crew_turnin_flights_non_duty_start%(int num) =
  count(new_compressed_leg_set) where (not leg.%is_deadhead% and (count(turnin_leg_set) where(%prev_flight_number% <> 0)) = num);
%N_crew_turnin_flights%(int num) =
  count(new_compressed_leg_set) where (not leg.%is_deadhead% and count(turnin_leg_set) = num);

%N_crew_turnout_flights_non_duty_end%(int num) =
  count(new_compressed_leg_set) 
  where (not leg.%is_deadhead% and (count(turnout_leg_set) 
                                    where(%next_flight_number% <> 0)) = num);
%N_crew_turnout_flights%(int num) =
  count(new_compressed_leg_set) where (not leg.%is_deadhead% and count(turnout_leg_set) = num);


%0_turnin_legs% = %N_crew_turnin_flights%(0);
%1_turnin_legs% = %N_crew_turnin_flights%(1);
%2_turnin_legs% = %N_crew_turnin_flights%(2);
%3_turnin_legs% = %N_crew_turnin_flights%(3);
%4_turnin_legs% = %N_crew_turnin_flights%(4);
%5_turnin_legs% = %N_crew_turnin_flights%(5);
%6_turnin_legs% = %N_crew_turnin_flights%(6);
%7_turnin_legs% = %N_crew_turnin_flights%(7);
%8_turnin_legs% = %N_crew_turnin_flights%(8);
%9_turnin_legs% = %N_crew_turnin_flights%(9);

%0_turnin_legs_non_duty_start% = %N_crew_turnin_flights_non_duty_start%(0);
%1_turnin_legs_non_duty_start% = %N_crew_turnin_flights_non_duty_start%(1);
%2_turnin_legs_non_duty_start% = %N_crew_turnin_flights_non_duty_start%(2);
%3_turnin_legs_non_duty_start% = %N_crew_turnin_flights_non_duty_start%(3);
%4_turnin_legs_non_duty_start% = %N_crew_turnin_flights_non_duty_start%(4);
%5_turnin_legs_non_duty_start% = %N_crew_turnin_flights_non_duty_start%(5);
%6_turnin_legs_non_duty_start% = %N_crew_turnin_flights_non_duty_start%(6);
%7_turnin_legs_non_duty_start% = %N_crew_turnin_flights_non_duty_start%(7);
%8_turnin_legs_non_duty_start% = %N_crew_turnin_flights_non_duty_start%(8);
%9_turnin_legs_non_duty_start% = %N_crew_turnin_flights_non_duty_start%(9);

%0_turnout_legs_non_duty_end% = %N_crew_turnout_flights_non_duty_end%(0);
%1_turnout_legs_non_duty_end% = %N_crew_turnout_flights_non_duty_end%(1);
%2_turnout_legs_non_duty_end% = %N_crew_turnout_flights_non_duty_end%(2);
%3_turnout_legs_non_duty_end% = %N_crew_turnout_flights_non_duty_end%(3);
%4_turnout_legs_non_duty_end% = %N_crew_turnout_flights_non_duty_end%(4);
%5_turnout_legs_non_duty_end% = %N_crew_turnout_flights_non_duty_end%(5);
%6_turnout_legs_non_duty_end% = %N_crew_turnout_flights_non_duty_end%(6);
%7_turnout_legs_non_duty_end% = %N_crew_turnout_flights_non_duty_end%(7);
%8_turnout_legs_non_duty_end% = %N_crew_turnout_flights_non_duty_end%(8);
%9_turnout_legs_non_duty_end% = %N_crew_turnout_flights_non_duty_end%(9);

/*** HOTEL COUNT ***/
/*** This code should be aligned with the general hotel night definition code ***/

%is_last_duty_in_trip% = 
   is_last(duty(trip));

iterator layover_duty_set =
  partition(duty)
  by(duty.%end_station%,
  %is_last_duty_in_trip%);
end

%num_nights_in_station% = 
    sum(duty_set,  %duty_rest_nr_of_nights% * %trip_num_crew%("ALL")) 
    where(not  %is_last_duty_in_trip%);

export %duty_rest_nr_of_nights% =
  let rest_start = last(leg(duty), leg.%end_lt%),
      rest_end   = next(duty(trip), first(leg(duty), leg.%start_lt%));
    if time_of_day(rest_start) < 06:00 and
       rest_end < round_up(rest_start, 24:00) then 2
    else if time_of_day(rest_start) >= 06:00 and
       rest_end < round_up(rest_start, 24:00) then 1
    else (round_up(rest_end, 24:00)  - round_down(rest_start, 24:00))/24:00 - 1;
