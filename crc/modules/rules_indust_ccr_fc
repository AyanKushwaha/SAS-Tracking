/* -*- crc -*- 
 *
 * $Header$
 *
 * Purpose:
 *   This module contains flight crew specific industrial rules used in Carmen Crew Rostering
 *   and as studio only in Carmen Crew Tracking.
 *
 * Sections:
 *   1. Duty rules (1x24, 3x24, 7x24, 4weeks, month)
 *   2. Block time rules
 *   3. Rest rules
 *   4. Freeday rules
 *   5: Maximum extended duties in period - Union agreement. Deprecated and removed
 *   6: Wop rules
 *   7: Restrictions
 * Created by:
 *   Henrik Albertson, 30-Jan-2005
 *
 * Major changes:
 *
 */

module rules_indust_ccr_fc inherits rules_indust_ccr

import freedays;
import base_product;
import compdays;
import training;
import keywords;
import parameters;
import accumulators;
import duty_time;

/****************************************************************
 * Section 1: Duty rules
 ***************************************************************/

/*
** Rule: Maximum duty time in 7x24 hrs
**
** 4ExNG: no longer applies
*/
redefine export %r_valid_duty_time_7x24_hrs% =
  False;

redefine %duty_time_7x24_hrs% =
  duty_time.%7x24_hrs%;

%duty_time_7x24_hrs_fwd% =
  roster.%duty_time_in_period%(wop.%start_UTC%, wop.%start_UTC% + 7*24:00, fundamental.%night_upg%, duty.union);

/*
** Rule: Maximum duty time in 4 weeks
*/
redefine %r_valid_duty_time_4_weeks% = crew.%has_restr_training_trip_start%;
redefine %duty_time_4_weeks% = duty_time.%4_weeks%;
redefine %duty_time_4_weeks_until_now% = roster.%duty_time_in_period%(crew.%utc_time%(trip.%start_week_end% - 4*7*24:00),
                               leg.%end_utc%,
                               fundamental.%night_upg%, 
                               duty.union);

/*
** Rule: Maximum duty time in calendar month
*/
redefine %r_valid_duty_time_calendar_month% =
  ((not crew.%is_passive_plus%(wop.%start_month_start%) and
    crew.%is_sks%) or
   (crew.%is_passive_plus%(wop.%start_month_start%) and
    crew.%is_homebase_sks%)) and
   crew.%in_variable_group_wop_start%;

redefine %duty_time_calendar_month% =
  if crew.%is_sks% or crew.%is_skn% then 
    oma16.%duty_time_in_interval_indust%( crew.%utc_time%(wop.%start_month_start%), 
                                          crew.%utc_time%(wop.%start_month_end%)) -
    duty_time.%passive_plus_reduction%(crew.%utc_time%(wop.%start_month_start%), 
                                       crew.%utc_time%(wop.%start_month_end%))
  else
    if crew.%part_time_change_in_month% then
      %duty_time_calendar_month_when_pt_80%
    else
      duty_time.%calendar_month%;
    
redefine %duty_time_calendar_month_until_now% =
  if crew.%is_sks% then
    oma16.%duty_time_in_interval_indust%( crew.%utc_time%(wop.%start_month_start%),
                                         leg.%co_end_utc%)
  else if crew.%part_time_change_in_month% then
    %duty_time_calendar_month_when_pt_80_until_now%
  else
    roster.%duty_time_in_period%(crew.%utc_time%(trip.%start_month_start%),  leg.%co_end_utc%,
                                 fundamental.%night_upg%, duty.union);

/* Calculates both before and after change of part_time_factor,
 * since monthly rule apply to both part- and full time crew now. */
%duty_time_calendar_month_when_pt_80% =
  (if crew.%part_time_factor_month_start% <> 100 then
     roster.%duty_time_in_period%(crew.%utc_time%(wop.%start_month_start%),
                                  crew.%utc_time%(crew.%part_time_change_date%),
                                  fundamental.%night_upg%, 
                                  duty.union) +
     roster.%duty_time_in_period%(crew.%utc_time%(crew.%part_time_change_date%),
                                  crew.%utc_time%(wop.%start_month_end%),
                                  fundamental.%night_upg%, 
                                  duty.union)
   else
     roster.%duty_time_in_period%(crew.%utc_time%(crew.%part_time_change_date%),
                                  crew.%utc_time%(wop.%start_month_end%),
                                  fundamental.%night_upg%, 
                                  duty.union)) -
  duty_time.%passive_plus_reduction%(crew.%utc_time%(crew.%part_time_change_date%),
                                     crew.%utc_time%(wop.%start_month_end%));

%duty_time_calendar_month_when_pt_80_until_now% =
  if crew.%part_time_factor_month_start% <> 100 then
    roster.%duty_time_in_period%(crew.%utc_time%(wop.%start_month_start%),
                                 crew.%utc_time%(crew.%part_time_change_date%),
                                 fundamental.%night_upg%, 
                                 duty.union) +
    roster.%duty_time_in_period%(crew.%utc_time%(crew.%part_time_change_date%),
                                 leg.%co_end_utc%,
                                 fundamental.%night_upg%, 
                                 duty.union)
  else
    roster.%duty_time_in_period%(crew.%utc_time%(crew.%part_time_change_date%),
                                 leg.%co_end_utc%,
                                 fundamental.%night_upg%, 
                                 duty.union);

/*
** Rule:
**    Max duty time in 1 calendar month
**
** Description:
**    Check that duty time in a calendar month doesn't exceed the number of
**    production days in the month x 9:30.
**
** Agreement:
**    FC K11 6.1.5.1 - applies for SKD, SKN and SKS (VG only)
**
*/

rule ind_max_duty_time_in_calendar_month_FC =
  valid roster.%check_rules% and
        not base_product.%is_tracking% and
        wop.%in_pp% and
        wop.%is_last_on_duty_in_pp_start_month% and
        (crew.%is_skd% or crew.%is_skn% or (crew.%is_sks% and (crew.%in_fixed_group_wop_start% or duty_time.%crew_changes_from_vg_to_fg%)));
  
  %duty_time_in_calendar_month% <= %max_duty_time_in_calendar_month% + 
    rule_exceptions.%overshoot_rel%(wop.%start_utc%);
  
  startdate  = wop.%start_utc%;
  severity = first(leg(wop), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = wop.%failobject_start%;
  failtext(Reltime value, Reltime limit) =
    %ind_max_duty_time_in_calendar_month_FC_failtext%(value,limit);
  remark "Coll: Max duty time in calendar month (FC K17)",
  planner "This rule checks that FC SH (excl. SKS VG) are not scheduled more"
          " than P x 9:30 hours of duty time in a calendar month. For SKN VG the limit is P x 8:48 hours.";
end

%ind_max_duty_time_in_calendar_month_FC_failtext%(Reltime value, Reltime limit) =
  rules.%failtext_rel%(format_time(wop.%start_month_start%, "Coll: Duty time %b"),
           value, limit);

%duty_time_in_calendar_month% =
  let start_utc = crew.%utc_time%(wop.%start_month_start%),
      stop_utc = crew.%utc_time%(wop.%start_month_end%);

  (duty_time.%duty_time_agreement_sel%(model_crew.%AGMT_SEL_FG%, wop.%start_month_start%, wop.%start_month_end%) +
   (if (not crew.%is_passive_plus%(wop.%start_month_start%) and
        (crew.%is_skd% or crew.%is_skn%)) or
       (crew.%is_passive_plus%(wop.%start_month_start%) and
        (crew.%is_homebase_skd%  or crew.%is_homebase_skn%)) then
      duty_time.%duty_time_agreement_sel%(model_crew.%AGMT_SEL_VG%, wop.%start_month_start%, wop.%start_month_end%) 
    else
      0:00)) -
  duty_time.%passive_plus_reduction%(start_utc,stop_utc);
  
  /**
  * Rule:
  *   Max 160 duty hours in calendar month for FD SKD & FD SKN & FD SKS (FG only for SKS) 
  *
  * Description:
  *   The rule check that the maximum duty time in calendar month is not exceeded. 
  *
  * Agreement:
  *   SKCMS-2041
  */
  export rule engagement_duty_time_in_calendar_month =
  valid roster.%check_rules% and
        base_product.%is_rostering% and
        wop.%start_hb% >= %pp_start% and
        (crew.%has_agmt_group_skd_fd% or 
         crew.%has_agmt_group_skn_fd% or 
       (crew.%has_agmt_group_sks_fd% and crew.%in_fixed_group_wop_start%)) and
        wop.%is_last_on_duty_in_month%;
                
  %engagement_duty_time_calendar_month% <= %engagement_max_in_month% + 
				rule_exceptions.%overshoot_rel%(wop.%start_UTC%);
  
  startdate  = wop.%start_UTC%;
  severity = first(leg(wop), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = wop.%failobject_start%;
  failtext(Reltime value, Reltime limit) =
    %engagement_duty_time_in_calendar_month_failtext%(value, limit);
  remark "(CCR) Engagement: Max duty time in calendar month is 160 hrs",
  planner "The rule check that the maximum duty time in calendar month is not exceeded." 
          "The rule is valid for FD SKD, SKN and SKS FG crew. The rule is part"
          " of the engagement initiative and is not part of any union agreement";
end      



%engagement_duty_time_calendar_month% = oma16.%duty_time_in_interval_indust_indep%(crew.%utc_time%(wop.%start_month_start%), 
                                          crew.%utc_time%(wop.%start_month_end%));

%engagement_max_in_month% = 160:00;

%engagement_duty_time_in_calendar_month_failtext%(Reltime value, Reltime limit) =
  rules.%failtext_rel%(format_time(wop.%start_month_start%, "Engagement: Duty time %b"),
           value, limit);

  /*SKCMS-1796
  /*No early check-in to simulator after day off*/
export rule ind_training_early_sim_after_day_off =
    valid system_db_parameters.%training_rules_oct2018%(duty.%start_scheduled_hb%) and
        duty.%is_simulator% and
        duty.%in_pp% and
        ((prev(duty(roster),duty.%is_freeday%) or
        prev(duty(roster),duty.%is_cmp%) or
        prev(duty(roster),duty.%is_vacation%)) or 
        is_first(duty(wop)));

        time_of_day(duty.%start_scheduled_hb%) >= 05:15-
      
        rule_exceptions.%overshoot_rel%(duty.%start_utc%);
        
  startdate  = duty.%start_utc%;
  severity = first(leg(wop), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));        
  failobject = duty.%failobject_start%;
  failtext(Reltime value, Reltime limit) =
        %early_sim_after_day_off_failtext%(value,limit);
    remark "Earliest check-in for Simulator duty is 0515 after day off",
    planner "Earliest check-in for simulator duty is 0515 after day off";
end


%early_sim_after_day_off_failtext%(Reltime value, Reltime limit) =
  rules.%failtext_rel%(format_time(wop.%start_month_start%, "Earliest check-in to sim duty"),
           value, limit);

 

 
 
 /*SKCMS-1837
 /* Max 2 night simulator sessions in a row*/
export rule max_night_simulators_in_row =
    valid system_db_parameters.%training_rules_oct2018%(duty.%start_scheduled_hb%) and 
    duty.%is_simulator% and
    duty.%in_pp% and
    %is_night_shift%;
    
    
   %nr_of_night_simulator_last_48% <= 2 + rule_exceptions.%overshoot_int%(wop.%start_utc%);
        
  startdate  = duty.%start_utc%;
  severity = first(leg(wop), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));        
  failobject = duty.%failobject_end%;   
  failtext(Int value, Int limit) =
        %max_nr_of_night_simulations_failtext%(value,limit);
        
        
    remark "Max nr of night simulator sessions in a row",
    planner "This rule checks that crew has not more than max 2 night simulator sessions in a row. This is according to decision in FOMT-R.";
end

%nr_of_night_simulator_last_48% = 
let current_start_scheduled_hb = duty.%start_scheduled_hb%;
count(duty(roster)) 
        from (current) backwards
        while (current_start_scheduled_hb < (duty.%start_scheduled_hb% + 48:00 + %night_shift_end% - %night_shift_start%) or
        (current_start_scheduled_hb >= (duty.%start_scheduled_hb% + 48:00 + %night_shift_end% - %night_shift_start%) and
        current_start_scheduled_hb < (duty.%end_scheduled_hb% + 48:00) + 12:00)
        )
        where (duty.%is_simulator% and %is_night_shift%);
        
%nr_of_night_simulator_last_6% = 
let current_start_scheduled_hb = duty.%start_scheduled_hb%;
count(duty(roster)) 
        from (current) backwards
        while (current_start_scheduled_hb < (duty.%start_scheduled_hb% + 6:00 + %night_shift_end% - %night_shift_start%) or
        (current_start_scheduled_hb >= (duty.%start_scheduled_hb% + 6:00 + %night_shift_end% - %night_shift_start%) and
        current_start_scheduled_hb < (duty.%end_scheduled_hb% + 6:00) + 6:00)
        )
        where (duty.%is_simulator% and %is_night_shift%);
        
%is_night_shift% = any(leg(duty), scale_time(leg.%start_hb%, leg.%end_hb%, 0, %night_shift_start%, %night_shift_end%, 1) > 0:00) where (leg.%is_simulator%);

%max_nr_of_night_simulations_failtext%(Int value, Int limit) =
  rules.%failtext_int%(format_time(wop.%start_month_start%, "Max night simulators in a row."),
           value, limit);

%night_shift_start% = parameter 00:30 remark "Max 2 night simulator sessions in a row, night shift start";
%night_shift_end% = parameter 06:00 remark "Max 2 night simulator sessions in a row, night shift end";




/* SKCMS-1838
** Rule:
**    Earliest check-in at 12.00 after two consecutive night simulator sessions
**
** Description:
**    This rule checks that the earliest check-in time after two consecutive
**    night simulator sessions is no earlier than 12.00, as decided at FOMT-R, autumn 2017.
**
**    Rule does not apply to freedays.
*/
export rule ind_training_earliest_ci_after_night_simulators =
    valid system_db_parameters.%training_rules_oct2018%(duty.%start_scheduled_hb%) and 
        duty.%in_pp% and
        not (prev(duty(roster),duty.%is_freeday%) or
        prev(duty(roster),duty.%is_cmp%) or
        prev(duty(roster),duty.%is_vacation%) or
        duty.%is_freeday% or
        duty.%is_cmp% or
        duty.%is_vacation%) and
        %nr_of_night_simulator_last_48% >= 2 and
        %nr_of_night_simulator_last_6% = 0;
        
        
    time_of_day(duty.%start_scheduled_hb%) >= 12:00-      
    rule_exceptions.%overshoot_rel%(wop.%start_utc%);
        
  startdate  = wop.%start_utc%;
  severity = first(leg(wop), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));        
    failobject = wop.%failobject_end%;
    failtext(Reltime value, Reltime limit) =
        %early_checkin_after_consecutive_night_simulator_failtext%(value,limit);
    remark "Earliest check in is at 12.00 after 2 consecutive night simulator sessions.",
    planner "This rule checks that earliest check in is at 12.00 after 2 consecutive night simulator sessions."
    " This is according decision in FOMT-R. Period defining a night simulator is set through parameter xxxx.";
end

%early_checkin_after_consecutive_night_simulator_failtext%(Reltime value, Reltime limit) =
  rules.%failtext_rel%(format_time(wop.%start_month_start%, "No early check-in after two night sim sessions in a row"),
           value, limit);


/*
**  Maximum duty time in calendar month = number of production days x 9:30
**
** There can be a problem however in CCR/Matador that e.g. if the first duty
** assigned exceeds 9:30, it will be considered illegal. To solve this, the
** number of days that are available for production is used instead of just the
** number of production days assigned:
**
** VG: number of days qualifying as F-days - minimum F-day requirement, or
**     number of assigned production days, whichever is the greater.
**
** FG: F-days, and any other time-off days, are assigned before any production, 
**     so number of FG-days in month minus number of F/time-off days, or
**     number of assigned production days, whichever is the greater.
*/

%max_duty_time_in_calendar_month% =
  (duty_time.%nr_p_days_fg_in_1_month% +
   (if (crew.%is_skd% or crew.%is_skn%)
    then duty_time.%nr_p_days_vg_in_1_month%(pp.%start_month%,pp.%end_month%)
    else 0)
  ) * duty_time.%max_duty_time_factor%;


/*
** Rule: 
**    Maximum duty time in calendar month
**
** Description:
**    The rule checks that the duty time including night upgrade in a 
**    calendar month is less than the maximum allowed. The period is 
**    always a calendar month so it is enough to check if the
**    rule is valid for any period in the month.
**    According to change request the rule is now valid for both part
**    time and full time SKS FC, but not 'LA8' parttime.
**
**    NB! Assuming only 1 part time change in month
**
** Agreement:
**    FC 13:48
**
**    K11: 6.1.5 - applies only for VG, not for FG.
*/
export rule ind_max_duty_time_in_calendar_month =
  valid not system_db_parameters.%k19_160hrs_duty_rule%(duty.%start_hb%) and
        roster.%check_rules% and
        %r_valid_duty_time_calendar_month% and
        wop.%start_hb% >= %pp_start% and
        wop.%is_last_on_duty_in_month% and
        not (((not crew.%is_passive_plus%(wop.%start_month_start%) and
               crew.%is_sks%) or
              (crew.%is_passive_plus%(wop.%start_month_start%) and
               crew.%is_homebase_sks%)) and 
             default(freedays.%parttime_code_wop_start% = "LA8", false)) and
        /* Just so the parameter will be attached with the rule in the form */ 
        (%use_100_percent_limit_part_time_SKS_FD_p% or True);
        
  %duty_time_calendar_month% <= %max_in_month_wop% + 
				rule_exceptions.%overshoot_rel%(wop.%start_UTC%);
        
  startdate  = wop.%start_UTC%;
  severity = first(leg(wop), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %ind_max_duty_time_in_calendar_month_FC_SKN_SKL_SKS_failobject%;
  failtext(Reltime value, Reltime limit) =
    %ind_max_duty_time_in_calendar_month_FC_SKN_SKL_SKS_failtext%(value, limit);
  remark "(CCR) Coll: Max duty time in calendar month [FC SKS]",
  planner "The rule checks that the maximum duty in calendar month"
          " is not exceeded."
          " The rule is valid for SKS FC SH VG crew.";
end
  
%use_100_percent_limit_part_time_SKS_FD_p% =
  parameter false
  remark "Use 100 percent limit for part-time SKS FD";  
  
%max_in_month_wop% =
  if %100_percent_limit_for_part_time_SKS_FD% then
     duty_time.%max_duty_in_month_fc%
  else
    duty_time.%max_in_month_wop%;
    
%100_percent_limit_for_part_time_SKS_FD% = 
  crew.%is_sks% and %flight_crew% and 
  %use_100_percent_limit_part_time_SKS_FD_p% and 
  not (default(freedays.%parttime_code_wop_start% = "LA8", false));
  
%ind_max_duty_time_in_calendar_month_FC_SKN_SKL_SKS_failtext%(Reltime value, Reltime limit) =
  rules.%failtext_rel%(format_time(wop.%start_month_start%, "Coll: Duty time %b"),
           value, limit);

%ind_max_duty_time_in_calendar_month_FC_SKN_SKL_SKS_failobject% = 
  let overshoot = default(rule_exceptions.%overshoot_rel%(wop.%start_UTC%),0:00),
      month = wop.%start_month_start%,
      max_in_month = duty_time.%max_in_month_wop%;
  default(
          last(leg(wop),
               prev(leg(chain),
                    next(leg(chain),leg.%failobject_departure%)) 
               where(%duty_time_calendar_month_until_now% < max_in_month +
                     overshoot)) 
          where(round_down_month(leg.%start_hb%) = month),
          wop.%failobject_start%);    

/*
** Rule: 
**    Maximum duty time in calendar month for SKS crew with la8
**
** Description:
**    The rule checks that the duty time including night upgrade in a 
**    calendar month is less than the maximum allowed. The period is 
**    always a calendar month so it is enough to check if the rule is 
**    valid for any period in the month.
**    As opposed to "(CCR) Coll: Max duty time in calendar month" this
**    rule handles crew with parttime according to swedish law.
**
**    NB! Assuming only 1 part time change in month
**
** Agreement:
**
**
**
*/
export rule ind_max_duty_time_in_calendar_month_LA8_FC_SKS =
  valid not system_db_parameters.%k19_160hrs_duty_rule%(wop.%start_hb%) and
        roster.%check_rules% and
        wop.%start_hb% >= %pp_start% and
        ((not crew.%is_passive_plus%(%contract_or_month_start_hb%) and
          crew.%is_sks%) or
         (crew.%is_passive_plus%(%contract_or_month_start_hb%) and 
          crew.%is_homebase_sks%)) and
        (crew.%in_variable_group_wop_start%) and
        crew.%has_some_part_time_in_month% and
        (wop.%is_last_on_duty_in_month% and
         %crew_has_la8_contract_wop_start% or
         %last_wop_with_la8_contract%);
        
  %duty_time_calendar_month_LA8% <= %max_in_month_la8% + 
				rule_exceptions.%overshoot_rel%(wop.%start_UTC%);
        
  startdate  = wop.%start_UTC%;
  severity = first(leg(wop), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %ind_max_duty_time_in_calendar_month_LA8_FC_SKS_failobject%;
  failtext(Reltime value, Reltime limit) =
    %ind_max_duty_time_in_calendar_month_LA8_FC_SKS_failtext%(value, limit);
  remark "Coll: Max duty time in calendar month [FC SKS LA8]",
  planner "The rule checks that the maxmimum duty in calendar month"
          " is not exceeded. The rule is valid for SKS FC SH VG crew,"
          " who have part time code LA8 contracts.";
end

/* Crew can change group anywhere in month, but only
** the time with La8 contract should be counted. Crew could however
** change from VG->FG or vice versa but still be on LA8 contract.
** Check is now done by checking if crew changes contract or it is the last
** wop with LA8 contract in month*/

%max_in_month_la8% =
  if crew.%in_fixed_group%(%contract_or_month_start_hb%) then
    duty_time.%nr_available_days_in_period_fg%(%contract_or_month_start_hb%, 
                                               %contract_or_month_end_hb%) * 9:30
  else
    duty_time.%max_duty_in_month_fc_pt_vg%;

%crew_has_la8_contract_wop_start% =
  default(freedays.%parttime_code_wop_start% = "LA8", false); 

%last_wop_with_la8_contract% =
  let contract_end = %contract_or_month_end_utc%;
  %crew_has_la8_contract_wop_start% and
  default(next(wop(chain), wop.%start_day% > contract_end)
          where(wop.%is_on_duty%), false);

/* Max of either start of month or the start of the current contract based on the 
** current WOP. It is assumed that crew never changes contract in the 
** middle of a WOP.*/
%contract_or_month_start_utc% =
  crew.%utc_time%(nmax(crew.%agreement_at_date_valid_from%(wop.%start_hb%), 
                       wop.%start_month_start%));
  
%contract_or_month_start_hb% =
  nmax(crew.%agreement_at_date_valid_from%(wop.%start_hb%), 
                       wop.%start_month_start%);

/* Minimum of either end of month or end of current contract */  
%contract_or_month_end_utc% =
  crew.%utc_time%(nmin(crew.%agreement_at_date_valid_to%(wop.%start_hb%),
                       wop.%start_month_end%));
  
%contract_or_month_end_hb% =
  nmin(crew.%agreement_at_date_valid_to%(wop.%start_hb%),
                       wop.%start_month_end%);
    

%duty_time_calendar_month_LA8% =
  roster.%duty_time_in_period%(%contract_or_month_start_utc%, 
                                %contract_or_month_end_utc%, 
                                fundamental.%night_upg%, 
                                duty.union) -
  duty_time.%passive_plus_reduction%(%contract_or_month_start_utc%, 
                                     %contract_or_month_end_utc%);

%ind_max_duty_time_in_calendar_month_LA8_FC_SKS_failtext%(Reltime value, Reltime limit) =
  rules.%failtext_rel%(format_time(wop.%start_month_start%, "Coll: Duty time in month %b"),
           value, limit);

%ind_max_duty_time_in_calendar_month_LA8_FC_SKS_failobject% = 
  let overshoot = default(rule_exceptions.%overshoot_rel%(wop.%start_UTC%),0:00),
      month = wop.%start_month_start%,
      check_start = %contract_or_month_start_utc%,
      max_in_month = %max_in_month_la8% + overshoot;
  default(
          last(leg(wop),
               prev(leg(chain),
                    next(leg(chain),leg.%failobject_departure%)) 
               where(roster.%duty_time_in_period%(check_start, leg.%co_end_utc%, 
                                                  fundamental.%night_upg%, 
                                                  duty.union) < max_in_month)) 
          where(round_down_month(leg.%start_hb%) = month),
          wop.%failobject_start%);

/*
** Rule: No duty same day when check out later than 0200
**
** Doesn't apply to pilots on conversion course or to
** instructors' simulator duty.
**
** NB! This is also used by the rule checking no duty
** with early check-in on the day after a check-out after 0200. 
*/
redefine %r_valid_no_duty_same_day_if_late_co% = 
  crew.%has_agmt_group_sks_fd% and
  not crew.%has_restr_training_capt_dct_foc_refr_wop_start% and
  not (trip.%is_any_sim_instr% and
       default(prev(trip(wop),trip.%is_any_sim_instr%),
               true));

redefine %trip_start_same_day_as_prev_trip_end_with_late_check_out% =
  prev(trip(wop), trip.%start_scheduled_day% <> trip.%end_scheduled_day%) and
  trip.%start_day% = %prev_trip_end_scheduled_day%;
  
%prev_trip_end_scheduled_day% = prev(trip(wop), trip.%end_scheduled_day%);

redefine %prev_trip_end_od% =
  prev(trip(wop), trip.%end_scheduled_od%);
  
/*
** Rule:
**    Max 4 days in wop when pilot under education
**
** Description:
**    When pilot is under education at most 4 working days between off duty
**    periods are allowed. This includes all type of activities (course,
**    simulator training, school flights, normal production etc).
**    If more than 2 days are in the time period 00:00-06:00, only 3 working
**    days are allowed.
**
** Agreement:
**    FC 1:3 mom3b
*/
export rule ind_max_4_working_days_when_pilot_education_FC =
  valid roster.%check_rules% and
        wop.%in_pp_extended% and wop.%is_on_duty% and
        not crew.%is_leased_wop_start% and
        crew.%has_restr_training_capt_dct_foc_refr_wop_start% and
        training.%wop_is_in_school_period_min_7x24% and
        any(leg(wop), leg.%is_simulator% or leg.%is_school_flight%);
        
   %wop_days_with_limited_training_activity% <= %max_working_days_pilot_education% + 
		rule_exceptions.%overshoot_int%(wop.%start_UTC%);
        
  startdate  = wop.%start_UTC%;
  severity = first(leg(wop), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %ind_max_4_working_days_when_pilot_education_FC_failobject%;
  failtext(Int value, Int limit) =
    rules.%failtext_int%("Coll: Education workdays",value,limit);
  remark "Coll: Max working days for pilot under education",
  planner "The rule checks that the maximum allowed working days for"
	        " pilots under education is not exceeded. The limit is 4 days"
          " unless more than 2 of these are night duties (00:00-06:00)."
          " If so, the limit is 3 days.";
end

%wop_days_with_limited_training_activity% =
 count(duty(wop)) where (any(leg(duty), %limited_training_activity%));


%limited_training_activity% = 
  leg.%is_simulator% or leg.%is_school_flight%;

%ind_max_4_working_days_when_pilot_education_FC_failobject% =
  last(leg(wop),
       prev(leg(wop),next(leg(wop),leg.%failobject_departure%)) where
       (wop.%days_in_period%(wop.%start_day%, leg.%end_date% + 24:00) <= 
        %max_working_days_pilot_education% +
        rule_exceptions.%overshoot_int%(wop.%start_UTC%)));

%max_working_days_pilot_education% =
  if  %number_of_night_duties_pilot_edu% <= %max_night_duties_when_pilot_edu%
  then
    %max_working_days_when_pilot_edu%
  else
    %max_working_days_when_pilot_edu_night%;

%number_of_night_duties_pilot_edu% =
  count(duty(wop))
  where (not duty.%is_blank_day% and
         %duty_is_night_duty_pilot_edu%);

%duty_is_night_duty_pilot_edu% =
  scale_time(duty.%start_hb%, duty.%end_hb%, 0, 0:00, 06:00, 1) > 0:00;

%max_working_days_when_pilot_edu% = 4;
%max_night_duties_when_pilot_edu% = 2;
%max_working_days_when_pilot_edu_night% = 3;

/*
** Rule: Maximum number of night duties in a working period
*/
redefine %r_valid_max_night_duties_in_wop% = true;
redefine %check_consecutive_nights% = true;
/* Rule depends on the fact that the max number of consecutive night duties <= max number of night duties + 1 */
redefine %max_night_duties% = 3;
redefine %max_consecutive_night_duties% = 2;

/*
** Rule:
**    Max SubQ dutyhours in rolling 7 calendar days.
**
** Description:
**    Check that a pilot is not scheduled more than 47:30 hours
**    in any consecutive 7 calendar days.
**
** Agreement:
**    GM 6.1.5.1 A (Short haul pilots).
**
** NB! The same rule exists in rules_indust_ccp_fc
*/

rule ind_subq_duty_time_in_7x24_all =
  valid roster.%check_rules%
        and %is_roster%
        and not trip.%is_ski%
        and not trip.%is_regarded_sk_sh_agmt%
        and %agreement_valid%("7x24_fd_sks", trip.%start_UTC%)
        and duty.%in_pp% 
        and duty_period.%is_on_duty%;
        
  %duty_time_7x24% <= %max_duty_time_in_7x24% -
                              %p_buffer_max_duty_time_7x24% +
                              rule_exceptions.%overshoot_rel%(duty.%start_utc%);
                              
  startdate  = duty.%start_UTC%;
  severity = first(leg(duty), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %ind_subq_duty_time_in_7x24_all_failobject%;
  failtext(Reltime value, Reltime limit) =
    rules.%failtext_rel%("Coll: Max duty time 7x24", value, limit);
  remark "(CCR) Coll: Max duty time 7x24",
  planner "This rule checks that a short-haul pilot is not scheduled more "
          " then 47:30 hours of subq duty time in any 7 calendar days";
end

%duty_time_7x24% =
  /* If duty spans midnight we must check from both duty start day AND end day */
  if duty.%start_day% <> duty.%end_day% then
    nmax(duty_time.%7x24_hrs_in_period%(add_weeks(duty.%end_day_hb_utc%, -1),
                                        duty.%end_day_hb_utc%, 
                                        false, 
                                        duty.union),
         duty_time.%7x24_hrs_in_period%(add_weeks(duty.%end_day_hb_utc% + 24:00, -1),
                                        duty.%end_day_hb_utc% + 24:00, 
                                        false, 
                                        duty.union))
  else
    duty_time.%7x24_hrs_in_period%(add_weeks(duty.%end_day_hb_utc% + 24:00, -1),
                                   duty.%end_day_hb_utc% + 24:00, 
                                   false, 
                                   duty.union);

%ind_subq_duty_time_in_7x24_all_failobject% = 
  default(%_ind_subq_duty_time_in_7x24_all_failobject%, duty.%failobject_start%);

%_ind_subq_duty_time_in_7x24_all_failobject% =
  let limit =  %max_duty_time_in_7x24% -
               %p_buffer_max_duty_time_7x24% +
               default(rule_exceptions.%overshoot_rel%(duty.%start_utc%), 0:00);
  if duty.%start_day% = duty.%end_day% then
    first(leg(duty), leg.%failobject_departure%) 
    where (duty_time.%7x24_hrs_in_period%(add_weeks(duty.%end_day_hb_utc% + 24:00, -1), 
                                          leg.%co_end_utc%, 
                                          false, 
                                          duty.union) 
           > limit)
  else
    first(leg(duty), leg.%failobject_departure%)
    where(duty_time.%7x24_hrs_in_period%(
            add_weeks(leg.%start_day_hb_utc%(leg.%homeairport%, leg.%start_utc%) + 24:00, -1),
            nmin(leg.%start_day_hb_utc%(leg.%homeairport%, leg.%start_utc%) + 24:00,
                 leg.%co_end_utc%), false, duty.union) >= limit);

%max_duty_time_in_7x24% = 47:30;

/*
** Rule:
**   No PC/OPC/SKILL TEST at night
**
** Description:
**   According to decision at FOMT-R 13Jun2017, OPC/PC and Skill test
**   shall not be performed during night time, 0000-0515. The forbidden time period applies
**   to briefing before and after the simulator slot as well.
**
** Valid for:
**   All FD
**
** System:
**   Rostering, Tracking
**
** Note:
**   Skill test is always in combination with a PC/OPC task so there is no need to check for
**   the skill test attribute.
*/
rule trng_no_pc_opc_skilltest_at_night_FC =
  valid rule_exceptions.%rule_on%(leg.%start_lt%) and
        %trng_no_pc_opc_skilltest_at_night_valid%;

  not %overlaps_night_time%(%activity_start_time%, %activity_end_time%);

  startdate = leg.%start_lt%;
  severity = %severity_filter_int%(leg.%start_lt%, %duty_lh_region%);
  failobject = leg.%failobject_departure%;
  failtext "OPC/PC/Skill test (including briefing/debriefing) is not allowed at night: 0000-0515";
  remark "No PC/OPC/Skill test at night",
  planner "This rule checks that PC/OPC and Skill Test is not performed during night: 0000-0515";
end

%trng_no_pc_opc_skilltest_at_night_valid% =
  roster.%check_rules% and
  leg.%in_pp% and
  leg.%is_pc_or_opc%;

/* Include briefing/debriefing time, modeled as checkin/out time 
   Uses local time
*/
%activity_start_time% = leg.%start_lt% - leg.%check_in%;
%activity_end_time% = leg.%end_lt% + leg.%check_out%;

%overlaps_night_time%(Abstime start_time, Abstime end_time) =
  scale_time(start_time, end_time, 0, 00:00, 05:15, 1) > 0:00;


/****************************************************************
 * Section 2: Block time rules
 ***************************************************************/

/*
** Rule: Max block time in 3 calendar months
**
** Description:
**   Check that long haul flight crew does not exceed 260 block hours
**   in 3 consecutive months.
** 
** Agreement:
**   K09 (Change Request 197)
*/

rule ind_max_block_time_in_3_months_FC =
  valid roster.%check_rules% and
        crew.%is_long_haul_pp_start% and
        trip.%starts_in_pp% and
        trip.%is_last_on_duty_in_month%;
  %block_time_3_months% <= 
  %limit_block_time_3_months% + rule_exceptions.%overshoot_rel%(trip.%start_utc%);
  startdate = trip.%start_utc%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %ind_max_block_time_3_months_FC_failobject%;
  failtext(Reltime value, Reltime limit) = 
    %ind_max_block_time_in_3_months_FC_failtext%(value, limit);
  remark "Coll: Max block hours in 3 months",
  planner "The rule checks that the total block time in 3 calendar months is ", 
          " less than max allowed. Only valid for SKI crew.";
end

%block_time_3_months% =
  let start = add_months(trip.%start_month_start%, -2),
      stop = add_months(start, 3);
  accumulators.%block_time_in_period_excluding_bought_days%(start, stop);
  
%limit_block_time_3_months% = 260:00;

%ind_max_block_time_3_months_FC_failobject% =
  let start = add_months(trip.%start_month_start%, -2);
  default(
    first(leg(chain), leg.%failobject_departure%) 
    where (leg.%is_active_flight% and 
           leg.%in_pp% and
           accumulators.%block_time_in_period_excluding_bought_days%(start, leg.%end_hb%) >
           %limit_block_time_3_months%),
    trip.%failobject_start%);
  
%ind_max_block_time_in_3_months_FC_failtext%(Reltime value, Reltime limit) =
  let start_month = format_time(add_months(trip.%start_month_start%, -2), "%02d%b");
  rules.%failtext_rel%(concat("Coll: BLH 3 months ", start_month, "->"), value, limit);
  

                                                      
/*
** Rule: Max block time in 12 calendar months
**
** Description:
**   Check that long haul flight crew does not exceed 900 block hours
**   in 12 consecutive months.
** 
** Agreement:
**   FC 1:5(3)B
*/

rule (off) ind_max_block_time_in_rolling_12_months_fc =
  valid roster.%check_rules% and
        crew.%is_long_haul_pp_start% and
        trip.%starts_in_pp% and
        trip.%is_last_on_duty_in_month%;
  %block_time_12_months% <= 
  %limit_block_time_12_months% + rule_exceptions.%overshoot_rel%(trip.%start_utc%);
  startdate = trip.%start_utc%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %block_time_12_months_fc_failobject%;
  failtext(Reltime value, Reltime limit) = 
    %block_time_in_12_months_fc_failtext%(value, limit);
  remark "Coll: Max block time rolling 12 calendar months [SKI]",
  planner "The rule checks that the total block time in 12 calendar months is ", 
          " less than max allowed. Only valid for SKI crew.";
end

%block_time_12_months% =
  let start = add_months(trip.%start_month_start%, -11),
      stop = add_months(start, 12);
  accumulators.%block_time_in_period_excluding_bought_days%(start, stop);
  
%block_time_12_months_fc_failobject% =
  let start = add_months(trip.%start_month_start%, -11),
      stop = add_months(start, 12),
      limit = %limit_block_time_12_months% + 
              default(rule_exceptions.%overshoot_rel%(trip.%start_utc%), 0:00);
  default(first(leg(chain), leg.%failobject_departure%)
          where(leg.%is_on_duty% and
                round_up_month(leg.%start_date%) = stop and
                accumulators.%block_time_in_period_excluding_bought_days%(start, leg.%end_hb%)
                > limit),
          trip.%failobject_start%);  
  
%block_time_in_12_months_fc_failtext%(Reltime value, Reltime limit) =
  let start_month = format_time(add_months(trip.%start_month_start%, -11), "%b%02y");
  rules.%failtext_rel%(concat("Coll: BLH 12 months ", start_month, "->"), value, limit);
  
%limit_block_time_12_months% = 900:00;

/*
** Rule:
**    4 production days followed by 2 freedays should only occur a limited number of times
**
** Description:
**    The rule checks that 4 production days followed by 2 freedays does not occur
**    more times than allowed per month. The limit is configurable through parameters.
**    The period consisting the 4+2 days should belong to the month where the second
**    freeday occurs. E.g If the 4 production days are placed between the dates
**    26-29 September in a month, and the freedays are  placed on 30 September and
**    1 October, this 4P+2F period belongs to October.
**    Only the planning month is checked by this rule. Empty days are also regarded
**    as freedays in the case of this rule.
**
** Agreement:
**     K17
**
** Valid for:
**     FD variable groups for SKD, SKN, SKS (an almost identical rule also exists for CC)
**
** Note:
**     * The rule only checks wops from pp_start and one month forward,
**       so it is assumed that pp_start equals the 1st of a month.
**     * A 4p2f that ends the last day of the month is always counted as a 4p2f,
**       no matter if the next month starts with a production day or not.
*/

rule ind_max_4P_followed_by_2F_per_month_FC =
  valid %ind_max_4P_followed_by_2F_per_month_valid_4P_wop%;
  %nr_4P_followed_by_2F_in_planning_month_until_wop_end%
    <= (if crew.%has_agmt_group_skd_fd% then %max_nr_4P_followed_by_2F_per_month_SKD_FD% else
        if crew.%has_agmt_group_skn_fd% then %max_nr_4P_followed_by_2F_per_month_SKN_FD% else
        if crew.%has_agmt_group_sks_fd% then %max_nr_4P_followed_by_2F_per_month_SKS_FD% else
        void(int)) +
        rule_exceptions.%overshoot_int%(wop.%start_utc%);

  startdate = wop.%start_utc%;
  severity = first(leg(wop), %severity_filter_int%(leg.%start_hb%, %duty_lh_region%));
  failobject = wop.%failobject_start%;
  failtext(Int value, Int limit) = rules.%failtext_int%("Coll: 4P followed by 2F (per month)", value, limit);
  remark "(CCR) Coll: Working periods of 4P followed by 2F must not occur too often per month.",
  planner "4 production days followed by 2 freedays should occur a limited number of times in a month."
          " The period consisting the 4+2 days should belong to the month where the second freeday occurs.";
end

%max_nr_4P_followed_by_2F_per_month_SKD_FD% = parameter 6 minvalue 0 maxvalue 6 remark "Max 4P+2F limit for SKD FD";
%max_nr_4P_followed_by_2F_per_month_SKN_FD% = parameter 2 minvalue 0 maxvalue 6 remark "Max 4P+2F limit for SKN FD";
%max_nr_4P_followed_by_2F_per_month_SKS_FD% = parameter 6 minvalue 0 maxvalue 6 remark "Max 4P+2F limit for SKS FD";

/****************************************************************
 * Section 3: Rest rules
 ***************************************************************/

/*
** Rule: Night rest required before/after short stop not at home base
**
** K11 - valid for SKN again!
*/
redefine %r_valid_night_rest_surrounding_short_stop% = 
  crew.%is_short_haul_trip_start%
  and trip.%is_on_duty% 
  and not trip.%is_rest% 
  and not trip.%is_bought%;

/*
** Rule:
**    No split duties 
**
** Description:
**    The rule checks that split duty according to the Subpart Q definition
**    is not assigned:
**
**    1) Before K11 for SKN FC
**
**    2) After K11 for SKD/SKN/SKS FC at homebase
**
**    It is necessary because FC SH after K11 no longer have any union rules 
**    for minimum rest, and Subpart Q allows split duty at homebase,
**    but the FC unions don't want it!
**
**    NB! A separate rule in rules_indust_ccp_fc checks for split duty after
**    a duty period, but this CCR version is needed to prevent Matador
**    assigning two trips with split duty between them.
**
** Agreement:
**    OSL 6.1.5 (CR 306)
**    K11 FC SH SKD/SKN/SKS 6.1.8
*/

rule ind_no_split_duty_at_homebase_fc =
  valid trip.%check_rules%
        and not trip.%is_ski%
        and duty.%arrives_at_homebase% 
        and trip.%in_pp%
        and trip.%is_on_duty% 
        and not is_last(trip(wop)) 
        and not last(duty(trip),duty.%is_split_duty_exception%) 
        and rule_exceptions.%rule_on%(trip.%end_utc%);

  not (duty_period.%is_split% and duty_period.%is_first_duty_in_duty_period%);
  
  startdate = trip.%end_utc%;
  severity =  first(leg(trip), %severity_filter_int%(leg.%start_utc%,%duty_lh_region%));
  failobject = next(trip(roster), trip.%failobject_start%);
  failtext "Coll: Split duty not allowed at homebase";
  remark "Coll: No split duties at homebase",
  planner "The rule checks that no split duty " 
          " is scheduled for flight deck at homebase";
end
  
/****************************************************************
 * Section 4: Freeday rules
 ***************************************************************/

redefine export %crew_may_have_f36% = False;

/*
** Rule: Min number of freedays in calendar month.
*/
redefine export %r_valid_freedays_in_1_month% =
  freedays.%r_valid_freedays_in_1_month% and
  not training.%month_is_in_school_period_min_7x24%;

redefine %r_valid_freedays_in_2_months% =
  (crew.%has_some_part_time_in_month% or
   not freedays.%gm_agreement_valid%(wop.%start_day%)) and
  crew.%is_short_haul_wop_start% and
  not crew.%is_fdrc_wop_start%;

/*
** Rule: Min freedays before/around vacation
*/
redefine %r_valid_min_freedays_in_cnx_with_VA% = 
  wop.%in_pp_extended% or
  ((wop.%start_day% -2 * 24:00) < %pp_end%);

/*
** Rule: Check the check-in time for a wop.
*/
redefine %_ci_limitation_after_2F% =
  wop.%end_od% > %co_limit_before_2F% or wop.%end_od% = 0:00;

/*
 * Check-out limit before 2 F-days applies normally when next check-in is before
 * 0800, but for pilots after FC K11, the time-off period must be at least 62:00
 * so check-out limit applies when next check-in is < 62:00 later
 */

redefine %ci_limit_after_2F% =
    if wop.%start_hb% < %ci_limit_after_2F_abs% then
      time_of_day(%ci_limit_after_2F_abs%)
    else
      0:00;

%ci_limit_after_2F_abs% =
  prev(wop(roster),wop.%end_hb% + freedays.%time_off_minimum_duration_fc_k11%)
    where (not wop.%is_freeday%);

/*
 * Check-in limit after 2 F-days applies normally when previous check-out is 
 * after 2000, but for pilots after FC K11, the time-off period must be at least 
 * 62:00, so check-in limit applies when previous check-out is < 62:00 earlier
 */
 
redefine %co_limit_before_2F% =
    if wop.%end_hb% > %co_limit_before_2F_abs% then
      time_of_day(%co_limit_before_2F_abs%)
    else
      24:00;

%co_limit_before_2F_abs% =
  next(wop(roster),wop.%start_hb% - freedays.%time_off_minimum_duration_fc_k11%)
    where (not wop.%is_freeday%);

/* Rule:
**   Max three weekends off with FS per calendar year for SKI FC.
**
** Description:
**   This rule checks that FS is not assigned on more than three weekends in a
**   calendar year. FS on both saturday and sunday counts as one. Valid for SKI FC.
**
*/

export rule ind_max_fs_on_weekend_per_year_ski =
  valid roster.%check_rules% and
        parameters.%fs_ski_fc_limit_weekends_valid%(trip.%start_day%) and
        not crew.%is_leased_trip_start% and
        trip.%is_fs_on_weekend% and
        crew.%is_ski_at_date%(trip.%start_day%) and
        crew.%is_long_haul_trip_start% and
        trip.%in_pp_extended% and
        rule_exceptions.%rule_on%(trip.%start_hb%);

  %weekends_with_fs_in_year% <= 3;

  startdate  = trip.%start_hb%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = trip.%failobject_start%;
  failtext(Int lhs, Int rhs) = rules.%failtext_int%("Coll: Too many FS during weekends this year", lhs, rhs);
  remark "Coll: FS allowed on max 3 weekends per calendar year [SKI FC]",
  planner "Check that FS is not assigned on more than 3 weekends in a calendar year. "
          "If a crew has FS on both saturday and sunday that weekend is only counted once."
          " (FC SKI)";
end

%weekends_with_fs_in_year% =
  let trip_start = trip.%start_day%;
  %_super_freeday_weekend_periods_from_account%(round_down_year(trip_start), round_up_year(trip_start));

%_super_freeday_weekend_periods_from_account%(Abstime year_start, Abstime year_end) =
  count(times(compdays.%nr_leave_account_entries%("FS", year_start, year_end)))
  where(%_is_first_super_freeday_during_weekend_and_crew_is_ski%(year_start, year_end, %times_index_0%));

/* Used to make sure that two freedays during a weekend are only counted as one towards the 3-per-year limit. */
%_is_first_super_freeday_during_weekend_and_crew_is_ski%(Abstime year_start, Abstime year_end, Int ix) =
  let fs_day = compdays.%leave_account_entry_time%("FS", year_start, year_end, ix),
      fs_amount = compdays.%leave_account_entry_amount%("FS", year_start, year_end, ix),
      start_time_in_week = time_of_week(fs_day),
      end_time_in_week = start_time_in_week - 24:00 * fs_amount/100; /* Note that fs_amount is negative */
  /* This is actually a withdrawal at all */
  fs_amount < 0 and
  (%_touches_saturday%(start_time_in_week, end_time_in_week) or
   %_touches_sunday%(start_time_in_week, end_time_in_week) and not %_preceded_by_SKI_FS_day%(fs_day)) and

  /* Pilot is longhaul on the given day */
  crew.%is_ski_at_date%(fs_day);

%_preceded_by_SKI_FS_day%(Abstime day) =
  compdays.%leave_account_entries_sum%("FS", day - 24:00, day) < 0 and
  crew.%is_ski_at_date%(day - 24:00);
/*
** Rule: 
**    No duty early duty day after check out later than 0200
**
** Descritption:
**    Check that crew does not check in for early duty if the check out from
**    previous duty is later than 0200 local time and at homebase.
**
** Agreement:
**    FC
**    
*/
export rule ind_early_duty_day_after_late_check_out_FC_ALL =
  valid roster.%check_rules% and
        not crew.%is_leased_trip_start% and
        %r_valid_no_duty_same_day_if_late_co% and
        duty.%in_pp_extended% and
        duty.%is_on_duty% and
        not duty.%is_rest% and 
        prev(duty(wop), duty.%arrives_at_homebase%) and
        prev(duty(wop), duty.%has_late_co%) and
        duty.%start_day% > prev(duty(wop), duty.%end_day%) and
        not prev(duty(wop), duty.%is_bought%) and
        not duty.%is_bought% and
        rule_exceptions.%rule_on%(duty.%start_UTC%);
  duty.%start_scheduled_hb% >= prev(duty(wop), duty.%end_day%) + 
  24:00 + %p_check_in_time_limit_after_night_duty_fc_all%;
  startdate  = duty.%start_UTC%;
  severity = first(leg(duty), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = duty.%failobject_start%;
  failtext "Coll: Early C/I day after late C/O";
  remark "(CCR) Coll: No early check in for duty day after late check out",
  planner "The rule checks that if there is a new trip assigned the day after"
          " the previous trip ends, check out for that trip is not later than"
          " 02:00. The rule is valid for FC all regions short haul.";
end

%p_check_in_time_limit_after_night_duty_fc_all% = parameter 07:00 remark "(CCR) Earliest check-in day after night duty.";


/*
** Rule:
**    Min number of parttime freedays in calendar month.
**
** Description:
**    Checks that FC SH VG parttime crew is scheduled at least the minimum i
**    number of free days required in a calendar month. This is according to
**    nr available days and part time factor.
**    Calculation algorithms differs from ordinary algorithm mainly
**    because part_time_freedays are not reduced in relation to qualifying days,
**    They do however themselves reduce ordinary freedays.
**
** Agreement:
**    FC 1:18 2.5c, 13:46 8
*/
rule ind_min_pt_freedays_in_1_month_FC_ALL =
  valid roster.%check_rules% and
        (wop.%start_hb% >= %pp_start% or /*overlap pp_start */
         (wop.%start_hb% <= %pp_start% and wop.%end_hb% > %pp_start%)) and
        wop.%is_last_on_duty_in_month% and
        wop.%start_month_start% = %pp_start% and
        crew.%has_some_variable_group_in_publ% and
        crew.%has_some_part_time_in_month% and
        not training.%month_is_in_school_period_min_7x24% and
        not crew.%is_leased_wop_start%;

  freedays.%possible_pt_freedays_1_month_pp% >= freedays.%required_pt_freedays_1_month_pp% - 
				         rule_exceptions.%overshoot_int%(wop.%start_UTC%);
                 
  startdate  = wop.%start_UTC%;
  severity = first(leg(wop), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = wop.%failobject_start%;
  failtext(Int value, Int limit) = 
    rules.%failtext_int%(format_time(wop.%start_month_start%,
                                     "Coll: Parttime F-days %b"),
                                     value,limit);
  remark "(CCR) Coll: Min parttime freedays in month.",
  planner "Checks that VG crew are scheduled at least the "
          "minimum number of parttime freedays required in a calendar month.";
end


/*
** Rule:
**    Min number of parttime freedays in 2 months
**
** Description:
**    Check that VG crew is scheduled at least the minimum number of parttime freedays 
**    required in 2 months according to nr available days and part time factor.
**
** NB! K11 - applies only for SKI
**
** Agreement:
**    FC 1:18 2.5c
*/

rule ind_min_pt_freedays_in_2_months_FC_ALL =
  valid roster.%check_rules% and
        crew.%is_ski%  and
        wop.%start_month_start% >= %pp_start% and
        wop.%is_last_on_duty_in_month% and
        crew.%has_some_variable_group_in_month% and
        crew.%has_some_part_time_in_month% and
        not crew.%is_leased_wop_start% and 
        %r_valid_pt_freedays_in_2_months%;
        
  freedays.%possible_pt_freedays_2_months% >= freedays.%min_required_pt_freedays_2_months% - 
					  rule_exceptions.%overshoot_int%(wop.%start_UTC%);
            
  startdate  = wop.%start_UTC%;
  severity = first(leg(wop), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = wop.%failobject_start%;
  failtext(Int value, Int limit) = 
    rules.%failtext_int%(concat("Coll: Parttime F-days ",
                                format_time(freedays.%prev_month_start%, "%b-"),
                                format_time(wop.%start_month_start%, "%b")),
                          value,limit);
  remark "Coll: Min parttime freedays in 2 months",
  planner "";
end

%r_valid_pt_freedays_in_2_months% = 
  fundamental.%even_month_by_month_start%(wop.%start_month_start%);

/*
** Rule:
**   Min number of freedays in quarter for FC SKN
** Description:
**    Check that VG crew is scheduled at least the minimum number of freedays 
**    required in a quarter according to nr available days and part time factor.
**
**    NB. K11: applies also for SKD/SKS
**        K12: doesn't apply for 'Passive +'
**
** Agreement:
**
**    K11 6.9.1
*/

export rule ind_min_freedays_in_quarter_FC_SKN =
  valid roster.%check_rules% and
        not crew.%is_leased_wop_start% and
        not crew.%is_passive_plus%(wop.%start_month_start%) and
        (crew.%is_skn% or crew.%is_skd% or crew.%is_sks%) and
        wop.%is_last_on_duty_in_quarter% and
        wop.%start_month_start% >= %pp_start% and
        %some_vg_pre_fdc15%;
  freedays.%nr_qualifying_in_3_months% >= freedays.%min_required_in_3_months% - 
					  rule_exceptions.%overshoot_int%(wop.%start_UTC%);
  startdate  = wop.%start_UTC%;
  severity = first(leg(wop), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %ind_min_freedays_in_quarter_SKN_failobject%;
  failtext(Int value, Int limit) = 
    rules.%failtext_int%("Coll: F-days in quarter", value, limit);
  remark "(CCR) Coll: Min freedays in quarter",
  planner "";
end

%ind_min_freedays_in_quarter_SKN_failobject% = 
  let month = wop.%start_month_start%,
      overshoot = default(rule_exceptions.%overshoot_int%(wop.%start_UTC%),0);
  last(duty(wop),
       if (sum(duty(chain),trip.%days_in_period%(duty.%start_day%,
                                                 duty.%start_month_end%) -
                     (if(duty.%start_day% = prev(duty(chain),duty.%end_day%)) then 1 else 0))
              from (current) forwards while (duty.%start_month_start% = month) where
              (%_duty_can_make_freeday%) >=
                  freedays.%min_required_in_quarter%(wop.%start_utc%) - 
                  freedays.%nr_qualifying_in_3_months% -
                  overshoot) then
    duty.%failobject_start% 
  else
    prev(duty(chain),duty.%failobject_start%) where
       (sum(duty(chain),trip.%days_in_period%(duty.%start_day%,
                                              duty.%start_month_end%) -
                  (if(duty.%start_day% = prev(duty(chain),duty.%end_day%)) then 1 else 0))
              from (current) forwards while (duty.%start_month_start% = month) where
              (%_duty_can_make_freeday%) >=
                  freedays.%min_required_in_quarter%(wop.%start_utc%) - 
                  freedays.%nr_qualifying_in_3_months% -
                  overshoot)) where
  (duty.%start_month_start% = month);

/* Rule:
**   Maximum one FS block in month
**
** Description:
**   This rule checks that there are no more than one FS block in a  
**   calendar month.
**
**   E.g. FS, FS or FS,FS,FS,FS on e.g. 30May-02June
*/

export rule (off) ind_max_fs_blocks_in_month_FC =
  valid roster.%check_rules% and
        not crew.%is_leased_trip_start% and
        trip.%is_fs% and
        %is_last_fs_trip_in_month% and
        %flight_crew% and
        crew.%is_SKI_in_month%(trip.%start_utc%) and
        crew.%in_variable_group_trip_start% and
        trip.%in_pp_extended% and
        rule_exceptions.%rule_on%(trip.%start_utc%);
        
  %num_fs_blocks_in_month% <= %max_fs_blocks_in_month%;
  
  startdate  = trip.%start_UTC%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = trip.%failobject_start%;
  failtext "Coll: Max 1 FS block in month";
  remark "Coll: Maximum 1 FS block in month (SKI)",
  planner "Check that there are only one block of FS days in a calendar month";
end

%num_fs_blocks_in_month% = 
  let month_start = trip.%start_month_start%;
  sum(trip(chain), 1)
  from (current) backwards 
  while(trip.%start_hb% >= month_start)
  where (trip.%is_fs% and not
         (prev(trip(chain),trip.%is_fs% and trip.%start_hb% >= month_start) and
             trip.%start_day% = prev(trip(chain),trip.%end_day%) + 24:00));

  
%max_fs_blocks_in_month% = 1;  
 
%is_last_fs_trip_in_month% =
  let month_end = round_up_month(trip.%start_hb%);
    
    trip.%is_fs% and 
    default(next(trip(chain), trip.%start_hb% >= month_end)
            where(trip.%is_fs%),
            True);

/* Rule:
**   FS not allowed during Christmas and New Year
**
** Description:
**   This rule checks that FS is not assigned during the Christmas and new Year  
**   period 20dec-02jan.
*/

rule ind_fs_not_at_christmas_and_new_year_FC =
  valid roster.%check_rules% and
        not crew.%is_leased_trip_start% and
        trip.%is_fs% and
        %flight_crew% and
        parameters.%k11_fc_sp2_2_valid%(trip.%start_hb%) and
        not crew.%is_SKI% and
        crew.%in_variable_group_trip_start% and
        trip.%in_pp_extended% and
        rule_exceptions.%rule_on%(trip.%start_hb%);

  %has_no_fs_during_xmas_new_year%;

  startdate  = trip.%start_hb%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = trip.%failobject_start%;
  failtext "FS not allowed 20dec-02jan";
  remark "Coll: FS not allowed 20dec-02jan",
  planner "Check that FS is not assigned between 20dec-02jan"
          " FC SH K11";
end

%has_no_fs_during_xmas_new_year% =
  overlap(trip.%start_hb%,trip.%end_hb%,
          %christmas_period_start%,%christmas_period_end%) = 0:00;

%christmas_period_start% = /* 20dec */
  let xmas_start = add_months(round_down_year(trip.%start_day%),11) + (19*24:00);
  if %trip_at_start_of_year% then
    add_years(xmas_start, -1)
  else
    xmas_start; 

%christmas_period_end% = /* 02jan */
  let xmas_end = round_up_year(trip.%start_day% + 0:01) + 48:00;
  if %trip_at_start_of_year% then
    add_years(xmas_end, -1)
  else
    xmas_end; 
 
%trip_at_start_of_year% = 
  let start_year = round_down_year(trip.%start_day%);
  trip.%start_day% = start_year or
  trip.%start_day% = start_year + 24:00;
  
/* Rule:
**   FS may not be within 5 days from Christmas rotation
**
** Description:
**   This rule checks that FS is not assigned too close to the Christmas rotation
*/

export rule (off) ind_fs_in_cnx_with_xmas_rot_FC =
  valid roster.%check_rules% and
        not crew.%is_leased_trip_start% and
        crew.%is_SKI% and
        trip.%is_fs% and
        %is_dec_or_jan% and
        trip.%in_pp_extended% and
        rule_exceptions.%rule_on%(trip.%start_hb%);

  %fs_scheduled_correct_in_cnx_with_xmas%;

  startdate  = trip.%start_hb%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = trip.%failobject_start%;
  failtext "FS too close to Xmas freedays";
  remark "FS closer than 5 days to Xmas freedays not allowed",
  planner "FS days must be scehduled with at least 5 days open to Christmas rotation";
end
  
%is_dec_or_jan% = 
 let month = calendar.%month_number%(trip.%start_hb%);
 month = 12 or month=1;

%fs_scheduled_correct_in_cnx_with_xmas% = 
 trip.%end_hb% <= %xmas_start% - 5*24:00
 or
 trip.%start_hb% >= %xmas_end% + 5*24:00;

 /* Finds any date in the year containing the Christmas days*/
%_year% = add_months(trip.%start_hb%, -1); 

%xmas_start% = 
  min(times(5), freedays.%r_start_xmas_date%(crew.%id%, crew.%region%, crew.%main_func%, %_year% , %times_index_0%));
  
%xmas_end% =   
  max(times(5), freedays.%r_start_xmas_date%(crew.%id%, crew.%region%, crew.%main_func%, %_year% , %times_index_0%)) + 24:00; 
    
/*%_start_xmas_date%(crewid, crewregion, %season%(season), %year%(year), match) */  

/**********************************************
** SuperFreeday definitions 
*/

/*
** Minimum days before VA/LA where FS may be placed
**
** There must be assigned 4 F-days around VA, and these can all be before VA, or
** all after VA, or both before and after VA.
**
** Pilots have the option to request how they want the F-days assigned,
** in which case F14 is assigned
**
** The requirement for FS placement before summer VA depends on whether or not 
** F14 is assigned, either before or after VA. The requirement is then dependent
** on the number of F14 assigned before VA.
*/

redefine %days_before% =
  if parameters.%k11_fc_sp2_2_valid%(duty.%start_hb%) then
    if duty.%is_vacation% then
      if duty.%start_day% > freedays.%summer_start% and 
         duty.%start_day% < freedays.%summer_end% then
        if not %agreement_valid_4exng_fs_day_logic% and %f14_assigned_before_or_after_next_va% then
          %nr_f14_days_before_va% + %_min_days_before_va_or_loa_with_f14%
        else
          %_days_before_summer_va%
      else
        %_days_before_va_or_loa%
    else
      %_days_before_va_or_loa%
  else
    if crew.%is_SKD% then 5
    else 0;

%_min_days_before_va_or_loa_with_f14% = if crew.%is_ski% then 5 else 3;
%_days_before_summer_va% = 
  if %agreement_valid_4exng_fs_day_logic% then       
    6
  else if crew.%is_ski% then 7 else 6;


/* Can be used when SKCMS-646 shall be used, i.e. when SKCMS-649 is introduced
   Do not forget to delete the IB6_validity row
*/ 
%_days_before_va_or_loa% =
  if system_db_parameters.%IB6_valid%(duty.%start_UTC%) then 
    if %agreement_valid_4exng_fs_day_logic% then
       if %fs_unfriendly_days%(3,9) >= 6 then 6 else 0
    else
      if crew.%is_ski% then 7 else 5
  else
    /* IB6 not valid */
    if %agreement_valid_4exng_fs_day_logic% then
      if crew.%is_ski% then 6 else 5
    else
      if crew.%is_ski% then 7 else 5;

%fs_unfriendly_days%(int days_before, int days_after) =
  let start = duty.%start_day% - days_before*24:00,
      stop = duty.%start_day% + days_after*24:00; 
  duty.%days_with_selection%(duty.%duty_sel_fs_unfriendly%, start, stop);


/* Mimimum days after VA/LA where FS may be placed
**
** There must be assigned 4 F-days around VA, and these can all be before VA, or
** all after VA, or both before and after VA.

** Pilots have the option to request how they want the F-days assigned,
** in which case F14 is assigned
**
** The requirement for FS placement after VA depends on whether or not F14 is
** assigned, either before or after VA. The requirement is then dependent on
** the number of F14 assigned after VA.
*/

redefine %days_after% =
  if parameters.%k11_fc_sp2_2_valid%(duty.%end_hb%) then
    if not %agreement_valid_4exng_fs_day_logic% and 
       duty.%start_day% > freedays.%summer_start% and
       %f14_assigned_before_or_after_prev_va% then
       %nr_f14_days_after_va% + %_min_days_after_va_or_loa% 
    else  
      %_min_days_after_va_or_loa%
  else
    if crew.%is_SKD% then 3
    else 0;

/* Can be used when SKCMS-646 shall be used, i.e. when SKCMS-649 is introduced
   Do not forget to delete the IB6_validity row
*/
%_min_days_after_va_or_loa% = 
  if system_db_parameters.%IB6_valid%(duty.%start_UTC%) 
  then
  	if %fs_unfriendly_days%(12,6) >= 6 then 3 else 0
  else
    if crew.%is_ski% then 5 else 3;
 
     
redefine %valid_activity% =
  if crew.%is_SKI% then
    if parameters.%is_request_bidding% then
      /* New definition from SASCMS-6254 */
      first(leg(duty), leg.%time% >= 1:00 
        and leg.%is_pact%) 
      and not (duty.%is_fs% or duty.%code% = "F1")
    else
      trip.%is_course% or
      duty.%is_vacation% or
      duty.%is_military% or
      duty.%is_la%
  else  
    %course% or 
    %military% or 
    duty.%is_la% or
    (duty.%is_vacation% and not duty.%is_military%);
    
  
redefine %military% = duty.%is_military% and duty.%days% > 6;
redefine %course% = trip.%is_course_period_min_length%(7);
  
%f14_assigned_before_or_after_next_va% =
    %nr_f14_days_before_va% > 0 or
  %nr_f14_days_after_va% > 0;

%f14_assigned_before_or_after_prev_va% =
    %nr_f14_days_before_va% > 0 or
  %nr_f14_days_after_va% > 0;

%nr_f14_days_before_va% =
    sum(duty(chain),duty.%days%)
    from (current) backwards 
    while ((duty.%code% = "F14" or duty.%is_vacation%) and duty.%consecutive_duties_fw%)
    where (duty.%code% = "F14");

%nr_f14_days_after_va% =
    default(sum(duty(chain),duty.%days%)
    from (next) 
    while ((duty.%code% = "F14" or duty.%is_vacation%) and duty.%consecutive_duties_bw%)
    where (duty.%code% = "F14"), 0);

   
/*
** Rule:
**    Limit for check-in/out around FS days
**
** Description:
**    Check that there is space either from 22:00 before OR until 08:00 after
**    a single day FS-day(00:00-00:00)
**
** Agreement:
**    Introduced with Bid5
**
*/
    
rule (off) ind_check_in_out_around_fs_day_FC =
  valid roster.%check_rules% and
        not crew.%is_SKI% and
        not crew.%is_leased_duty_start% and
        crew.%in_variable_group_trip_start% and
        %is_single_day_fs% and
        duty.%in_pp_extended% and
        rule_exceptions.%rule_on%(duty.%start_utc%);
        
  %check_in_out_limit_ok% or %space_for_freeday%;
  startdate  = duty.%start_UTC%;
  severity = first(leg(duty), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = duty.%failobject_start%;
  failtext "CI/CO around single FS";
  remark "Coll: Check-in/out around single FS-day",
  planner "There should be space either from 22:00 before OR until 08:00 after"
          " a single day FS-day(00:00-00:00)"
          " Valid for FC SH";
end

%is_single_day_fs% = 
  duty.%is_fs% and 
  (duty.%days% = 1) and
  prev(duty(chain), not duty.%is_fs% or not duty.%consecutive_duties_fw%) and 
  next(duty(chain), not duty.%is_fs% or  not duty.%consecutive_duties_bw%);
 
%space_for_freeday% =  
 (default(next(duty(chain), duty.%consecutive_duties_bw% or (duty.%start_od% <= 8:00 and duty.%is_on_duty%)), true) and
  default(prev(duty(chain), not (duty.%consecutive_duties_fw% and duty.%is_on_duty%)), true))
  or
 (default(prev(duty(chain), duty.%consecutive_duties_fw%  or  (%duty_check_out_time% >= 22:00 and duty.%is_on_duty%)), true) and
  default(next(duty(chain), not (duty.%consecutive_duties_bw% and duty.%is_on_duty%)), true));
   
%check_in_out_limit_ok% =  %check_in_limit_ok% and %check_out_limit_ok%;
%check_in_limit_ok% = 
  default(next(duty(chain), not duty.%consecutive_duties_bw% or (duty.%start_od% >= 8:00 and duty.%is_on_duty%)), true);
%check_out_limit_ok% = 
  default(prev(duty(chain), not duty.%consecutive_duties_fw%  or  (%duty_check_out_time% <= 22:00 and duty.%is_on_duty%)), true);

%duty_check_out_time% = 
  if duty.%ends_at_midnight_hb% then   
    time_of_day(duty.%end_hb% - 0:01)
  else 
    duty.%end_od%; 
        
%limit_for_check_in_after_fs_day_SKI% = 8:00;
%limit_for_check_out_before_fs_day_SKI% = 22:00;

/*
** Rule:
**   Min 4 freedays between west/east bound trips.
**    ... changed to off duty days, for K15. rule name is retained for simplicity.
** Description:
**   There must be at least 4 real freedays(not VA etc) between
**   a westbound trip and a eastbound (v.v only requires 3 freedays) The rule
**   is only valid for SKI and MFF crew.
** Agreement:
**   Ref K08.5 passage 6.3.9.1
**
**   K11 - no longer applies
**   K15 - applies again, but now with 4 days limit.
**   K22 - 4 days only required W ?? E 
*/
rule ind_min_freedays_btw_west_east_fc =
  valid roster.%check_rules% and
        (crew.%is_ski% or
         crew.%has_agmt_group_sk_fd_mff%) and
        wop.%touches_pp% and
        %wop_lh_east_preceded_by_west% or
        %wop_lh_west_preceded_by_east%;
  %off_duty_days_btw_east_west% +
  rule_exceptions.%overshoot_int%(wop.%start_utc%)
  >= 
  %min_required_off_duty_days_btw_ew%;
	startdate = wop.%start_utc%;
  severity = first(leg(wop), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %ind_min_off_duty_days_btw_east_west_FC_failobject%;
  failtext(int value, int limit) = 
  rules.%failtext_int%("Coll: Min off duty days between west/east",value,limit);
  remark "Coll: Min off duty days between west/east";
end

%off_duty_days_btw_east_west% =
  let stop  = wop.%start_day%,
      start = prev(wop(roster), wop.%end_day% + 24:00) where (wop.%is_on_duty%); 
  duty.%days_with_selection_possible%(duty.%duty_sel_off_duty%, start, stop);
  
%min_required_off_duty_days_btw_ew% = 
  if %wop_lh_east_preceded_by_west%
    then %min_required_off_duty_days_btw_east_preceded_by_west%
  else %min_required_off_duty_days_btw_west_preceded_by_east%;

%min_required_off_duty_days_btw_east_preceded_by_west% = 
  parameter 4
  remark "Coll: Min F-days after LH east preceded by west";
%min_required_off_duty_days_btw_west_preceded_by_east% = 
  parameter 3
  remark "Coll: Min F-days after LH west preceded by east";

%wop_lh_west_preceded_by_east% =
  default(%_wop_lh_west_preceded_by_east%, false);
  
%_wop_lh_west_preceded_by_east% =
  (wop.%is_west_bound% and 
   prev(wop(roster), wop.%is_east_bound%) where (wop.%is_on_duty%));

%wop_lh_east_preceded_by_west% =
  default(%_wop_lh_east_preceded_by_west%, false);

%_wop_lh_east_preceded_by_west% =
  (wop.%is_east_bound% and 
   prev(wop(roster), wop.%is_west_bound%) where (wop.%is_on_duty%));

  
%ind_min_off_duty_days_btw_east_west_FC_failobject% =
  first(trip(wop), trip.%failobject_start%) where 
  (trip.%is_west_bound% or trip.%is_east_bound%);


/*
** Rule:
**   Max number of single slipping for far time zones in one month
** Description:
**
**   K15
**   SKCMS-670
*/
export rule ind_max_number_of_single_slipping_for_far_timezones_1_month_FC =
  valid roster.%check_rules% and
        base_product.%is_rostering% and
        parameters.%k15_fc_lh_single_slipping_valid%(trip.%start_day%) and
        (crew.%has_agmt_group_ski_fd% or
        crew.%has_agmt_group_sk_fd_mff%) and
        trip.%is_long_haul% and
        crew.%in_variable_group_ppstart% and
        trip.%has_single_slipp% and
        trip.%starts_in_pp% and
        trip.%lh_layover_time_zone% <= parameters.%slipp_layover_time_zone_p%;
  %no_of_single_slipping_1_calendar_month% 
  <=
  parameters.%max_no_of_single_slipping_far_dest_1_month_p%;
	startdate = trip.%start_utc%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = trip.%failobject_start%;
  failtext(int value, int limit) = 
    rules.%failtext_int%("Coll: Max number of single slipping far dest one month",value,limit);
  remark "Coll: Max number of single slipping far dest one month";
end

 %no_of_single_slipping_1_calendar_month% =
    let month_start = round_down_month(trip.%start_utc%),
        month_end = round_up_month(trip.%start_utc%) - 0:01;
    accumulators.%nr_far_single_slipping_in_period%(month_start, month_end);

/*
** Rule:
**   Max number of single slipping for far time zones in one year
** Description:
**
**   K15
**   SKCMS-670
*/
rule ind_max_number_of_single_slipping_for_far_timezones_1_year_FC =
  valid roster.%check_rules% and
        base_product.%is_rostering% and
        parameters.%k15_fc_lh_single_slipping_valid%(trip.%start_day%) and
        (crew.%has_agmt_group_ski_fd% or
        crew.%has_agmt_group_sk_fd_mff%) and
        trip.%is_long_haul% and
        crew.%in_variable_group_ppstart% and
        trip.%has_single_slipp% and
        trip.%starts_in_pp% and
        trip.%lh_layover_time_zone% <= parameters.%slipp_layover_time_zone_p%;
  %no_of_single_slipping_1_calendar_year% 
  <=
  parameters.%max_no_of_single_slipping_far_dest_1_year_p%;
	startdate = trip.%start_utc%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = trip.%failobject_start%;
  failtext(int value, int limit) = 
    rules.%failtext_int%("Coll: Max number of single slipping far dest one year",value,limit);
  remark "Coll: Max number of single slipping far dest one year";
end


 %no_of_single_slipping_1_calendar_year% =
    let year_start = round_down_year(trip.%start_utc%),
        year_end = round_up_year(trip.%start_utc%)-0:01;
    accumulators.%nr_far_single_slipping_in_period%(year_start, year_end);


/*
** Rule:
**   Min 4 freedays for far destinations when single slipp
** Description:
**
**   K15
**   SKCMS-670
*/
export rule ind_min_freedays_for_far_timezones_with_single_slipping_FC =
  valid %ind_min_freedays_for_far_timezones_with_single_slipping_FC_valid%;

    freedays.%freedays_after_duty% + rule_exceptions.%overshoot_int%(wop.%start_utc%) >=
        parameters.%min_required_freedays_for_far_timezones_with_single_slipping_fc_p%;

    startdate = wop.%start_utc%;
    severity = %ind_min_freedays_for_far_timezones_with_single_slipping_FC_severity%;
    failobject = trip.%failobject_start%;
    failtext(int value, int limit) =
        rules.%failtext_int%("Coll: Min freedays for far time zones",value,limit);
    remark "Coll: Min freedays for far time zones";
end



%ind_min_freedays_for_far_timezones_with_single_slipping_FC_valid% =
        roster.%check_rules% and
        parameters.%k15_fc_lh_single_slipping_valid%(trip.%start_day%) and
        (crew.%has_agmt_group_ski_fd% or
         crew.%has_agmt_group_sk_fd_mff%) and
        trip.%is_long_haul% and
        crew.%in_variable_group_ppstart% and
        is_last(duty(trip)) and
        trip.%has_single_slipp% and
        trip.%slipp_layover_time_zone% <= parameters.%slipp_layover_time_zone_p%;



%ind_min_freedays_for_far_timezones_with_single_slipping_FC_severity% =
    if %ind_min_freedays_after_alert% then
       first(leg(duty), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%))
    else
        %severity_filter_ignorable%;

/****************************************************************
 * Section 6: Wop rules
 ***************************************************************/
rule ind_max_split_duty_in_wop_FC =
    valid roster.%check_rules%
        and not crew.%has_agmt_group_ski_fd%
        and wop.%start_utc% >= %pp_start%
        and wop.%start_utc% <= %pp_end%
        and duty_period.%wop_has_split_duty%;

        duty_period.%wop_count_split_duties% <= %max_number_of_split_duties_in_wop%+
	    rule_exceptions.%overshoot_int%(wop.%start_UTC%);
  	
    startdate = wop.%start_UTC%;
	severity = first(leg(wop), %severity_filter_int%(leg.%start_hb%, %duty_lh_region%));
	failobject = wop.%failobject_start%;
	failtext(Int value, Int limit) = 
        rules.%failtext_int%("Coll: Max number of split duties in wop", value, limit);
    
	remark "(CCR) Max number of split duites in a wop",
    planner "The rule check the number of split duties in a wop."
            "  Applies to all FD";
end	

%max_number_of_split_duties_in_wop% = 
    if crew.%has_agmt_group_sk%
    then %number_of_split_duties_in_wop_limit_sk%
    else %number_of_split_duties_in_wop_limit_non_sk%;

%number_of_split_duties_in_wop_limit_sk% = 
    parameter 1
    remark "Limit for split duties in same wop SK FD";

%number_of_split_duties_in_wop_limit_non_sk% = 
    parameter 2
    remark "Limit for split duties in same wop non-SK FD";

/*
*********************************************************************
** Max production days rules for FD SKN 2011 (Can be removed in 2012)
*********************************************************************
** START
*********************************************************************
*/

%_max_production_days_in_year_fd_p% = 
  parameter 176
  remark "Max production days in year for FD";
  
redefine %max_production_days_in_year_skn% = 
    %_max_production_days_in_year_fd_p%;

/*
*********************************************************************
** END
*********************************************************************
*/

/****************************************************************
 * Section 7: Restrictions
 ***************************************************************/
rule (on) ast_required_once_per_period_fc =
  valid roster.%check_rules% and
        trip.%in_pp% and
        trip.%is_ast% and 
        not (crew.%is_a2a3_qualified% or crew.%is_a2a5_qualified%) and
        rule_exceptions.%rule_on%(trip.%start_UTC%) and
        training.%assigned_as_student_on_any_ast_duty_in_trip%;
  not training.%too_many_ast_in_ast_period%;
  startdate  = trip.%start_UTC%;
  failobject = trip.%failobject_start%;
  failtext "OMA: AST should only be performed once per AST period";
  remark "(CCR) OMA: AST should only be performed once per AST period";
end


rule (on) no_ast_for_a2a3_fc =
  valid roster.%check_rules% and
        trip.%in_pp% and
        trip.%is_ast% and
        crew.%is_a2a3_qualified% and
        rule_exceptions.%rule_on%(trip.%start_UTC%) and
        training.%assigned_as_student_on_any_ast_duty_in_trip%;
  not training.%too_many_ast_in_ast_period%;
  startdate  = trip.%start_UTC%;
  failobject = trip.%failobject_start%;
  failtext "AST is not required for A2A3 qualified";
  remark "(CCR) AST not required for A2A3 qualified";
end

rule (on) no_ast_for_a2a5_fc =
  valid roster.%check_rules% and
        trip.%in_pp% and
        trip.%is_ast% and
        crew.%is_a2a5_qualified% and
        rule_exceptions.%rule_on%(trip.%start_UTC%) and
        training.%assigned_as_student_on_any_ast_duty_in_trip%;
  not training.%too_many_ast_in_ast_period%;
  startdate  = trip.%start_UTC%;
  failobject = trip.%failobject_start%;
  failtext "AST is not required for A2A5 qualified";
  remark "(CCR) AST not required for A2A5 qualified";
end



rule ind_max_prod_days_in_calendar_month_vg_fc =
  valid %_max_prod_days_in_calendar_month_vg_fc_valid%;

 %_nr_prod_days_in_month_vg_fc% <=
 %_max_prod_days_in_month_vg_fc% +
 rule_exceptions.%overshoot_int%(trip.%start_UTC%);

  startdate  = trip.%start_UTC%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = trip.%failobject_start%;
  failtext(Int value, Int limit) =
    rules.%failtext_int%("Coll: Max production days in calendar month for flight crew in VG (K19)", value, limit);
  remark "Max production days in calendar month for flight crew in VG (K19)",
  planner "This rule ensures that the number of planned production days does not exceed 19 in a calendar month.";
end

%_max_prod_days_in_calendar_month_vg_fc_valid% =
  base_product.%is_rostering% and
  roster.%check_rules% and
  (crew.%has_agmt_group_skn% or crew.%has_agmt_group_sks% or crew.%has_agmt_group_skd%) and
  crew.%in_variable_group_trip_start% and
  fundamental.%flight_crew% and
  trip.%starts_in_pp%
  and trip.%is_last_on_duty_in_month%;

%_nr_prod_days_in_month_vg_fc% =
  duty_time.%nr_assigned_p_days_vg_in_1_month%(pp.%start_month%, pp.%end_month%);

%_max_prod_days_in_month_vg_fc% =  19;

/*
** Rule:
**   Maximum FDP extension duties in calendar month for FC.
**
** Description:
**   Check the number of SH FDP extension duties in a calendar month.
**
** SKCMS-3069
*/

export rule ind_max_fdp_with_extension_7_days =		
  valid trip.%check_rules% and
        duty.%in_pp_extended% and
        duty_period.%is_on_duty% and
        trip.%is_short_haul% and
        duty_period.%is_last_duty_period_on_start_day% and
        oma16.%is_extended_fdp%; 
        
  %ind_num_extended_fdps_in_last_7_days% <= %ind_max_extended_fdps_in_7_days% + rule_exceptions.%overshoot_int%(duty.%start_UTC%);

  startdate = duty.%start_UTC%;
  severity = first(leg(duty), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %ind_max_fdp_with_extension_in_7_days_ALL_failboject%;
  failtext(Int value, Int limit) =
    rules.%failtext_int%(concat("Coll: Max extended FDPs in 7 days ",
                                format_time( duty_period.%last_7_days_start_day_start% +24:00 ,"%d%b"), "-",
                                format_time( duty_period.%last_7_days_start_day_end% ,"%d%b")),
                         value,limit);
  remark "Coll: FD max extended FDPs in 7 days",
  planner "The rules checks that the number of FDPs with extension in 7 calendar days for FD is less than maximum allowed according to K22 agreement";
end

export %ind_max_extended_fdps_in_7_days% = 1;

export %ind_is_extended_sh_fdp% =
      let  start = duty.%start_month_start%,
           stop = duty.%start_month_end%;
           fdp.%start_utc% >= start and
           fdp.%end_utc% < stop and
           duty_period.%is_on_duty% and
           oma16.%is_extended_fdp% and
           duty.%is_short_haul%;


%ind_num_extended_fdps_in_last_7_days% = 
  let start = duty_period.%last_7_days_start_day_start%;
  count(duty(chain))
    from (current)
    backwards
    while (fdp.%start_utc% >= start)
    where (duty_period.%is_on_duty% and
           %ind_is_extended_sh_fdp%);   

        

%ind_max_fdp_with_extension_in_7_days_ALL_failboject% =
  let start_7_days = duty_period.%last_7_days_start_day_start%,
      end_7_days = duty_period.%last_7_days_start_day_end%,
      overshoot = rule_exceptions.%overshoot_int%(duty.%start_UTC%);
  last(leg(duty),
       prev(leg(chain),next(leg(chain),leg.%failobject_departure%)) where
        (count(duty(chain))
           from (current)
           backwards
           while (fdp.%start_utc% >= start_7_days)
           where (%ind_is_extended_sh_fdp%) <=
         %ind_max_extended_fdps_in_7_days% +
         overshoot)) where
  (leg.%start_hb% < end_7_days);


/*
** Rule:
**  Max duty time 2 months (Jan-feb, Mar-Apr etc...)
** Description:
**  Duty time in 2 months may not exceed the number of working(P) days x
**  9:30.
**  Rule is only valid for SKD FD.
**  Duty time is calculated according to union agreements but standby counts
**  as in SubpartQ.
**
** Agreement: GM (CR 242)
**
** FC K11 - applies to SKD (FG + VG), SKN (FG + VG), SKS FG
*/

rule (off) ind_max_duty_time_2_months_fc =
  valid %ind_max_duty_time_2_months_fc_valid%;

  %_duty_time_2_months_fc% <=
  duty_time.%max_duty_time_2_months_fc% +
    rule_exceptions.%overshoot_rel%(wop.%start_utc%);

  startdate = wop.%start_utc%;
  severity = first(leg(wop), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %ind_max_duty_time_2_months_fc_failobject%;
  failtext(Reltime value, Reltime limit) =
    rules.%failtext_rel%("OPT Coll: Max duty time in 2 months",value,limit);
  remark "OPT Coll: Max duty time in 2 months (FC K17)",
  planner "OPT This rule checks that FC SH (excl. SKS VG) are not scheduled more"
          " than P x 9:30 hours of duty time in two fixed calendar months,"
          " Jan+Feb, Mar+Apr etc. For SKN VG the limit is P x 8:48 hours.";
end


%_duty_time_2_months_fc% =
  duty_time.%duty_time_fc_in_period%(%duty_time_2_months_start_check%,
                                     round_up_month(wop.%start_hb%)) -
  duty_time.%passive_plus_reduction%(%duty_time_2_months_start_check%,
                                     round_up_month(wop.%start_hb%));


%duty_time_month_plus_1% = add_months(duty_time.%duty_time_2_months_start_check%, 1);

%acc_for_previous_month% =
  accumulators.%nr_planned_p_days_2_months_fc%
    (duty_time.%duty_time_2_months_start_check%, %duty_time_month_plus_1%);

%duty_time_2_months_start_check% =
  if %acc_for_previous_month% > 0 then
    duty_time.%duty_time_2_months_start_check%
  else
    %duty_time_month_plus_1%;

%ind_max_duty_time_2_months_fc_valid% =
   base_product.%is_rostering% and
   roster.%check_rules% and
   fundamental.%even_month_by_month_start%(%pp_start%) and
   wop.%is_last_on_duty_in_month% and
   wop.%start_month_start% = %pp_start% and
   (crew.%has_agmt_group_skd% or crew.%has_agmt_group_skn% or crew.%has_agmt_group_sks%) and
   not crew.%is_leased_wop_start%;


%ind_max_duty_time_2_months_fc_failobject% =
  let month_start_check = %duty_time_2_months_start_check%,
      limit = duty_time.%max_duty_time_2_months_fc%;
  default(
    last(duty(wop),
         prev(duty(chain),
              next(duty(chain),
                   default(first(leg(duty), leg.%failobject_departure%)
                           where(duty_time.%duty_time_fc_in_period%(
                                   month_start_check,
                                   leg.%end_hb% +
                                   leg.%check_out%) > limit),
                           duty.%failobject_start%))
              where(duty_period.%is_on_duty%))
         where(duty_time.%duty_time_fc_in_period%(month_start_check,
                                                  duty.%end_hb%) <= limit)),
    wop.%failobject_start%);

/* Dummy variables for CC additional weekend, needed for rudob logic */
export %ind_additional_weekend_days_in_period_sks_valid_crew% = false;
export %day_is_a_weekend_day%(Abstime d) = false;

/* SKCMS-2153 */
export rule ind_training_a5_crew_need_ast_in_pca3a5_grace_period =
    valid %agreement_valid_a5_ast_before_pc% and
        leg.%in_pp% and
        training.%leg_is_pc% and
        %leg_in_pca3a5_grace% and
        rule_exceptions.%rule_on%(leg.%start_utc%);

        %ast_date_after_pca3a5_grace_start% < leg.%start_hb%;
        
  startdate  = leg.%start_utc%;
  severity = first(leg(wop), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));        
  failobject = leg.%failobject_departure%;
  failtext "OMA: A5 qualified crew need AST A5 before PC A3A5";
  remark "A3A4A5 crew need AST A5 in grace period of PC A3A5.",
  planner "This rule checks that A3A4A5 qualified crew get AST A5 in grace period of PC A3A5. The AST A5 occasion must be assigned before the PC A3A5 event. When A340 has been phased out, this rule will not be valid anymore.";
end

%agreement_valid_a5_ast_before_pc% = %agreement_valid%("a350_a5_ast_before_pc", duty.%start_scheduled_hb%);
%leg_in_pca3a5_grace% = (leg.%start_hb% >= %pca3a5_grace_start_hb%) and (leg.%end_hb% <= %pca3a5_grace_end_hb%);
%pca3a5_grace_start_hb% = add_months(%pca3a5_grace_end_hb%, -3);
%pca3a5_grace_end_hb% = default(training.%recurrent_type_expiry_date%("PCA3A5", training.%any_ac_qual%, leg.%start_hb%), %abstimemin%);
%ast_date_after_pca3a5_grace_start% = if %ast_date% >= %pca3a5_grace_start_hb% then %ast_date% else %abstimemax%;
%ast_date% = training.%ast_date%; 


/* SKCMS-2905
** Rule:
**    Minimum time between start of simulator activities on instructors
**
*/        
        
rule(on) ind_min_time_between_simulators_on_instructors =
  valid %valid_min_start_times_between_sim_on_instructors%;
  
  %time_between_simulators% >= %min_time_between_simulators% - 
  	             rule_exceptions.%overshoot_rel%(duty.%start_utc%);
  
  startdate  = duty.%start_utc%;
  severity =  %severity_filter_int%(duty.%start_utc%,%duty_lh_region%);
  failobject = duty.%failobject_start%;
  failtext(Reltime value, Reltime limit) = %min_time_btw_sim_failtext%(value, limit);
  remark "(Soft) Training: Min time between start of simulator activities on instructors";
end

%valid_min_start_times_between_sim_on_instructors% =
  %is_roster% and
  trip.%in_pp_extended% and
  crew.%is_sim_instr%(duty.%start_hb%) and
  duty.%is_simulator% and
  next(duty(chain), duty.%is_simulator%) and
  duty.%is_on_duty%;
  
%time_between_simulators% = next(duty(chain), duty.%start_first_simulator_leg%) - duty.%start_first_simulator_leg%;  

%min_time_between_simulators% = 
if duty.%is_simulator% and %is_night_shift% 
    then 24:00
  else if (duty.%is_pc% or duty.%is_opc% or duty.%is_ast%) and next(duty(chain), (duty.%is_pc% or duty.%is_opc% or duty.%is_ast%))
   then 22:00
else 00:00;


%min_time_btw_sim_failtext%(Reltime value, Reltime limit) =
      rules.%failtext_rel%("Training: Min time between start of simulator activities on instructors", value, limit);

/* end of file */

 