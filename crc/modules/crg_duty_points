/* -*- crc -*- */
root module crg_duty_points

import levels;
import fdp;
import duty_period;
import duty;
import leg;
import duty_time;
import oma16;
import fundamental;
import base_utils;
import parameters;

/* DutyPointsReport.py */
export %duty_in_7x24_hrs% =
    nmax(duty_time.%7_days_start_day%,
         if duty_time.%ends_on_day_after_start_hb% then
           duty_time.%7_days_end_day%
         else
           0:00);

/* DutyPointsReport.py */
export %duty_start% = 
  default(duty.%start_UTC%, 1jan1986 0:00);

/* DutyPointsReport.py */
export %duty_end% = 
  default(duty.%end_UTC%, 1jan1986 0:00);

/* Total FDP time */
/* DutyPointsReport.py */
%fdp_time% = 
  if duty_period.%is_fdp% then fdp.%time%
  else 0:00;

/* DutyPointsReport.py */
%extended_fdp_flag% =
  default(
    if oma16.%is_extended_fdp% then "E"
    else "",
    "");

/* Total DP time between min rest 
**   When we call the function - we must use start of the sby if there
**   is a callout. That is redefine in the cct-submodule.
**/
/* DutyPointsReport.py */
%dp_time% = 
  oma16.%duty_time_in_interval%(%dp_start%, %dp_end%);
 
 
/* DutyPointsReport.py */
%actual_rest% = 
  if duty.%rest_time% = 900:00 then 
    "Inf" 
  else 
    format_time(duty.%rest_time%, "%02h:%02M");
 
/* DutyPointsReport.py */
%dp_start% =
  if duty_period.%is_fdp%
  then fdp.%start_utc%
  else default(first(leg(duty), leg.%ci_start_utc%) where (leg.%is_flight_duty%), duty.%start_utc%);
 
/* DutyPointsReport.py */
%block_on% = 
  if duty_period.%is_fdp% 
  then duty.%last_active_block_on%
  else round_down(duty.%last_active_block_on%, 24:00);

/* DutyPointsReport.py */
%dp_end% = duty.%end_utc%;

/* DutyPointsReport.py */
%sector_reduction% = 0:00; /* since oma16 */

/* DutyPointsReport.py */
%wocl_reduction% =
  0:00; /* since oma16 */

/* DutyPointsReport.py */
%max_duty_fdp% = default(oma16.%max_daily_fdp%, 0:00);

/* DutyPointsReport.py */
%check_in_diff_cc_fdp_extension% = default(oma16.%cc_ci_extension%, 0:00);

/* DutyPointsReport.py */
%sby_reduction% = default(oma16.%standby_reduction_all%, 0:00);

/* DutyPointsReport.py */
%rob_addition% = default(oma16.%rest_on_board_addition%, 0:00);

/* DutyPointsReport.py */
%break_reduction% = default(oma16.%split_duty_addition%, 0:00);

/* DutyPointsReport.py */
%dp_7days% = format_time(0:00, "%h:02M");

/* DutyPointsReport.py */
%dp_14days% = format_time(0:00, "%h:02M");

/* DutyPointsReport.py */
%dp_28days% = format_time(0:00, "%h:02M");

/* DutyPointsReport.py */
%use_dp% = 
  duty_period.%is_fdp% and
  duty_period.%is_last_duty_in_duty_period%;
 
export %fdp_until_now% =
  default(fdp.%time_in_interval%(fdp.%start_utc%,leg.%end_utc%), 0:00);
 
%dp_7_days_bwd_str% =
  %reltime2str%(default(%dp_7_days_bwd%, 0:00));
  
%dp_7_days_bwd% =
  let dp_7_d_start = leg.%start_day_hb_utc%(leg.%homeairport%, %dp_7_d_end%) -
                     6 * 24:00;
  oma16.%duty_time_in_interval%(dp_7_d_start, %dp_7_d_end%);
 
%dp_7_d_end% =
  if is_last(leg(duty)) then
    leg.%co_end_utc%
  else
    leg.%end_utc%;

/* DutyPointsReport.py */
%required_rest% = 
  oma16.%min_rest_after_dp%;
    
%is_last_leg_standby_callout% = last(leg(duty), leg.%is_standby% and leg.%is_standby_callout%);
  
/* end of file */
