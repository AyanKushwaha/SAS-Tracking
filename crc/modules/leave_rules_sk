/* -*- crc -*- 
 *
 */
 
module leave_rules_sk inherits leave_rules

/* Imports */
import common_rules;
import leave_basic;
import leave_crewinfo;
import leave_functions;
import leave_params;
import leave_tables;
import levels;
import rule_exceptions;

/* group of rules to check before publishing vacation*/
export group no_overlap_group = no_overlap_at_all;

redefine group leave_rules = 
  /*debug_display_rule,*/
  no_overlap_rule,
  min_vacation_length_variable_group,
  no_period_overlap,
  only_limited_vacation_awarded_per_season,
  startday_monday_variable_group,
  vacation_start_same_as_fixed_pattern_production,
  vacation_end_same_as_fixed_pattern_freedays,
  previous_free_days_within_summer_if_short_vacation,
  no_overlap_training_rule,
  ilc_restriction_rule,
  minimum_days_between_activities,
  not_excluded_crew_from_date;
/* Rules */

/*%abs2str%(abstime t) =
**  format_time(t,"%02d%b%y,");
**
**
**%trip_act% = 
**  first(leg(extended_trip), activity_subtype);
**
**rule debug_display_rule =
**  valid %trip_start%>1sep2015 and %trip_start%<1nov2015;
**  %trip_start%=1jun2000;
**  failtext concat(
**    %abs2str%(%trip_start%),
**    %abs2str%(%trip_end%),
**    %trip_act%,",",
**    %abs2str%(leave_tables.%date_from_crew_is_excluded%)
**  );
**  startdate = %trip_start%;
**  remark "Display for debug only";
**end
*/

/* Vacation can not overlap into next season. Since the rules are valid for the
   season they start in, it only looks forward. */
rule no_period_overlap =
  valid ( leave_basic.%trip_is_vacation% AND
    %extended_trip_starts_after_pp_start% AND
    leave_tables.%rule_is_active_for_trip% AND NOT
    %ignore_rulefailure_trip%);
  leave_functions.%trip_within_one_season%;
  failtext concat("Vacation, ",
    format_time(%trip_start%, "start %02d%b%Y,"),
    " overlapping into ",
    leave_functions.%trip_end_season%,
    " season (",
    leave_functions.%trip_start_season%,")");
  startdate = %trip_start%;
  remark "VA-assignment can not be in two periods";
end


/* Limit amount of vacation in summer season.
   Looks in the contract data, number of vacation days,*/
rule only_limited_vacation_awarded_per_season =
  valid (leave_basic.%trip_is_vacation% AND
    %extended_trip_starts_after_pp_start% AND
    leave_tables.%rule_is_active_for_trip% AND
  leave_tables.%season%(%trip_start%) = leave_params.%seasonname%(%trip_start%, "SUMMER"));
  %no_vacation_days_in_period% <= %max_vacation_days_in_period%
    - leave_functions.%postponed_vacation_days_in_period%(%trip_start%)
    + rule_exceptions.%overshoot_int%(%trip_start%);
  failtext(Int value, Int limit) = concat("maximum allowed vacation days exceeded. (",
    format_int(limit, "%i"),
    " days).",
    " You requested: ", format_int(value, "%i"),
    " days");
  startdate = %trip_start%;
  remark "Max vacation days exceeded";
end


/* Vacation must start on a monday. Valid only for variable crew. */
rule startday_monday_variable_group =    /*ok_start_variable*/
  valid ( leave_basic.%trip_is_vacation% AND
    leave_crewinfo.%crew_is_variable_group_at_trip_start% AND
    leave_tables.%rule_is_active_for_trip% AND
    %extended_trip_starts_after_pp_start%);
  /* Time of week should be zero, plus the number that we have allowed..*/
  time_of_week(%va_trip_start%) / 24:00 = 0 + rule_exceptions.%overshoot_int%(%trip_start%);
  failtext concat("Vac cannot start on a ",
    leave_functions.%day_of_week%(%va_trip_start%),
    format_time(%va_trip_start%, " start %02d%b%Y"),
    " (",leave_functions.%trip_start_season%,")");
  startdate = %trip_start%;
  remark "Assignment must start on monday";
end


/* Vacation must start on the first day of a production block, according to fixed patterns.
 * Valid for crew not in variable group */
rule vacation_start_same_as_fixed_pattern_production =      /* ok_start_fixed*/
  valid ( leave_basic.%trip_is_vacation% AND
    leave_crewinfo.%crew_is_fixed_group_at_trip_start% AND
    leave_tables.%rule_is_active_for_trip% AND
    %extended_trip_starts_after_pp_start%);
  leave_functions.%get_prev_vacation_start_trip% - %va_trip_start% =
    0:00 + rule_exceptions.%overshoot_rel%(%trip_start%);
  failtext concat("Vac ",
    format_time(%trip_start%, " %02d%b%Y"),
    " must start, ",
    default(format_time(leave_functions.%get_prev_vacation_start_trip%, "%02d%b%Y or "),""),
    default(format_time(leave_functions.%get_next_vacation_start_trip%, "%02d%b%Y"),""),
    " (",leave_functions.%trip_start_season%,")");
  startdate = %trip_start%;
  remark "Coincide with fixed pattern";
end


/* Vacation must end on the first day of a production block, according to fixed patterns,.
 * Valid for crew not in variable group */
rule vacation_end_same_as_fixed_pattern_freedays  =     /*  coincide_with_fixed_pattern */
  valid ( leave_basic.%trip_is_vacation% AND
    leave_crewinfo.%crew_is_fixed_group_at_trip_end% AND
    leave_tables.%rule_is_active_for_trip% AND
    %extended_trip_starts_after_pp_start%);
    leave_functions.%get_next_vacation_end_trip% - %va_trip_end% =
  /* Crew might not have vacations on part time days, so there can be a vlid 'gap' */
  %allowed_part_time_gap% +rule_exceptions.%overshoot_rel%(%trip_start%);
  failtext concat("Vac ",
    default(format_time(%va_trip_end% - 24:00,"%02d%b%Y"), ""),
    " must end, ",
    default(format_time(%previous_allowed_enddate%(%va_trip_end%), "%02d%b%Y"), ""),
    default(format_time(%next_allowed_enddate%(%va_trip_end%), " or %02d%b%Y"), ""),
    " (",leave_functions.%trip_start_season%,")");
  startdate = %trip_start%;
  remark "Coincide with fixed pattern";
end


/* Vacation must be a minimum of days long. Variable crew.
 * Number of days specified in leave_params
 */
rule min_vacation_length_variable_group =
  valid ( leave_basic.%trip_is_vacation% AND
    NOT leave_crewinfo.%crew_is_fixed_group_at_trip_start% AND
    NOT leave_basic.%is_extra_vacation%(first(leg(extended_trip),activity_start_time)) AND
    leave_tables.%rule_is_active_for_trip% AND
    %extended_trip_starts_after_pp_start%);
  leave_basic.%va_trip_days% >= leave_params.%min_vacation_block_length_at_trip_start% -
    rule_exceptions.%overshoot_int%(%trip_start%);
  failtext(Int value, Int limit) = concat(" short vacation length: Minimum vacation length: ",
    format_int(limit,"%i"),
    " day(s). You requested: ",
    format_int(value,"%i"),    
    "day(s)");
  startdate = %trip_start%;
  remark "Assignment too short";
end


/* Rule used by CC CPH (or maybe by none whatsoever..)
 * If it's a short vacation on summer , the free days before it must be within
 * the summer season aswell. Only looks at fixed patterns. */
rule previous_free_days_within_summer_if_short_vacation =
  valid ( leave_basic.%trip_is_vacation% AND
    %extended_trip_starts_after_pp_start% AND
    leave_crewinfo.%crew_is_fixed_group_at_trip_start% AND
    leave_tables.%rule_is_active_for_trip% AND
    leave_functions.%summer_trip% AND NOT %ignore_rulefailure_trip%);
  leave_functions.%previous_freedays_within_summer%;
  failtext concat("Previous F-days not in summer, ",
    format_time(%trip_start%, "start %02d%b%Y,"),
    " (",leave_functions.%trip_start_season%,")");
  startdate = %trip_start%;
  remark "Previous F-days must be within summer";
end


rule no_overlap_rule =
  valid ( activity_subtype in levels.vacation_code AND
    %extended_trip_starts_after_pp_start% AND
    leave_tables.%rule_is_active_for_trip%) AND NOT %ignore_rulefailure_trip%;
  default(prev(leg(chain),activity_end_time) where (%leg_not_ok_to_overlap_vacation%) <= activity_start_time, True)  AND
    default(next(leg(chain),activity_start_time) where (%leg_not_ok_to_overlap_vacation%) >=activity_end_time, True);
  failtext concat("Overlapping assignments,",
    format_time(%leg_start%, " start %02d%b%Y"),
    " (",leave_functions.%trip_start_season%,")");
  startdate = %trip_start%;
  remark "The assignments must not overlap";
end

/* No overlap. It is not OK to overlap other assignments on the roster.
 * Before vacation publish there is a check on all vacation overlaps. */
rule (off) no_overlap_at_all =
	valid activity_subtype in levels.vacation_code AND
    %extended_trip_starts_after_pp_start%;
	default(prev(leg(chain),activity_end_time) <= activity_start_time, True)  AND
	default(next(leg(chain),activity_start_time) >=activity_end_time, True);
	failtext concat("Overlapping assignments,",
			format_time(%leg_start%, " start %02d%b%Y"),
			" (",leave_functions.%trip_start_season%,")");
	startdate=%trip_start%;
	remark "The assignments must not overlap";
end

/* Not released courses are not present on the roster. We have to look in other tables to get that right.*/
rule no_overlap_training_rule =
  valid (leave_basic.%trip_is_vacation% AND
    %extended_trip_starts_after_pp_start% AND
    leave_tables.%rule_is_active_for_trip%) AND
    NOT %ignore_rulefailure_trip%;
  not leave_tables.%has_overlapping_training%;
  failtext concat("Overlapping planned training,",
    format_time(%trip_start%, " start %02d%b%Y"),
    " (",leave_functions.%trip_start_season%,")");
  startdate = %trip_start%;
  remark "The planned training assignments must not overlap";
end


/* Vacation illegal if ILC in a course within 30 days prior to vac.*/
rule ilc_restriction_rule=
  valid (leave_basic.%trip_is_vacation% AND
    %extended_trip_starts_after_pp_start% AND
    leave_tables.%rule_is_active_for_trip%) AND
    NOT %ignore_rulefailure_trip%;
/* If crew has a course that is 30 days or less from vac
   check if course contains ILC that is 30 days or less from vac
   otherwise crew doesn't have ILC restriction */
  leave_tables.%ilc_restriction_rule%;
  failtext concat(format_time(%trip_start%, "Vacation start %02d%b%Y"),
    " is ",
    format_int(leave_tables.%ilc_restriction_length%/24:00, "%i"),
    " days or less from ILC (end ",
    format_time(default( leave_tables.%ilc_crew_training_need_part%(leave_tables.%ilc_restriction_start%, %trip_end%), 
                         leave_tables.%course_ilc_end%(
                            leave_tables.%course_name%(leave_tables.%ilc_restriction_start%, %trip_start%),
                            leave_tables.%ilc_restriction_start%, %trip_start%) )-24:00, "%02d%b%Y") ,
    ")");
  startdate = %trip_start%;
  remark "Vacation is too close to ILC";
end


/*Minimum days between vacations and special activities*/
rule minimum_days_between_activities =
  valid activity_subtype in levels.vacation_code AND
    rule_exceptions.%pp_start% <= %leg_start% AND
    leave_tables.%rule_is_active%(%leg_start%,"");
  %min_time_to_next_or_prev_rule_activity% >= %minimum_time_between_activities% -
    rule_exceptions.%overshoot_rel%(%leg_start%);
  failtext concat(format_time(%leg_start%, "Vac start %02d%b%Y"),
    " is less than ",
    format_int(%minimum_time_between_activities%/24:00, "%i"),
    " days from vacation/activity");
  startdate = %leg_start%;
  remark "Vacation to close to vacation/activity";
end


/*rule to check if the crew is NOT excluded during the Automatic Leave Assigner process 
from a specific date for that season*/

    /*This parameter is used to check the rule not_excluded_crew_from_date
    to only be active during automatic assignment*/
%use_excluded_crew_from_date% = parameter False;

rule not_excluded_crew_from_date =
  valid %use_excluded_crew_from_date% AND
    leave_basic.%trip_is_vacation% /*AND
    /*%extended_trip_starts_after_pp_start% AND
    leave_tables.%rule_is_active_for_trip% AND NOT
    %ignore_rulefailure_trip%;*/;

  %trip_end% <= leave_tables.%date_from_crew_is_excluded%;
  failtext concat(format_time(%trip_start%, "Vac st %02d%b%Y"),
    " is within the excluded period");
  startdate = %trip_start%;
  remark "The crew is excluded of the automatic leave assigner for this period";
end


/* ----------------------------------------------------------- */
redefine %limit_rule_name% = "leave_quota_rule";

%ignore_rulefailure_trip% =
  rule_exceptions.%rule_s_off%(
    rule_exceptions.%current_rule_id%,
    %trip_start%);

%no_vacation_days_in_period% =
  let start_date = leave_functions.%trip_period_start_date%,
    end_date = leave_functions.%trip_period_end_date%;
  sum(extended_trip(chain),leave_basic.%trip_va_length_balance%) where
    (leave_basic.%trip_is_vacation% and leave_functions.%trip_is_in_period%(start_date, end_date));

%max_vacation_days_in_period% =
  leave_crewinfo.%full_summer_vacation_days%(%trip_start%);

/* The allowed gap caused by part time days. Look in the fixed pattern
 * and count the number of part time days after vacation end */
%allowed_part_time_gap% =
  if leave_crewinfo.%has_no_vacation_on_parttime_days_trip_end% then
    leave_functions.%no_of_loa_days_after_va_trip_end%*24:00
  else
    0:00;

export %extended_trip_starts_after_pp_start% =
  rule_exceptions.%pp_start% <= %va_trip_start%;

/* We need to check for part time days here as well. */
%previous_allowed_enddate%(abstime in_date) =
  if leave_crewinfo.%has_no_vacation_on_parttime_days%(in_date) then
    %_previous_allowed_enddate%(in_date) - 24:00
  else
    leave_functions.%get_prev_vacation_end%(in_date) - 24:00;

%_previous_allowed_enddate%(abstime in_date) =
  let parttime = default(leave_functions.%parttime_to_deduct%(in_date), -1),
    end_date = leave_functions.%get_prev_vacation_end%(in_date);
  if (parttime>-1) then
    in_date-parttime*24:00
  else
    end_date-default(leave_functions.%parttime_to_deduct%(end_date), 0)*24:00;

/* We need to check for part time days here aswell. */
%next_allowed_enddate%(abstime in_date) =
  if leave_crewinfo.%has_no_vacation_on_parttime_days%(in_date) then
    if leave_functions.%get_next_vacation_end_parttime%(in_date)>in_date then
      leave_functions.%get_next_vacation_end_parttime%(in_date) - 24:00
    else
      leave_functions.%get_next_vacation_end_parttime%(
        leave_functions.%get_next_vacation_start%(in_date)) - 24:00
  else
    leave_functions.%get_next_vacation_end%(in_date) - 24:00;

%leg_not_ok_to_overlap_vacation% =
  not leave_params.%ok_to_overlap%;


%minimum_time_between_activities% =
  leave_params.%minimum_days_between_activities%(%leg_start%)*24:00;

%min_time_to_next_or_prev_rule_activity% =
  nmin(%time_to_next_activity%, %time_to_previous_activity%);

%time_to_next_activity% =
  let time_to_next_activity = default(%next_start_special_code% - %leg_end%, 10000:00);
  if time_to_next_activity = 0:00 or time_to_next_activity = %allowed_part_time_gap% then
    10000:00
  else time_to_next_activity;

%next_start_special_code% =
  next(leg(chain), %leg_start%) where (activity_subtype in leave_params.min_days_between_activities);

%time_to_previous_activity% =
  let time_to_previous_activity = default(%leg_start% - %prev_end_special_code%, 10000:00);
  if time_to_previous_activity = 0:00 or time_to_previous_activity = %allowed_part_time_gap_before_vacation% then
    10000:00
  else time_to_previous_activity;

%prev_end_special_code% =
  prev(leg(chain), %leg_end%) where (activity_subtype in leave_params.min_days_between_activities);

/*Special case needed when crew change contract on vacation start.
  Found in SASCMS-2148*/
%allowed_part_time_gap_before_vacation% =
  if leave_crewinfo.%crew_end_contract_on_date%(%trip_start%) then
    if leave_crewinfo.%has_no_vacation_on_parttime_days%(%trip_start% - 01:00) then
      default(leave_functions.%parttime_to_deduct_on_contract_end%(%trip_start%)*24:00, 0:00)
    else
      0:00
  else
    if leave_crewinfo.%has_no_vacation_on_parttime_days_trip_start% then
      default(leave_functions.%parttime_to_deduct%(%trip_start%)*24:00, 0:00)
    else
      0:00;
/* ----------------------------------------------------------- */

/* Legal negative balance. This one is called from the leave_legality_checker 
 * to check if balance is OK */
redefine export %legal_negative_balance%(string act, int val, abstime date) =
    if (act in levels.vacation_code) then
        if act = leave_params.%va_code% and val >= leave_params.%allowed_negative_balance%(date, leave_functions.%season%(date)) then
            1
        else
            if act = leave_params.%va1_code% and %unused_VA1_reduction_on_date%(date, act, "Unused VA1", val) then  
               1
            else
                if val >= -leave_tables.%allowed_negative_balance%(act, date) then
                   1
                else
                   void(int)
    else
        1;
        
%unused_VA1_reduction_on_date%(abstime date, string act, string source, int val) =
    let VA1_reduction = leave_tables.%amount%(date, act, source);
    not void(VA1_reduction) and not %VA1_on_date%(date) and val >= VA1_reduction;
    
%VA1_on_date%(abstime date) = 
  default(max(tentative_roster, max(extended_trip(chain), leave_basic.%trip_days%) where (first(leg(extended_trip), activity_subtype) = "VA1" and %trip_start% = date)), 0) > 0;
  
 /* Rule names */
redefine %balance_name% = "VacationBalance";
