/* -*- crc -*-
 *
 * Purpose:
 *   The module describes the 'model' supporting trainings, that isi, basic definitions related to training
 *   and qualifications.
 *   The module should have a minimum of dependencies, and be compileable also for manpower. 
 *   Modules like fundamental and crew are good examples of forbidden modules.
 *
 * Sections:
 *
 * Created by:
 *   Lars Westerlind 2016-12-07
 *
 */

module model_training

import base_utils;
import system_db_parameters;

/****************************************************************
 * Section 1: Basic stuff 
 ***************************************************************/
/****************************************************************
 * Section 2: Misc
 ***************************************************************/

table sim_act_to_ac_type_tbl(String act_code, Int pos) =
  substr(act_code, pos, 1) -> %_sim_ac_family%;
  "2" -> "A320";
  "3" -> "B737";
  "4" -> "A340";
  "5" -> "A350";
  "6" -> "A330";
  "7" -> "CRJ";
  "0" -> "";
  "1" -> "";
  "8" -> "";
  "9" -> "";
  -   -> void_string;
end

export %sim_ac_family%(String act_code) =
  default(
    %_sim_ac_family%(act_code,2),
    default(
      %_sim_ac_family%(act_code, 3),
      ""
  ) );

table ol123_to_ac_family_tbl(String act_code) =
  substr(act_code, 4, 1)
      -> export %ol123_ac_family%;
  "1" -> "CRJ";
  "2" -> "A320";
  "3" -> "B737";
  "4" -> "A340";  /* also A330 */
  -   -> void_string;
end

table ol123_to_coursetype(String act_code) = /* not actually used */
  substr(act_code, 5, 1)
      -> export %ol123_coursetype%;
  "A" -> "CRA";
  "B" -> "CRB";
  "C" -> "CRC";
  "D" -> "Conversion"; 
  "I" -> "Initial";
  "N" -> "NQ";
  "P" -> "AP";
  "S" -> "Service";
  "V" -> "SCC";
  "X" -> "Supervision";
  -   -> void_string;
end
  
/****************************************************************
 * Section 3: Crew training log basic table
 ***************************************************************/

table ctl_table(String crew_id, Abstime st, Abstime et, String type, Int ix) =
  crew_id, st, et, type, ix ->
        export String %training_log_code%,
        export Abstime %training_log_time%;
  external "crew_training_log";
    crew, <=tim, >=tim, typ, match_number -> code, tim;
    -,-,-,-,- ->  void_string, void_abstime;
end

table ctl_last_code_table(String crew_id, Abstime st, Abstime et, String type, String code) =
  crew_id, st, et, type, code -> export Abstime %last_training_log%;
  external "crew_training_log";
    crew, <=tim, >=tim, typ, code -> max(tim);
end

table ctl_last_typ_table(String crew_id, Abstime st, Abstime et, String type) =
  crew_id, st, et, type -> export Abstime %last_training_log_type%;
  external "crew_training_log";
    crew, <=tim, >=tim, typ -> max(tim);
end

table ctl_first_typ_table(String crew_id, Abstime st, Abstime et, String type) =
  crew_id, st, et, type ->
           export Abstime %first_training_log_type%,
           export int %count_training_log_type%;
  external "crew_training_log";
    crew, <=tim, >=tim, typ -> min(tim), count(row_number);
end

/****************************************************************
 * Section 3: Web training codes
 ***************************************************************/

table web_trg_courses_tbl(Int ix) =
  ix -> export %wt_code%, export %wt_airbus%, export %wt_year_rot%, export %wt_spring_season%;
  1  -> "WTA1",    true,        1,          void_bool;
  2  -> "WTA11",   true,        1,          true;
  3  -> "WTA12",   true,        1,          false;
  4  -> "WTA2",    true,        2,          void_bool;
  5  -> "WTA21",   true,        2,          true;
  6  -> "WTA22",   true,        2,          false;
  7  -> "WTA3",    true,        3,          void_bool;
  8  -> "WTA31",   true,        3,          true;
  9  -> "WTA32",   true,        3,          false;
  10 -> "WTB1",    false,       1,          void_bool;
  11 -> "WTB11",   false,       1,          true;
  12 -> "WTB12",   false,       1,          false;
  13 -> "WTB2",    false,       2,          void_bool;
  14 -> "WTB21",   false,       2,          true;
  15 -> "WTB22",   false,       2,          false;
  16 -> "WTB3",    false,       3,          void_bool;
  17 -> "WTB31",   false,       3,          true;
  18 -> "WTB32",   false,       3,          false;
  19 -> "WBTR",    void_bool,   void_int,   void_bool;
  20 -> "WBT1",    void_bool,   1,          void_bool;
  21 -> "WBT2",    void_bool,   2,          void_bool;
  22 -> "WBT3",    void_bool,   3,          void_bool;
  23 -> "WT11",    void_bool,   1,          true;
  24 -> "WT12",    void_bool,   1,          false;
  25 -> "WT21",    void_bool,   2,          true;
  26 -> "WT22",    void_bool,   2,          false;
  27 -> "WT31",    void_bool,   3,          true;
  28 -> "WT32",    void_bool,   3,          false;
  29 -> "W11B3",   void_bool,   1,          true;
  30 -> "W12B3",   void_bool,   1,          false;
  31 -> "W21B3",   void_bool,   2,          true;
  32 -> "W22B3",   void_bool,   2,          false;
  33 -> "W31B3",   void_bool,   3,          true;
  34 -> "W32B3",   void_bool,   3,          false;
  35 -> "W11A2",   void_bool,   1,          true;
  36 -> "W12A2",   void_bool,   1,          false;
  37 -> "W21A2",   void_bool,   2,          true;
  38 -> "W22A2",   void_bool,   2,          false;
  39 -> "W31A2",   void_bool,   3,          true;
  40 -> "W32A2",   void_bool,   3,          false;
  41 -> "W11A3",   void_bool,   1,          true;
  42 -> "W12A3",   void_bool,   1,          false;
  43 -> "W21A3",   void_bool,   2,          true;
  44 -> "W22A3",   void_bool,   2,          false;
  45 -> "W31A3",   void_bool,   3,          true;
  46 -> "W32A3",   void_bool,   3,          false;
  47 -> "W11A5",   void_bool,   1,          true;
  48 -> "W12A5",   void_bool,   1,          false;
  49 -> "W21A5",   void_bool,   2,          true;
  50 -> "W22A5",   void_bool,   2,          false;
  51 -> "W31A5",   void_bool,   3,          true;
  52 -> "W32A5",   void_bool,   3,          false;
  53 -> "W11M3",   void_bool,   1,          true;
  54 -> "W12M3",   void_bool,   1,          false;
  55 -> "W21M3",   void_bool,   2,          true;
  56 -> "W22M3",   void_bool,   2,          false;
  57 -> "W31M3",   void_bool,   3,          true;
  58 -> "W32M3",   void_bool,   3,          false;
  59 -> "W11M5",   void_bool,   1,          true;
  60 -> "W12M5",   void_bool,   1,          false;
  61 -> "W21M5",   void_bool,   2,          true;
  62 -> "W22M5",   void_bool,   2,          false;
  63 -> "W31M5",   void_bool,   3,          true;
  64 -> "W32M5",   void_bool,   3,          false;
  65 -> "W11LH",   void_bool,   1,          true;
  66 -> "W12LH",   void_bool,   1,          false;
  67 -> "W21LH",   void_bool,   2,          true;
  68 -> "W22LH",   void_bool,   2,          false;
  69 -> "W31LH",   void_bool,   3,          true;
  70 -> "W32LH",   void_bool,   3,          false;
  -  -> void_string, void_bool, void_int,   void_bool;
end

export %wt_ix_max% = 70;

export %wt_match_str% =
   cat(times(%wt_ix_max%), %wt_code%(base_utils.%ti0%), " ");

export %wt_newcodes_match_str% = "WT11 WT12 WT21 WT22 WT31 WT32";

export %wt_cod_by_type%(Bool airbus, Int wt_year) =
   let rot = ((wt_year - 2016) mod 3) + 1;
   first(times(%wt_ix_max%), %wt_code%(base_utils.%ti0%))
   where (%wt_airbus%(base_utils.%ti0%) = airbus and %wt_year_rot%(base_utils.%ti0%) = rot and %wt_spring_season%(base_utils.%ti0%) = void_bool);

export %wt_cod_by_type_and_season%(Bool airbus, Int wt_year, Bool spring_season) =
   let rot = ((wt_year - 2016) mod 3) + 1;
   first(times(%wt_ix_max%), %wt_code%(base_utils.%ti0%))
   where (%wt_airbus%(base_utils.%ti0%) = airbus and %wt_year_rot%(base_utils.%ti0%) = rot and %wt_spring_season%(base_utils.%ti0%) = spring_season);

export %is_seasonal_web_training%(String code) =
  not void(first(times(%wt_ix_max%), %wt_code%(base_utils.%ti0%))
  where (%wt_code%(base_utils.%ti0%) = code and not void(%wt_spring_season%(base_utils.%ti0%))));

export %is_spring_web_training%(String code) =
  not void(first(times(%wt_ix_max%), %wt_code%(base_utils.%ti0%))
  where (%wt_code%(base_utils.%ti0%) = code and %wt_spring_season%(base_utils.%ti0%)));

export %is_autumn_web_training%(String code) =
  not void(first(times(%wt_ix_max%), %wt_code%(base_utils.%ti0%))
  where (%wt_code%(base_utils.%ti0%) = code and not %wt_spring_season%(base_utils.%ti0%)));


/********************************************************************
** self study courses (need not an instrutor in TPMS) 
*******************************************************************/

export %cbt_match_str% =
  concat("TH1 ",%wt_match_str%);


/* eof */
/* end of file */
