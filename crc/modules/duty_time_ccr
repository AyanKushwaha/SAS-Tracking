/* -*- crc -*- 
 *
 * 
 *
 * Purpose:
 *   This module contains duty time calculations and limits for both cabin crew 
 *   and flight crew used in CCR.
 *
 * Sections:
 *   1. Duty time limits - Flight crew
 *   2. Duty time limits - Cabin crew
 *   3. Duty time calculations
 *   4. Definitions
 *
 * Created by:
 *   Henrik Albertson, 31-Mar-2005
 *
 * Major changes:
 *
 */

module duty_time_ccr inherits duty_time
import roster;
import wop;
import crew;
import model_crew;
import freedays;
import compdays;
import bought_days;
import rest;
import accumulators;
import training;
import keywords;
import parameters;
import task;
import pp;
import calendar;

/****************************************************************
 * Section 1: Duty time limits - Flight crew
 ***************************************************************/
/*
** Duty period
*/
%max_in_duty_period_sh_temp_skd% = 12:00; /* Agreement CAU K06 Flexible work force p13.8 */
%max_in_duty_period_lh_temp_skd% = 14:00; /* Agreement CAU K06 Flexible work force p13.8 */

/* If no match is found in the table, the lookup will continue in the table
 * defined in parent module (variable %_max_in_duty_period_cc%) */
table duty_period_limits_override_cc =
  crew.%region%, crew.%is_temporary%, duty.%is_long_haul% ->
    redefine %_max_in_duty_period_override_cc%;
  "SKD", true,  false -> %max_in_duty_period_sh_temp_skd%;
  "SKD", true,  true  -> %max_in_duty_period_lh_temp_skd%;
  -, -, - -> void_reltime;
end

redefine export %is_any_sim_instr_scand_dp% = 
  duty.%is_any_sim_instr_scand% or
  default(prev(duty(trip),
          not rest.%duty_followed_by_minimum_scheduled_rest%(duty.union) and
          duty.%is_any_sim_instr_scand%),
          false);

/*
**  7x24 
*/


redefine %_max_in_7x24_hrs_fc% =
    let
        is_sks =
            (crew.%has_agmt_group_sks_fd%
                or (crew.%has_agmt_group_ski_fd% and crew.%homebase% = "STO"))
            and not duty.%is_ac_employer_qa%,
        is_winter =
            %within_01oct_30apr%(duty.%start_UTC%),
        is_valid =
            parameters.%K15_jan16_valid%(duty.%start_UTC%);

        if is_sks and is_winter and is_valid then
            47:00
        else
            47:30;


%within_01oct_30apr%(Abstime date) =
    let
        month_number = calendar.%month_number%(date);
    month_number >= 10 or month_number <= 4;






redefine %max_in_7x24_hrs_fc% = 
  if %crew_has_training_restr_trip_start% and training.%trip_is_in_school_period_min_7x24% then
    42:00 /* Pilot education */
  else
    %_max_in_7x24_hrs_fc%;
redefine export %crew_has_training_restr_trip_start% = 
  default(crew.%has_restr_training_trip_start%, false);

redefine %production_is_intercont% = %all_trips_are_intercont%;
redefine %production_with_long_haul_ac% = 
  default(crew.%is_long_haul_trip_start%, trip.%with_long_haul_ac%);

/* The rule check is nmax of fwd and bwd value. Thus, the check is
 * performed for the period the rule is going to use. HenrikA 07-Jul-2006 */
%all_trips_are_intercont% =
  (%7x24_hrs_fwd% >= %7x24_hrs_bwd% and 
  %all_trips_are_intercont_fwd%) or
  (%7x24_hrs_fwd% < %7x24_hrs_bwd% and
  %all_trips_are_intercont_bwd%);

%all_trips_are_intercont_fwd% =
  let stop = duty.%start_UTC% + 7*24:00;
  all(trip(roster), trip.%is_intercont%)
  from (current) forwards
  while (trip.%start_UTC% < stop);

%all_trips_are_intercont_bwd% =
  let stop = duty.%end_UTC% - 7*24:00;
  all(trip(roster), trip.%is_intercont%)
  from (current) backwards
  while (trip.%end_UTC% > stop);

/* 
** 4 weeks 
*/
redefine %max_in_4_weeks_fc% = 160:00; /* Pilot education */

/*
** Month
** Reduced proportionally with part time factor and qualifying days
** Part time crew has a max of 9:15/9:30 average per day
** Full time crew has a max of 160 hrs per month
** Part time 80% SKS crew has a max of 128 hrs per month
*/
redefine %max_in_month_fc% =
  if crew.%has_some_part_time_in_month% then
    if crew.%is_sks% and crew.%is_part_time_in_pp%(80) then 
        %max_duty_in_month_fc_pt_vg%
    else
        %_max_in_month_fc_pt%
  else
    %max_duty_in_month_fc%;
      
%_max_in_month_fc_pt% =
  let grpchange1 = crew.%first_group_change_date%(wop.%start_month_start%),
      grpchange2 = crew.%first_group_change_date%(crew.%first_group_change_date%(wop.%start_month_start%)+0:01);
    if grpchange1 < wop.%start_month_end% and grpchange1 > wop.%start_month_start% then
      nmin(%max_duty_in_month_fc%,
        %max_in_month_fc_pt_period%(wop.%start_month_start%, grpchange1) + 
		(if grpchange2 < wop.%start_month_end% and grpchange2 > wop.%start_month_start% then
          %max_in_month_fc_pt_period%(grpchange1, grpchange2) +
          %max_in_month_fc_pt_period%(grpchange2, wop.%start_month_end%)
        else
      	  %max_in_month_fc_pt_period%(grpchange1, wop.%start_month_end%))
      )
    else
      %max_in_month_fc_pt_period%(wop.%start_month_start%,
                                  wop.%start_month_end%);
              

%max_in_month_fc_pt_period%(Abstime start, Abstime stop) =
  if crew.%in_fixed_group%(start) then
    %nr_available_days_in_period_fg%(start, stop) *
    %avg_duty_per_day_in_month_fg%
  else
   if ((not crew.%is_passive_plus%(start) and crew.%is_sks%) or
       (crew.%is_passive_plus%(start) and crew.%is_homebase_sks%)) then
    %max_duty_in_month_fc_pt_vg%
   else
	 %nr_available_days_in_period_vg%(start, stop) * 
     %avg_duty_per_day_in_month_vg%;

export %nr_available_days_in_period_fg%(Abstime start_hb, Abstime stop_hb) =
  (stop_hb - start_hb) / 24:00 -
  sum(trip(roster), trip.%days_in_period%(start_hb, stop_hb))
  where(trip.%is_off_duty% or trip.%is_compensation_day%);

/*
**  Maximum FC duty time in calendar month = number of production days x 9:30
**
** There can be a problem however in CCR/Matador that e.g. if the first duty
** assigned exceeds 9:30, it will be considered illegal. To solve this, the
** number of days that are available for production is used instead of just the
** number of production days assigned:
**
** VG: number of days qualifying as F-days - minimum F-day requirement, or
**     number of assigned production days, whichever is the greater.
**
** FG: F-days, and any other time-off days, are assigned before any production, 
**     so number of FG-days in month minus number of F/time-off days, or
**     number of assigned production days, whichever is the greater.
*/

export %nr_p_days_vg_in_1_month%(Abstime start, Abstime stop) =
  if crew.%has_some_variable_group_in_pp% then
    nmax(%nr_potential_p_days_vg_in_1_month%,
         %nr_assigned_p_days_vg_in_1_month%(start,stop))
  else
    0;

%nr_potential_p_days_vg_in_1_month% =
  nmax(first(wop(roster),freedays.%nr_qualifying_in_1_month% -
                         freedays.%min_required_in_1_month% -
                         %nr_assigned_cmp_days_in_1_month%)
         where (wop.%start_month_start% = pp.%start_month%),
       0);

export %nr_assigned_p_days_vg_in_1_month%(Abstime start, Abstime stop) =
  duty_time.%nr_p_days_vg%(start, stop, false, false, true, false);

export %nr_p_days_fg_in_1_month%   =
  let month_start = pp.%start_month%,
      month_end = pp.%end_month%;
  if crew.%has_some_fixed_group_in_pp% then
    nmax(nmax((crew.%fixed_group_end%(month_start,month_end) -
               crew.%fixed_group_start%(month_start,month_end)) / 24:00 -
              first(wop(roster),freedays.%nr_qualifying_in_1_month_fg%)
                where (wop.%start_month_start% = pp.%start_month%) -
              (if %flight_crew% then
                 %nr_assigned_cmp_days_in_1_month%
               else
                 0),0),
         %nr_assigned_p_days_fg_in_1_month%)
  else
    0;

%nr_assigned_p_days_fg_in_1_month% =
  let month_start = pp.%start_month%,
      month_end = pp.%end_month%;

  duty_time.%nr_p_days_fg%(month_start, month_end, false, false, true, false);

%nr_assigned_cmp_days_in_1_month% =
  let month_start = pp.%start_month%,
      month_end = pp.%end_month%;      
  sum(wop(roster),duty_time.%nr_cmp_ill_days_in_wop_in_period%(month_start, month_end,
                                                               true, false));

/* It is assumed that crew does not change VG->FG or V.V more than
** 2 times in given interval
*/
%first_group_changed%(Abstime date) =
  if crew.%first_group_change_date%(date) = 01jan1986 then 31dec2035
  else crew.%first_group_change_date%(date);

export %nr_p_days_vg%(Abstime start, Abstime stop, Bool includeLA8days,
                      Bool includeLAdays, Bool includeBL, Bool includeCMP) =
  let group1 = default(crew.%group_at_date%(start),"X"),
      validto1 = %first_group_changed%(start),
      group2 = default(crew.%group_at_date%(validto1),"X"),
      validto2 = %first_group_changed%(validto1), 
      group3 = default(crew.%group_at_date%(validto2),"X");
  if ((crew.%is_SKN_at_date%(start) or crew.%is_SKD_at_date%(start)) and crew.%is_cabin%) then
    /* V-> */
    /* V -> FG */
    /* V -> FG -> V */
    if group1 = "V" then
      if validto1 >= stop then
        %nr_p_days_in_period_cc%(start, stop, includeLA8days, includeLAdays,
                                 includeBL, includeCMP, true)
      else
        if validto2 >= stop then
          %nr_p_days_in_period_cc%(start, validto1, includeLA8days, includeLAdays,
                                   includeBL, includeCMP, true)
        else if group3 = "V" then
          %nr_p_days_in_period_cc%(start, validto1, includeLA8days, includeLAdays,
                                   includeBL, includeCMP, true) +
          %nr_p_days_in_period_cc%(validto2, stop, includeLA8days, includeLAdays,
                                   includeBL, includeCMP, true)
        else
          %nr_p_days_in_period_cc%(start, validto1, includeLA8days, includeLAdays,
                                   includeBL, includeCMP, true)
    /* FG -> */
    /* FG -> V */
    /* FG -> V -> FG */
    else
      if group2 = "V" and validto2 >= stop and validto1 < stop then
        %nr_p_days_in_period_cc%(validto1, stop, includeLA8days, includeLAdays,
                                 includeBL, includeCMP, true)
      else if group2 = "V" and validto2 <= stop then
        %nr_p_days_in_period_cc%(nmax(start, validto1), validto2, includeLA8days,
                                 includeLAdays, includeBL, includeCMP, true)
      else 0
  else
    /* V-> */
    /* V -> FG */
    /* V -> FG -> V */
    if group1 = "V" then
      if validto1 >= stop then
        %nr_p_days_in_period%(start, stop, includeLA8days, includeLAdays,
                              includeBL, includeCMP, true)
      else
        if validto2 >= stop then
          %nr_p_days_in_period%(start, validto1, includeLA8days, includeLAdays,
                                includeBL, includeCMP, true)
        else if group3 = "V" then
          %nr_p_days_in_period%(start, validto1, includeLA8days, includeLAdays,
                                includeBL, includeCMP, true) +
          %nr_p_days_in_period%(validto2, stop, includeLA8days, includeLAdays,
                                includeBL, includeCMP, true)
        else
          %nr_p_days_in_period%(start, validto1, includeLA8days, includeLAdays,
                                includeBL, includeCMP, true)
    /* FG -> */
    /* FG -> V */
    /* FG -> V -> FG */
    else
      if group2 = "V" and validto2 >= stop and validto1 < stop then
        %nr_p_days_in_period%(validto1, stop, includeLA8days, includeLAdays,
                              includeBL, includeCMP, true)
      else if group2 = "V" and validto2 <= stop then
        %nr_p_days_in_period%(nmax(start, validto1), validto2, includeLA8days,
                              includeLAdays, includeBL, includeCMP, true)
      else 0;
      
/* It is assumed that crew does not change FG->VG or V.V more than
** 2 times in given interval
*/
export %nr_p_days_fg%(Abstime start, Abstime stop, Bool includeLA8days,
                      Bool includeLAdays, Bool includeBL, Bool includeCMP) =
  let group1 = default(crew.%group_at_date%(start),"X"),
      validto1 = %first_group_changed%(start),
      group2 = default(crew.%group_at_date%(validto1),"X"),
      validto2 = %first_group_changed%(validto1), 
      group3 = default(crew.%group_at_date%(validto2),"X");
  /* FG-> */
  /* FG -> VG */
  /* FG -> VG -> FG */
  if group1 = "F" then
    if validto1 >= stop then
      %nr_p_days_in_period%(start, stop, includeLA8days, includeLAdays,
                            includeBL, includeCMP, true)
    else 
      if validto2 >= stop then
        %nr_p_days_in_period%(start, validto1, includeLA8days, includeLAdays,
                              includeBL, includeCMP, true)
      else if group3 = "F" then
        %nr_p_days_in_period%(start, validto1, includeLA8days, includeLAdays,
                              includeBL, includeCMP, true) +
        %nr_p_days_in_period%(validto2, stop, includeLA8days, includeLAdays,
                              includeBL, includeCMP, true)
      else
        %nr_p_days_in_period%(start, validto1, includeLA8days, includeLAdays,
                              includeBL, includeCMP, true)
  /* VG -> */
  /* VG -> FG */
  /* VG -> FG -> VG */
  else
    if group2 = "F" and validto2 >= stop and validto1 < stop then
      %nr_p_days_in_period%(validto1, stop, includeLA8days, includeLAdays,
                            includeBL, includeCMP, true)
    else if group2 = "F" and validto2 <= stop then
      %nr_p_days_in_period%(nmax(start, validto1), validto2, includeLA8days,
                            includeLAdays, includeBL, includeCMP, true)
    else 0;
      

export %nr_p_days_in_period%(Abstime start, Abstime stop, Bool includeLA8days,
                             Bool includeLAdays, Bool includeBL, Bool includeCMP,
                              Bool includePrivatelyTraded) =
    sum(wop(roster), wop.%days_in_period%(start, stop) -
                     %nr_cmp_ill_days_in_wop_in_period%(start, stop, includeBL, includeCMP))
    where ( wop.%is_on_duty% and
            wop.%end_hb% > start and
            wop.%start_hb% < stop);



export %nr_p_days_in_period_cc%(Abstime start, Abstime stop, Bool includeLA8days,
                             Bool includeLAdays, Bool includeBL, Bool includeCMP,
                              Bool includePrivatelyTraded) =
    sum(wop(roster), if (not wop.%is_standby_line%) then
                         wop.%days_in_period%(start, stop) - %nr_cmp_ill_days_in_wop_in_period%(start, stop, includeBL, includeCMP)
                     else
                         (100 * wop.%days_in_period%(start, stop) - %nr_cmp_ill_days_in_wop_in_period%(start, stop, includeBL, includeCMP) + 159) / 160
       )
    where ( wop.%is_on_duty% and
            wop.%end_hb% > start and
            wop.%start_hb% < stop);



export %nr_cmp_ill_days_in_wop_in_period%(Abstime start, Abstime stop,
                                          Bool includeBL, Bool includeCMP) =
  sum(duty(wop), duty.%days%)
    where (((duty.%is_blank_day% and
             not includeBL) or
            (duty.%is_compensation_day% and 
             not includeCMP) or
            duty.%is_illness%) and
           duty.%end_hb% > start and
           duty.%start_hb% < stop);

export %nr_sb_ln_days_in_period%(Abstime start, Abstime stop) =
    sum(wop(roster), %nr_sb_ln_days_in_wop_in_period%(start, stop))
    where (wop.%is_on_duty% and wop.%end_utc% >= start and
           wop.%start_utc% < stop);

export %nr_sb_ln_days_planned_in_period%(Abstime start, Abstime stop) =
    sum(wop(roster), %nr_sb_ln_days_planned_in_wop_in_period%(start, stop))
    where (wop.%end_utc% >= start and wop.%start_utc% < stop);

export %nr_sb_ln_days_in_wop_in_period%(Abstime start, Abstime stop) =
  sum(duty(wop), duty.%days%)
    where (duty.%is_standby_line% and
           duty.%end_utc% >= start and
           duty.%start_utc% < stop);


export %nr_sb_ln_days_planned_in_wop_in_period%(Abstime start, Abstime stop) =
  sum(duty(wop), duty.%days%)
    where (duty.%is_standby_line% and
           duty.%end_utc% >= start and
           duty.%start_utc% < stop);


export %nr_far_single_slipping_in_period%(Abstime start, Abstime stop) =
    sum(trip(roster), 1)
    where (trip.%is_far_single_slipping_longhaul% and
           trip.%start_utc% >= start and
           trip.%start_utc% < stop);

/*
*********************************************************************
** Max production days rules for FD SKN 2011 (Can be removed in 2012)
*********************************************************************
** START
*********************************************************************
*/
/* scaled 1000 */

%m_start%(Abstime m_start) = m_start + (24:00 * (%times_index_0% -1));
%m_end%(Abstime m_start) = m_start + (24:00 * %times_index_0%);

%scale% = 1000;

%nr_p_days_in_publ_period_skn% =  
  sum(wop(roster), %days_in_period_skn%(%publ_period_start%, %publ_period_end%))
           
  where (crew.%is_SKN_at_date%(wop.%start_hb%) and
         wop.%end_hb% >= %publ_period_start% and
         wop.%start_hb% < %publ_period_end%)
		 
 - %not_production_days_skn%(%publ_period_start%, %publ_period_end%)
 - %not_production_days_wf_sg_skn%(%publ_period_start%, %publ_period_end%);
                
/* scaled 1000 */
%days_in_period_skn%(Abstime start_hb, Abstime stop_hb) = 
    wop.%days_in_period%(start_hb, stop_hb) * %scale%;                      
                       
/* scaled 1000 */
%not_production_days_skn%(Abstime start_hb, Abstime stop_hb) = 		   
  let d_days = (stop_hb - start_hb) / 24:00;

  sum(times(d_days), 
    if crew.%is_SKN_at_date%(%m_start%(start_hb)) and
	   any(duty(roster), overlap(duty.%start_hb%, duty.%end_hb%, %m_start%(start_hb), %m_end%(start_hb)) > 0:00)
	     where ((duty.%group_code% in p_days_fd_not_production_days_group
                and not (duty.%code% in p_days_fd_production_fre_activity)) or
                duty.%code% in p_days_fd_not_production_fte_activity)

    then 1 * %scale% else 0);

/* scaled 1000 */
%not_production_days_wf_sg_skn%(Abstime start_hb, Abstime stop_hb) = 
  let d_days = (stop_hb - start_hb) / 24:00;

  sum(times(d_days),
    if crew.%is_SKN_at_date%(%m_start%(start_hb)) and
       any(duty(roster), overlap(duty.%start_hb%, duty.%end_hb%, %m_start%(start_hb), %m_end%(start_hb)) > 0:00) 
	     where (duty.%code% in p_days_fd_long_term_ill or duty.%group_code% = "SGD")
	
    then 1 * (%scale% - ((568 * crew.%part_time_factor%) / 100)) else 0);

/*
*********************************************************************
** END
*********************************************************************
*/

/* Max production days in year FD */

/* scaled 1000 */
/*export %nr_p_days_in_publ_period_fd% =  
    if (crew.%max_production_days_rule_FC_SKN_valid%) then
        %nr_p_days_in_publ_period_skn%
    else
        sum(wop(roster), %days_in_period_fd%(%publ_period_start%, %publ_period_end%) -
            %not_production_days_fd%(%publ_period_start%, %publ_period_end%) - 
            %not_production_days_wf_sg_fd%(%publ_period_start%, %publ_period_end%))
    
        where (wop.%end_hb% >= %publ_period_start% and
               wop.%start_hb% < %publ_period_end%); */
			   
export %nr_p_days_in_publ_period_fd% =  
    if (crew.%max_production_days_rule_FC_SKN_valid%) then
        %nr_p_days_in_publ_period_skn%
    else
        sum(wop(roster), %days_in_period_fd%(%publ_period_start%, %publ_period_end%))

        where (wop.%end_hb% >= %publ_period_start% and
               wop.%start_hb% < %publ_period_end%)
		
		- %not_production_days_fd%(%publ_period_start%, %publ_period_end%)
		- %not_production_days_wf_sg_fd%(%publ_period_start%, %publ_period_end%);
			   
                
/* scaled 1000 */
%days_in_period_fd%(Abstime start_hb, Abstime stop_hb) = 
    (wop.%days_in_period%(start_hb, stop_hb) - freedays.%wop_possible_single_freedays%(start_hb, stop_hb)) * %scale%;                      
                       
/* scaled 1000 */
%not_production_days_fd%(Abstime start_hb, Abstime stop_hb) = 
  let d_days = (stop_hb - start_hb) / 24:00;

  sum(times(d_days), 
    if any(duty(roster), overlap(duty.%start_hb%, duty.%end_hb%, %m_start%(start_hb), %m_end%(start_hb)) > 0:00)
	   where((duty.%group_code% in p_days_fd_not_production_days_group) and not
             (duty.%code% in p_days_fd_production_fre_activity) or
             (duty.%code% in p_days_fd_not_production_fte_activity) or
              training.%duty_is_in_long_course_period%)
	
    then 1 * %scale% else 0);
	
/* scaled 1000 */
%not_production_days_wf_sg_fd%(Abstime start_hb, Abstime stop_hb) = 
  let d_days = (stop_hb - start_hb) / 24:00;

  sum(times(d_days), 
    if any(duty(roster), overlap(duty.%start_hb%, duty.%end_hb%, %m_start%(start_hb), %m_end%(start_hb)) > 0:00)
	   where((duty.%code% in p_days_fd_long_term_ill) or 
              duty.%group_code% = "SGD" or 
              duty.%code% = "RL") then
	
       1 * (%scale% - crew.%work_factor_pt_at_date%(%m_start%(start_hb)))
	else 0);

set p_days_fd_long_term_ill = parameter
    "IL12", "IL12R"
    remark "FDPDAYS: Long term illness codes.";
   
set p_days_fd_not_production_days_group =  parameter
    "PFR", "PPF", "VAC", "FRE"
    remark "FDPDAYS: Groups not contributing to production.";
    
set p_days_fd_production_fre_activity =  parameter 
    ""
    remark "FDPDAYS: Codes contributing to production.";
    
set p_days_fd_not_production_fte_activity = parameter 
    "LA12", "LA15", "LA7", "LA60", "LA58",
    "LA13", "LA31", "LA20", "LA70", "LA59",
    "LA14", "LA32", "LA22", "LA71", "LA21",
    "LA80", "LA33", "F88", "LA72", 
    "MI", "LA36", "IL8", "LA73", 
    "LA61", "LA41", "LA84",
    "LA62", "LA42", "LA85", 
    "LA63", "LA43", "DF8", "LA5", 
    "LA64", "LA44", "F8", "LA35", 
    "LA65", "LA45", "F81", "LA53",
    "LA66", "LA46", "F82", "LA4", 
    "LA67", "LA47", "F85", "LA37",
    "LA68", "LA48", "FB8", "LA39",
    "LA76", "LA56", "FF8", "LA51",
    "LA77", "LA57", "LA8", "LA52", "F31"     
    remark "FDPDAYS: Codes not contributing to production.";
 
%nr_available_days_in_period_vg%(Abstime start, Abstime stop) =
  %nr_p_days_in_period%(start, stop, false, false, true, false, true);

%avg_duty_per_day_in_month_fg% =
  if crew.%is_sks% then
    9:30
  else 
    9:00;

%avg_duty_per_day_in_month_vg% = 
    if freedays.%parttime_code_pp_start% = "LA8" then
        9:15
    else
        %avg_duty_per_day_in_month_vg_para%;

%avg_duty_per_day_in_month_vg_para% =
  parameter 9:15 remark "FC: Average duty per day for variable group";

export %max_duty_in_month_fc% = 
   160:00;

export %max_duty_in_month_fc_pt_vg% =
  %max_duty_time_pt_factor_vg_sks%(wop.%start_day%);

table max_duty_in_month_fc_sks(Abstime date) =
  crew.%part_time_factor_at_date%(date) -> 
    %max_duty_time_pt_factor_vg_sks%;
 100 -> 160:00;
  90 -> 144:00;
  80 -> 128:00;
  75 -> 120:00;
  50 -> 80:00;
  -  -> 999:00; /* Obvious error code */
end

/* 
** Valid statements used for rule (duty in month) and for cost 
*/
  
export %cost_valid_duty_time_calendar_month% =
  (crew.%is_short_haul_pp_start% or
  crew.%is_short_haul%(%publ_period_end%)) and
  (crew.%part_time_factor_at_date%(%pp_start%) = 80 or
   crew.%part_time_factor_at_date%(round_up_month(%pp_start% + 0:01)) = 80) and
  %flight_crew% and not crew.%is_sks%;
  
/****************************************************************
 * Section 2: Duty time limits - Cabin crew
 ***************************************************************/

/* 
** SKS Cabin Crew:
** Calendar week. 
*/
export %max_in_calendar_week_sks% = 42:00;

/*
** SKS Cabin Crew:
** Duty pass for short haul with no charter or legs > 4:00
*/
export %max_in_duty_pass_sh_sks% = %max_in_duty_period_sh_sks%;

/*
** SKS Cabin Crew:
** Duty pass for long haul or charter or legs > 4:00
*/
export %max_in_duty_pass_lh_sks% = %max_in_duty_period_lh_sks%;

/*
** 4 weeks
*/
redefine %max_in_4_weeks_cc% = 140:00; /* JAP */

/*
** Month
*/
table duty_time_month_limits_cc =
  crew.%region% ->
    redefine %max_in_month_cc%;

    "SKJ" -> %max_in_month_cc_skj%;
    -     -> %max_in_month_cc_4exng%;
end

export %max_in_month_cc_4exng% = parameter 166:00
remark "Max duty in calendar month CC 4ExNG";

export %max_in_3_months_cc_4exng% = %max_in_month_cc_4exng%*3;

%max_in_month_cc_skj% = 150:00;

/* This variable is used for rostering. It is not reliable in tracking for long
   activities, like LA. In that case, the duty level limit should be used. */
export %max_in_month_wop% = %max_in_month%;

/* Reduced proportionally with part time factor. SKN Temporary crew are 
 * considered as 100% crew with respective to the duty time per month
 * rule. */
%max_in_month_cc_skn% =
  (if crew.%part_time_change_in_month% then
     crew.%avg_pt_factor_times_days_in_month%
   else
     wop.%month_days% * %part_time_factor_month_start_skn%)
  * %max_duty_in_month_cc_skn% / (wop.%month_days% * 100);

%part_time_factor_month_start_skn% = 
  if crew.%is_temporary_at_date%(wop.%start_month_start%) then
    100
  else
    crew.%part_time_factor_month_start%;

%max_duty_in_month_cc_skn% = if parameters.%k11_skn_cc_sp10_7_valid%(%pp_start%) then 154:00 else 153:50;

/* Reduced proportionally with part time factor and qualifying days
 * NB! Applies also for SKN CC from 01jul11
 */
%max_in_month_cc_sks% =
  (if crew.%part_time_change_in_month% then
     %qualifying_days_in_period%(duty.%start_month_start%,
                                 crew.%part_time_change_date%) *
     %max_duty_time_pt_factor_cc%(duty.%start_month_start%) +
     %qualifying_days_in_period%(crew.%part_time_change_date%,
                                 duty.%start_month_end%) *
     %max_duty_time_pt_factor_cc%(crew.%part_time_change_date%)
   else
     %qualifying_days_in_month% * %max_duty_time_pt_factor_cc%(duty.%start_month_start%))  
  / 
  (duty.%month_days%);

table max_duty_in_month_cc(Abstime date) =
  crew.%region_at_date%(date),
  crew.%part_time_factor_at_date%(date),
  crew.%is_temporary_at_date%(date) -> 
    %max_duty_time_pt_factor_cc%;
    
  "SKS",  100, false -> 158:00;
  "SKS",   80, false -> 126:00;
  "SKS",   75, false -> 118:30;
  "SKS",   50, false ->  80:00;
  
  "SKN",   - , false -> %max_duty_in_month_cc_skn% * crew.%part_time_factor_at_date%(date) / 100; /* max duty time scaled with part_time_factor_at_date */
 
  "SKN",   - , true  -> %max_duty_in_month_cc_skn%;
  "SKS",   - , true  -> 158:00;

  "SKJ",   - ,   -   -> 150:00;
  
    -  ,   - ,   -   -> 999:00; /* Obvious error code */
end
 

%max_duty_in_month_cc_sks% = 158:00;

table max_duty_in_month_part_time(Abstime date) =
  crew.%is_region_scand%,
  crew.%part_time_factor_at_date%(date) ->
    export %max_duty_in_calendar_month_pt_cc%,
    export %max_duty_in_3_months_pt_cc%;
    
  true,   80 -> 132:48, 398:00;
  true,   75 -> 124:30, 374:00;
  true,   60 ->  99:36, 299:00;
  true,   50 ->  83:00, 249:00;
  true,   90 -> 149:24, 448:12;
  true,   51 ->  84:39, 253:58;
  
    -  ,   -  -> 999:00, 999:00; /* Obvious error code */
end

export %qualifying_days_in_month% =
  %qualifying_days_in_period%(duty.%start_month_start%, duty.%start_month_end%);

%qualifying_days_in_period%(Abstime start, Abstime stop) =
  (stop - start) / 24:00 -
  %nr_reducing_days%(start, stop);

%nr_reducing_days%(Abstime start, Abstime stop) =
  sum(wop(roster), (if wop.%start_hb% >= start and wop.%end_hb% <= stop then
                      if %wop_has_reducing_days_IL_or_F31% then
                        %wop_reducing_days_IL_or_F31%(start, stop)
                      else
                        wop.%days%
                    else
                        if %wop_has_reducing_days_IL_or_F31% then
                          %wop_reducing_days_IL_or_F31%(start, stop)
                        else
                          overlap(wop.%start_hb%, wop.%end_hb%, start, stop) / 24:00))
  where (%wop_is_reducing% and
         wop.%end_hb% >= start and 
         wop.%start_hb% <= stop);

%wop_is_reducing% =
  wop.%is_vacation% or
  wop.%is_loa% or
  %wop_has_reducing_days_IL_or_F31%;

%wop_has_reducing_days_IL_or_F31% = 
  any(trip(wop),%is_reducing_days_IL_or_F31%);
  
%wop_reducing_days_IL_or_F31%(Abstime start, Abstime stop) =
  sum(trip(wop), trip.%days_in_period%(start, stop))
  where (%is_reducing_days_IL_or_F31%);

%is_reducing_days_IL_or_F31% =
  (trip.%is_illness% and not crew.%is_skn%) or
  any(leg(trip), task.%code% = "F31");

export %lh_charter_in_previous_or_next_wop_freedays_ok% = 
  let has_lh_charter_before =
      default(prev(wop(roster),last(duty(wop),freedays.%wop_has_long_haul_charter_duty%))
                where (wop.%is_on_duty%),
              false),
      has_lh_charter_after = 
      default(next(wop(roster),last(duty(wop),freedays.%wop_has_long_haul_charter_duty%))
                where (wop.%is_on_duty%),
              false);
      
  not (has_lh_charter_before or has_lh_charter_after) or
  (crew.%in_variable_group_duty_end% and
   (not has_lh_charter_before or
    prev(wop(roster),last(duty(wop),freedays.%freedays_after_duty%))
      where (wop.%is_on_duty%) > 
    freedays.%min_required_freedays_after_duty_total%) and
   (not has_lh_charter_after or
    freedays.%freedays_after_duty% > freedays.%min_required_freedays_after_duty_total%));

/****************************************************************
 * Section 3: Duty time calculations
 ***************************************************************/
/*
** 1x24 hrs
*/
redefine export %1x24_hrs_fwd% =
  roster.%duty_time_in_period%(duty.%start_UTC%, duty.%start_UTC% + 1*24:00,
                               fundamental.%night_upg%, duty.union) -
  %passive_plus_reduction%(duty.%start_UTC%, duty.%start_UTC% + 1*24:00);
redefine export %1x24_hrs_bwd% =
  roster.%duty_time_in_period%(duty.%end_UTC% - 1*24:00, duty.%end_UTC%,
                               fundamental.%night_upg%, duty.union) -
  %passive_plus_reduction%(duty.%end_UTC% - 1*24:00, duty.%end_UTC%);



redefine export %1x24_hrs% = nmax(%1x24_hrs_bwd%, %1x24_hrs_fwd%);

redefine export %duty_time_calendar_day_end_day% =
  oma16.%duty_time_in_interval_indust%(duty.%end_day_hb_utc%, duty.%end_day_hb_utc% + 24:00) -
  %passive_plus_reduction%(duty.%end_day_hb_utc%,duty.%end_day_hb_utc% + 24:00);

redefine export %duty_time_calendar_day_start_day% =
  oma16.%duty_time_in_interval_indust%(duty.%start_day_hb_utc%, duty.%start_day_hb_utc% + 24:00) -
  %passive_plus_reduction%(duty.%start_day_hb_utc%,
                           duty.%start_day_hb_utc% + 24:00);



redefine export %1x24_hrs_fwd_no_night_upg% =
  roster.%duty_time_in_period%(duty.%start_UTC%, duty.%start_UTC% + 1*24:00, false, duty.union);
redefine export %1x24_hrs_bwd_no_night_upg% =
  roster.%duty_time_in_period%(duty.%end_UTC% - 1*24:00, duty.%end_UTC%, false, duty.union);
redefine export %1x24_hrs_no_night_upg% = nmax(%1x24_hrs_bwd_no_night_upg%, %1x24_hrs_fwd_no_night_upg%);

/*redefine export %1x24_hrs_fwd_caa% =
  roster.%duty_time_in_period_caa%(duty.%start_UTC%, duty.%start_UTC% + 1*24:00, fundamental.%night_upg%, duty.union);
redefine export %1x24_hrs_bwd_caa% =
  roster.%duty_time_in_period_caa%(duty.%end_UTC% - 1*24:00, duty.%end_UTC%, fundamental.%night_upg%, duty.union);
redefine export %1x24_hrs_caa% = nmax(%1x24_hrs_bwd_caa%, %1x24_hrs_fwd_caa%);
*/
/*
** 2x24 hrs
*/
export %2x24_hrs_bwd% =
  roster.%duty_time_in_period%(trip.%end_UTC% - 2*24:00, trip.%end_UTC%, fundamental.%night_upg%, duty.union);

/*
** 7x24 hrs
*/

redefine export %7_calendar_days% =
  %7x24_hrs_in_period%(duty.%end_day_hb_utc% - 6*24:00,
                       duty.%end_day_hb_utc% + 24:00,
                       %7x24_hrs_has_night_upg%,
                       duty.net_skj);


redefine export %7x24_hrs_bwd% =
  if %use_7x24_bwd% then
    %7x24_hrs_in_period%(%7x24_hrs_bwd_start%,
                         %7x24_hrs_bwd_start% + 7*24:00,
                         %7x24_hrs_has_night_upg%,
                         duty.union) -
    %passive_plus_reduction%(%7x24_hrs_bwd_start%,
                             %7x24_hrs_bwd_start% + 7*24:00)
  else
    0:00;

redefine export %7x24_hrs_fwd% =
  if %use_7x24_fwd% then
    %7x24_hrs_in_period%(%7x24_hrs_fwd_start%,
                         %7x24_hrs_fwd_start% + 7*24:00,
                         %7x24_hrs_has_night_upg%,
                         duty.union) -
    %passive_plus_reduction%(%7x24_hrs_fwd_start%,
                             %7x24_hrs_fwd_start%  + 7*24:00)
  else
    0:00;
    
export %7x24_hrs_bwd_no_cmp_day% =
  if %use_7x24_bwd% then
    %7x24_hrs_in_period_no_cmp_day%(%7x24_hrs_bwd_start%,
                                    %7x24_hrs_bwd_start% + 7*24:00,
                                    %7x24_hrs_has_night_upg%,
                                    duty.union)
  else
    0:00;
    
export %7x24_hrs_fwd_no_cmp_day% =
  if %use_7x24_fwd% then
    %7x24_hrs_in_period_no_cmp_day%(%7x24_hrs_fwd_start%,
                                    %7x24_hrs_fwd_start% + 7*24:00,
                                    %7x24_hrs_has_night_upg%,
                                    duty.union)
  else
    0:00;

table duty_time_7x24_hrs =
  %cabin_crew%, crew.%region% ->
    export %use_7x24_bwd%,
    export %7x24_hrs_bwd_start%,
    export %use_7x24_fwd%,
    export %7x24_hrs_fwd_start%,
    export %7x24_hrs_has_night_upg%;

  false, "SKS" -> true,
                  if %agreement_valid%("7x24_fd_sks", duty.%start_UTC%) then
                     duty.%end_UTC% - 7*24:00
                  else
                    duty.%end_day_hb_utc% + 24:00 - 7 * 24:00,
                  true,
                  if %agreement_valid%("7x24_fd_sks", duty.%start_UTC%) then 
                     duty.%start_UTC% 
                  else 
                    duty.%start_day_hb_utc%,
                  false;
  false, "SKN" -> true,
                  if %agreement_valid%("7x24_fd_sks", duty.%start_UTC%) then
                     duty.%end_UTC% - 7*24:00
                  else
                    duty.%end_day_hb_utc% + 24:00 - 7 * 24:00,
                  true,
                  if %agreement_valid%("7x24_fd_sks", duty.%start_UTC%) then 
                     duty.%start_UTC% 
                  else 
                    duty.%start_day_hb_utc%,
                  false;
  &
  false,  -    -> true,
                  duty.%end_UTC% - 7*24:00,
                  true,
                  duty.%start_UTC%,
                  false;
  true, "SKD"  -> if parameters.%k12_skd_cc_sp4_3_valid%(duty.%start_hb%) then
                    true
                  else
                    false,
                  if parameters.%k12_skd_cc_sp4_3_valid%(duty.%start_hb%) then
                    duty.%end_UTC% - 7*24:00
                  else
                    void_abstime,
                  if parameters.%k12_skd_cc_sp4_3_valid%(duty.%start_hb%) then
                    true
                  else
                    (is_first(trip(wop)) and not duty.%is_bought% and 
                     is_first(duty(trip)) and
                     %duty_is_first_in_wop%) or
                    prev(duty(wop), duty.%is_bought% or duty.%is_off_duty_cmp%),
                  %duty_start_7x24_SKD_CC%,
                  fundamental.%night_upg%;
  true, "SKN"  -> parameters.%k11_skn_cc_sp10_9_valid%(trip.%start_day%) or
                  not %any_duty_is_long_haul_in_7x24_bwd_not_bought_day%,
                  duty.%end_day% + 24:00 - 7*24:00,
                  parameters.%k11_skn_cc_sp10_9_valid%(trip.%start_day%) or
                  not %any_duty_is_long_haul_in_7x24_fwd_not_bought_day%,
                  duty.%start_day%,
                  fundamental.%night_upg%;
  true, "SKS"  -> false,
                  void_abstime,
                  true,
                  duty.%start_day_hb_utc%,
                  false;
  true, "SKJ"  -> true,
                  duty.%end_UTC% - 7*24:00,
                  true,
                  duty.%start_UTC%,
                  false;
  -, - -> false, void_abstime, false, void_abstime, false;
end

/* Duty is first in wop
**   Redefined in CCT module where rescheduling info is used 
*/
export %duty_is_first_in_wop% =
  is_first(duty(wop));

/*Redefined in CCT using resheduling info*/ 
%duty_start_7x24_SKD_CC% = 
  duty.%start_UTC%;

redefine export %7x24_hrs_in_period%(Abstime start_utc, Abstime stop_utc, Bool night_upg, DutyCalculation dutycalc) =
  let t = roster.%duty_time_in_period%(start_utc, stop_utc, night_upg, dutycalc);
            
  if compdays.%use_compday_duty_time%(default(crew.%hb_time%(start_utc), trip.%hb_time%(start_utc))) then
    %compdays_duty_time_in_period%(start_utc, stop_utc) + 
    t
  else
    t;

export %7x24_hrs_in_period_no_cmp_day%(Abstime start_utc, Abstime stop_utc, Bool night_upg, DutyCalculation dutycalc) =
  roster.%duty_time_in_period%(start_utc, stop_utc, night_upg, dutycalc);


%skd_duty_time_in_period%(Abstime start_utc, Abstime stop_utc, Bool night_upg, DutyCalculation dutycalc) = 
  roster.%duty_time_in_period%(start_utc, stop_utc, night_upg, dutycalc)
  + %duty_time_bought_days_skd_in_period%(start_utc, stop_utc, night_upg, dutycalc);
      
%duty_time_bought_days_skd_in_period%(Abstime start_utc, Abstime stop_utc, Bool night_upg, DutyCalculation dutycalc) =
  sum(duty(chain), duty.%duty_time_bought_days_skd_in_period%(start_utc, stop_utc, night_upg, dutycalc));
      
%compdays_duty_time_in_period_fwd%(Abstime start, Abstime stop) =
  compdays.%duty_time_in_period_fwd%(start, stop);
  
export %compdays_duty_time_in_period%(Abstime start_utc, Abstime stop_utc) =
  first(duty(chain), %compdays_duty_time_in_period_fwd%(start_utc, stop_utc))
  where(duty.%end_utc% > start_utc);
  
redefine export %passive_plus_reduction%(Abstime start_utc, Abstime stop_utc) =
  sum(duty(roster),duty.%passive_plus_reduction%(start_utc,stop_utc))
    where (overlap(duty.%start_utc%,duty.%end_utc%,
                   start_utc,stop_utc) > 0:00 and
           crew.%is_passive_plus%(trip.%start_day%));
  
/* Agreement: FC 1:17 2.3.Ba */
export %any_delayed_check_out_in_7x24_hrs_bwd% =
  let this = duty.%start_UTC%;
  any(wop(roster), wop.%has_delayed_check_out%)
  from (current) backwards
  while (wop.%start_UTC% >= this - 7*24:00);

redefine export %any_delayed_check_out_in_7x24_hrs_fwd% =
  let this = wop.%start_UTC%;
  any(duty(roster), duty.%has_delayed_check_out%)
  from (current) forwards
  while (duty.%start_UTC% <= this + 7*24:00);    

/* Redefined for CCT */
export %skn_bought_va_duty_time%(Abstime start, Abstime stop) = 0:00;
%skn_illness_duty_time%(Abstime start, Abstime stop) = 0:00;

/*
** 4 weeks
*/
export %4_weeks% = 
  roster.%duty_time_in_period%(trip.%start_week_end% - 4*7*24:00,
                               trip.%start_week_end%,
                               fundamental.%night_upg%,
                               duty.union);

export %4_weeks_no_night_upg% = 
  accumulators.%duty_time_in_period_no_night_upg%(trip.%start_week_end% - 4*7*24:00,
                               trip.%start_week_end%);

/*
** Calendar month
*/
export %calendar_month% = 
  roster.%duty_time_in_period%(crew.%utc_time%(wop.%start_month_start%),
                               crew.%utc_time%(wop.%start_month_end%), 
                               fundamental.%night_upg%, 
                               duty.union) -
  %passive_plus_reduction%(crew.%utc_time%(wop.%start_month_start%),
                           crew.%utc_time%(wop.%start_month_end%));

export %calendar_month_no_night_upg% = 
  let duty_calc = if duty.%is_skj% then
                    duty.net_skj
                  else
                    duty.union;
                  
  roster.%duty_time_in_period%(crew.%utc_time%(wop.%start_month_start%),
                               crew.%utc_time%(wop.%start_month_end%),
                               false, 
                               duty_calc);

/* Redefined for CCT% */
export %duty_time_fc_in_period%(Abstime start_hb, Abstime stop_hb) =
    accumulators.%planned_duty_time_2_months_fc%(start_hb, stop_hb);
  
/* Redefined for CCT% */
export %max_duty_time_2_months_fc% =
    (accumulators.%nr_planned_p_days_2_months_fc%(%duty_time_2_months_start_check%,
                                            round_up_month(wop.%start_hb% + 0:01)))
    * %max_duty_time_factor%;

export %max_duty_time_factor% =
   if crew.%in_variable_group_wop_start%
   then 8:48
   else 9:30;

export %duty_time_2_months_start_check% = 
  if (%crew_changes_from_vg_to_fg% or
      %crew_changes_from_fg_to_vg%) and
     not fundamental.%even_month_by_month_start%(wop.%start_hb%) then
    wop.%start_month_start%
  else
    add_months(wop.%start_month_start%, -1);

/* Crew changes from VG->FG before end of month */
export %crew_changes_from_vg_to_fg% =
  crew.%in_variable_group_wop_start% and
  default(next(wop(roster), crew.%in_fixed_group_wop_start%), false);
  
/* Crew changes from FG->VG before end of month */
export %crew_changes_from_fg_to_vg% =
  crew.%in_fixed_group_wop_start% and
  default(next(wop(roster), crew.%in_variable_group_wop_start%), false);

/* Redefined for CCT% */
export %duty_time_cc_in_period%(Abstime start_hb, Abstime stop_hb) =
  accumulators.%planned_duty_time_2_months_skn_cc%(start_hb, stop_hb);

export %duty_time_cc_in_period_actual_scheduled%(Abstime start_hb, Abstime stop_hb) =
        accumulators.%actual_duty_time_cc_scheduled%(start_hb, stop_hb);

export %duty_time_skn_cc_in_period_scheduled%(Abstime start_hb, Abstime stop_hb) =
        accumulators.%duty_time_skn_cc_scheduled%(start_hb, stop_hb);

/* Redefined for CCT% */
export %max_duty_time_2_months_cc% =
    let duty_start = duty.%start_HB%;
    accumulators.%nr_planned_p_days_2_months_cc%(
        calendar.%month_pair_start%(duty_start),
        calendar.%month_pair_end%(duty_start))
    * %avg_daily_duty_time_2_months_cc%;
    
/* SKCMS-520 -> SKCMS-1341 -> SKCMS-1895*/
export %max_duty_time_2_months_skn_skd_cc_planned% =
  %nr_p_days_2_months_skn_cc_planned% * %duty_time_per_prod_day_2_months_skn_skd_cc%;

export %nr_p_days_2_months_skn_cc_planned% =
    let duty_start = duty.%start_HB%;
    if crew.%is_SKD% then
      accumulators.%nr_planned_p_days_2_months_cc%(
        calendar.%month_pair_start%(duty_start),
        calendar.%month_pair_end%(duty_start))
    else
      accumulators.%nr_planned_p_days_skn_cc%(
        calendar.%month_pair_start%(duty_start),
        calendar.%month_pair_end%(duty_start));

export %duty_time_per_prod_day_2_months_skn_skd_cc% =
    parameter 8:48
    remark "Time factor for 2 months planned P days duty time calc";

/* SKCMS-1057 -> SKCMS-1341 */
export %nr_sb_ln_days_2_months_snk_cc_planned% =
    let duty_start = duty.%start_HB%;
    accumulators.%nr_planned_sb_ln_days_cc%(
        calendar.%month_pair_start%(duty_start),
        calendar.%month_pair_end%(duty_start));

export %nr_p_days_in_1_month_cc% =
  let month_start = pp.%start_month%,
      month_end = pp.%end_month%;
  %nr_p_days_fg_in_1_month% + %nr_p_days_vg_in_1_month%(month_start,month_end);

%avg_daily_duty_time_2_months_cc% =
  parameter 8:48;

export %duty_time_2_months_start_check_cc% = 
  add_months(wop.%start_month_start%, -1);

export %duty_time_in_2_months_cc%(Abstime start_hb, Abstime end_hb) =
  let start_utc = crew.%utc_time%(start_hb),
      end_utc = crew.%utc_time%(end_hb);
  roster.%duty_time_in_period%(start_utc,end_utc,fundamental.%night_upg%, duty.union) +
  (if compdays.%use_compday_duty_time%(start_hb) then
     %compdays_duty_time_in_period%(start_utc,end_utc)
   else
     0:00);

export %duty_time_cc_scheduled%(Abstime start_hb, Abstime end_hb) =
  let start_utc = crew.%utc_time%(start_hb),
      end_utc = crew.%utc_time%(end_hb);
  roster.%duty_time_in_period_scheduled%(start_utc, end_utc, fundamental.%night_upg%, duty.union_scheduled, true) +
  (if compdays.%use_compday_duty_time%(start_hb) then
     %compdays_duty_time_in_period%(start_utc,end_utc)
   else
     0:00);


export %duty_time_in_period_scheduled%(Abstime start_hb, Abstime end_hb, Bool include_privately_traded) =
  let start_utc = crew.%utc_time%(start_hb),
      end_utc = crew.%utc_time%(end_hb);
  roster.%duty_time_in_period_scheduled%(start_utc, end_utc, fundamental.%night_upg%, duty.union_scheduled, include_privately_traded) +
  (if compdays.%use_compday_duty_time%(start_hb) then
     %compdays_duty_time_in_period%(start_utc,end_utc)
   else
     0:00);


export %nr_instr_sim_duty%(Abstime start_hb, Abstime stop_hb) =
  count(duty(roster)) 
    where (duty.%is_any_sim_instr% and
           not duty.%is_bought% and
           duty.%start_hb% < stop_hb and
           duty.%end_hb% > start_hb);

export %nr_sim_duty_as_tr%(Abstime start_hb, Abstime stop_hb) =
  count(duty(roster)) 
    where (duty.%is_tr% and
           not duty.%is_bought% and
           duty.%start_hb% < stop_hb and
           duty.%end_hb% > start_hb);

/* 3 month duty times */
/* planned duty time calculation only works for the last month in a three month period. */
export %planned_duty_time_in_3_months% = 
  accumulators.%duty_time_planned_skd%(
    %planned_3_month_period_start%, 
    nmin(wop.%end_hb%, round_up_month(wop.%start_hb%)));

export %actual_duty_time_in_3_months% = 
  if duty_time.%_planned_months_into_quarter% = 2 then
    accumulators.%actual_duty_time_cc%(
      %actual_3_month_period_start%, 
      %actual_3_month_period_end%)
  else
    0:00;

export %planned_3_month_period_start% = add_months(round_down_month(wop.%start_hb%), - %_planned_months_into_quarter%);
export %actual_3_month_period_start% = add_months(round_down_month(trip.%start_utc%), - %_actual_months_into_quarter%);
export %actual_3_month_period_end%   = add_months(%actual_3_month_period_start%, 3);
  
export %_planned_months_into_quarter% = (fundamental.%month_in_quarter%(format_time(wop.%start_hb%,"%m")) + 1) mod 3;
export %_actual_months_into_quarter% = (fundamental.%month_in_quarter%(format_time(trip.%start_utc%,"%m")) + 1) mod 3;


export %duty_time_agreement_sel%(Int agmt_sel, Abstime s, Abstime e) =
  sum(times(model_crew.%crew_chg_agm_max_index%),
    oma16.%duty_time_in_interval_indep%(
        crew.%utc_time%(model_crew.%crew_chg_agreement_from%(crew.%id%, %times_index_0%, s, e)), 
        crew.%utc_time%(model_crew.%crew_chg_agreement_to%(crew.%id%, %times_index_0%, s, e)))
  ) 
  where(model_crew.%crew_chg_agreement_selected%(agmt_sel, crew.%id%, %times_index_0%, s, e));

%_duty_time_bought_days%(Abstime cs, Abstime ce) =
  sum(times(bought_days.%BDI_MAX%), 
    oma16.%duty_time_in_interval_indep%(
      crew.%utc_time%(bought_days.%bdi_start%(%times_index_0%, cs, ce)),
      crew.%utc_time%(bought_days.%bdi_end%(%times_index_0%, cs, ce)))
  )
  where (not void(bought_days.%bdi_type_no_forced%(%times_index_0%, cs, ce)));


export %duty_time_bought_days%(Int agmt_sel, Abstime s, Abstime e) =
  sum(times(model_crew.%crew_chg_agm_max_index%),
    %_duty_time_bought_days%(
        model_crew.%crew_chg_agreement_from%(crew.%id%, %times_index_0%, s, e),
        model_crew.%crew_chg_agreement_to%(crew.%id%, %times_index_0%, s, e))
  )
  where(model_crew.%crew_chg_agreement_selected%(agmt_sel, crew.%id%, %times_index_0%, s, e));

/****************************************************************
 * Section 3: Definitions
 ***************************************************************/
redefine export %crew_or_duty_sks_fd% =
  crew.%has_agmt_group_sks_fd%;

redefine export %crew_or_duty_sks_cc% =
  crew.%has_agmt_group_sks_cc%;

redefine export %crew_or_duty_skd_fd% =
  crew.%has_agmt_group_skd_fd%;

redefine export %crew_or_duty_skd_cc% =
  crew.%has_agmt_group_skd_cc%;

redefine export %crew_or_duty_skn_fd% =
  crew.%has_agmt_group_skn_fd%;

redefine export %crew_or_duty_skn_cc% =
  crew.%has_agmt_group_nkf_cc% or crew.%has_agmt_group_snk_cc%;

redefine export %crew_or_duty_ski_fd% =
  crew.%has_agmt_group_ski_fd%;

redefine export %crew_or_duty_qa_cc% =
  crew.%has_agmt_group_qa_cc%;


/** Used in rules_indust_ccr.
    Redefined in duty_time_cct **/
export %max_fdp_extensions_month% =
  let month_start = base_utils.%month_nr%(duty.%start_month_start%);
      if crew.%has_agmt_group_skn_cc_at_date%(duty.%start_utc%)) then
          %_max_fdp_extensions_month_snk_nkf_p%
    else
          3;

export %_max_fdp_extensions_month_snk_nkf_p% =
  parameter 2
  remark "Number of extension per calendar month for SNK-CC-AG and NKF-CC-AG";



/* end of file */
