/* -*- crc -*- 
 *
 * 
 *
 * Purpose:
 *   This module contains duty time calculations and limits for both cabin crew 
 *   and flight crew used in CCR.
 *
 * Sections:
 *   1. Duty time limits - Flight crew
 *   2. Duty time limits - Cabin crew
 *   3. Duty time calculations
 *   4. Definitions
 *
 * Created by:
 *   Henrik Albertson, 31-Mar-2005
 *
 * Major changes:
 *
 */

module duty_time_ccr inherits duty_time
import roster;
import wop;
import crew;
import model_crew;
import freedays;
import compdays;
import bought_days;
import rest;
import accumulators;
import training;
import keywords;
import parameters;
import task;
import pp;
import calendar;

/****************************************************************
 * Section 1: Duty time limits - Flight crew
 ***************************************************************/
/*
** Duty period
*/
%max_in_duty_period_sh_temp_skd% = 12:00; /* Agreement CAU K06 Flexible work force p13.8 */
%max_in_duty_period_lh_temp_skd% = 14:00; /* Agreement CAU K06 Flexible work force p13.8 */

/* If no match is found in the table, the lookup will continue in the table
 * defined in parent module (variable %_max_in_duty_period_cc%) */
table duty_period_limits_override_cc =
  crew.%region%, crew.%is_temporary%, duty.%is_long_haul% ->
    redefine %_max_in_duty_period_override_cc%;
  "SKD", true,  false -> %max_in_duty_period_sh_temp_skd%;
  "SKD", true,  true  -> %max_in_duty_period_lh_temp_skd%;
  -, -, - -> void_reltime;
end

redefine export %is_any_sim_instr_scand_dp% = 
  duty.%is_any_sim_instr_scand% or
  default(prev(duty(trip),
          not rest.%duty_followed_by_minimum_scheduled_rest%(duty.union) and
          duty.%is_any_sim_instr_scand%),
          false);

redefine export %crew_has_training_restr_trip_start% = 
  default(crew.%has_restr_training_trip_start%, false);

/* 
** 4 weeks 
*/
redefine %max_in_4_weeks_fc% = 160:00; /* Pilot education */

/*
** Month
*/
redefine %max_in_month_fc% =
  160:00;

export %nr_available_days_in_period_fg%(Abstime start_hb, Abstime stop_hb) =
  (stop_hb - start_hb) / 24:00 -
  sum(trip(roster), trip.%days_in_period%(start_hb, stop_hb))
  where(trip.%is_off_duty% or trip.%is_compensation_day%);

/*
**  Maximum FC duty time in calendar month = number of production days x 9:30
**
** There can be a problem however in CCR/Matador that e.g. if the first duty
** assigned exceeds 9:30, it will be considered illegal. To solve this, the
** number of days that are available for production is used instead of just the
** number of production days assigned:
**
** VG: number of days qualifying as F-days - minimum F-day requirement, or
**     number of assigned production days, whichever is the greater.
**
** FG: F-days, and any other time-off days, are assigned before any production, 
**     so number of FG-days in month minus number of F/time-off days, or
**     number of assigned production days, whichever is the greater.
*/

export %nr_p_days_vg_in_1_month%(Abstime start, Abstime stop) =
  if crew.%has_some_variable_group_in_pp% then
    nmax(%nr_potential_p_days_vg_in_1_month%,
         %nr_assigned_p_days_vg_in_1_month%(start,stop))
  else
    0;

%nr_potential_p_days_vg_in_1_month% =
  nmax(first(wop(roster),freedays.%nr_qualifying_in_1_month% -
                         freedays.%min_required_in_1_month% -
                         %nr_assigned_cmp_days_in_1_month%)
         where (wop.%start_month_start% = pp.%start_month%),
       0);

export %nr_assigned_p_days_vg_in_1_month%(Abstime start, Abstime stop) =
  duty_time.%nr_p_days_vg%(start, stop, false, false, true, false);

export %nr_p_days_fg_in_1_month%   =
  let month_start = pp.%start_month%,
      month_end = pp.%end_month%;
  if crew.%has_some_fixed_group_in_pp% then
    nmax(nmax((crew.%fixed_group_end%(month_start,month_end) -
               crew.%fixed_group_start%(month_start,month_end)) / 24:00 -
              first(wop(roster),freedays.%nr_qualifying_in_1_month_fg%)
                where (wop.%start_month_start% = pp.%start_month%) -
              (if %flight_crew% then
                 %nr_assigned_cmp_days_in_1_month%
               else
                 0),0),
         %nr_assigned_p_days_fg_in_1_month%)
  else
    0;

%nr_assigned_p_days_fg_in_1_month% =
  let month_start = pp.%start_month%,
      month_end = pp.%end_month%;

  duty_time.%nr_p_days_fg%(month_start, month_end, false, false, true, false);

%nr_assigned_cmp_days_in_1_month% =
  let month_start = pp.%start_month%,
      month_end = pp.%end_month%;      
  sum(wop(roster),duty_time.%nr_cmp_ill_days_in_wop_in_period%(month_start, month_end,
                                                               true, false));

/* It is assumed that crew does not change VG->FG or V.V more than
** 2 times in given interval
*/
%first_group_changed%(Abstime date) =
  if crew.%first_group_change_date%(date) = 01jan1986 then 31dec2035
  else crew.%first_group_change_date%(date);

export %nr_p_days_vg%(Abstime start, Abstime stop, Bool includeLA8days,
                      Bool includeLAdays, Bool includeBL, Bool includeCMP) =
  let group1 = default(crew.%group_at_date%(start),"X"),
      validto1 = %first_group_changed%(start),
      group2 = default(crew.%group_at_date%(validto1),"X"),
      validto2 = %first_group_changed%(validto1), 
      group3 = default(crew.%group_at_date%(validto2),"X");
  if (crew.%has_agmt_group_skn_cc_at_date%(start) or crew.%has_agmt_group_skd_cc_at_date%(start)) then
    /* V-> */
    /* V -> FG */
    /* V -> FG -> V */
    if group1 = "V" then
      if validto1 >= stop then
        %nr_p_days_in_period_cc%(start, stop, includeLA8days, includeLAdays,
                                 includeBL, includeCMP, true)
      else
        if validto2 >= stop then
          %nr_p_days_in_period_cc%(start, validto1, includeLA8days, includeLAdays,
                                   includeBL, includeCMP, true)
        else if group3 = "V" then
          %nr_p_days_in_period_cc%(start, validto1, includeLA8days, includeLAdays,
                                   includeBL, includeCMP, true) +
          %nr_p_days_in_period_cc%(validto2, stop, includeLA8days, includeLAdays,
                                   includeBL, includeCMP, true)
        else
          %nr_p_days_in_period_cc%(start, validto1, includeLA8days, includeLAdays,
                                   includeBL, includeCMP, true)
    /* FG -> */
    /* FG -> V */
    /* FG -> V -> FG */
    else
      if group2 = "V" and validto2 >= stop and validto1 < stop then
        %nr_p_days_in_period_cc%(validto1, stop, includeLA8days, includeLAdays,
                                 includeBL, includeCMP, true)
      else if group2 = "V" and validto2 <= stop then
        %nr_p_days_in_period_cc%(nmax(start, validto1), validto2, includeLA8days,
                                 includeLAdays, includeBL, includeCMP, true)
      else 0
  else
    /* V-> */
    /* V -> FG */
    /* V -> FG -> V */
    if group1 = "V" then
      if validto1 >= stop then
        %nr_p_days_in_period%(start, stop, includeLA8days, includeLAdays,
                              includeBL, includeCMP, true)
      else
        if validto2 >= stop then
          %nr_p_days_in_period%(start, validto1, includeLA8days, includeLAdays,
                                includeBL, includeCMP, true)
        else if group3 = "V" then
          %nr_p_days_in_period%(start, validto1, includeLA8days, includeLAdays,
                                includeBL, includeCMP, true) +
          %nr_p_days_in_period%(validto2, stop, includeLA8days, includeLAdays,
                                includeBL, includeCMP, true)
        else
          %nr_p_days_in_period%(start, validto1, includeLA8days, includeLAdays,
                                includeBL, includeCMP, true)
    /* FG -> */
    /* FG -> V */
    /* FG -> V -> FG */
    else
      if group2 = "V" and validto2 >= stop and validto1 < stop then
        %nr_p_days_in_period%(validto1, stop, includeLA8days, includeLAdays,
                              includeBL, includeCMP, true)
      else if group2 = "V" and validto2 <= stop then
        %nr_p_days_in_period%(nmax(start, validto1), validto2, includeLA8days,
                              includeLAdays, includeBL, includeCMP, true)
      else 0;
      
/* It is assumed that crew does not change FG->VG or V.V more than
** 2 times in given interval
*/
export %nr_p_days_fg%(Abstime start, Abstime stop, Bool includeLA8days,
                      Bool includeLAdays, Bool includeBL, Bool includeCMP) =
  let group1 = default(crew.%group_at_date%(start),"X"),
      validto1 = %first_group_changed%(start),
      group2 = default(crew.%group_at_date%(validto1),"X"),
      validto2 = %first_group_changed%(validto1), 
      group3 = default(crew.%group_at_date%(validto2),"X");
  /* FG-> */
  /* FG -> VG */
  /* FG -> VG -> FG */
  if group1 = "F" then
    if validto1 >= stop then
      %nr_p_days_in_period%(start, stop, includeLA8days, includeLAdays,
                            includeBL, includeCMP, true)
    else 
      if validto2 >= stop then
        %nr_p_days_in_period%(start, validto1, includeLA8days, includeLAdays,
                              includeBL, includeCMP, true)
      else if group3 = "F" then
        %nr_p_days_in_period%(start, validto1, includeLA8days, includeLAdays,
                              includeBL, includeCMP, true) +
        %nr_p_days_in_period%(validto2, stop, includeLA8days, includeLAdays,
                              includeBL, includeCMP, true)
      else
        %nr_p_days_in_period%(start, validto1, includeLA8days, includeLAdays,
                              includeBL, includeCMP, true)
  /* VG -> */
  /* VG -> FG */
  /* VG -> FG -> VG */
  else
    if group2 = "F" and validto2 >= stop and validto1 < stop then
      %nr_p_days_in_period%(validto1, stop, includeLA8days, includeLAdays,
                            includeBL, includeCMP, true)
    else if group2 = "F" and validto2 <= stop then
      %nr_p_days_in_period%(nmax(start, validto1), validto2, includeLA8days,
                            includeLAdays, includeBL, includeCMP, true)
    else 0;
      

export %nr_p_days_in_period%(Abstime start, Abstime stop, Bool includeLA8days,
                             Bool includeLAdays, Bool includeBL, Bool includeCMP,
                              Bool includePrivatelyTraded) =
    sum(wop(roster), wop.%days_in_period%(start, stop) -
                     %nr_cmp_ill_days_in_wop_in_period%(start, stop, includeBL, includeCMP))
    where ( wop.%is_on_duty% and
            wop.%end_hb% > start and
            wop.%start_hb% < stop);



export %nr_p_days_in_period_cc%(Abstime start, Abstime stop, Bool includeLA8days,
                             Bool includeLAdays, Bool includeBL, Bool includeCMP,
                              Bool includePrivatelyTraded) =
    sum(wop(roster), if (not wop.%is_standby_line%) then
                         wop.%days_in_period%(start, stop) - %nr_cmp_ill_days_in_wop_in_period%(start, stop, includeBL, includeCMP)
                     else
                         (100 * wop.%days_in_period%(start, stop) - %nr_cmp_ill_days_in_wop_in_period%(start, stop, includeBL, includeCMP) + 159) / 160
       )
    where ( wop.%is_on_duty% and
            wop.%end_hb% > start and
            wop.%start_hb% < stop);



export %nr_cmp_ill_days_in_wop_in_period%(Abstime start, Abstime stop,
                                          Bool includeBL, Bool includeCMP) =
  sum(duty(wop), duty.%days%)
    where (((duty.%is_blank_day% and
             not includeBL) or
            (duty.%is_compensation_day% and 
             not includeCMP) or
            duty.%is_illness%) and
           duty.%end_hb% > start and
           duty.%start_hb% < stop);

export %nr_sb_ln_days_in_period%(Abstime start, Abstime stop) =
    sum(wop(roster), %nr_sb_ln_days_in_wop_in_period%(start, stop))
    where (wop.%is_on_duty% and wop.%end_utc% >= start and
           wop.%start_utc% < stop);

export %nr_sb_ln_days_planned_in_period%(Abstime start, Abstime stop) =
    sum(wop(roster), %nr_sb_ln_days_in_wop_in_period%(start, stop))
    where (wop.%end_utc% >= start and wop.%start_utc% < stop);

export %nr_sb_ln_days_in_wop_in_period%(Abstime start, Abstime stop) =
  sum(duty(wop), duty.%days%)
    where (duty.%is_standby_line% and
           duty.%end_utc% >= start and
           duty.%start_utc% < stop);

export %nr_far_single_slipping_in_period%(Abstime start, Abstime stop) =
    sum(trip(roster), 1)
    where (trip.%is_far_single_slipping_longhaul% and
           trip.%start_utc% >= start and
           trip.%start_utc% < stop);

/****************************************************************
 * Section 2: Duty time limits - Cabin crew
 ***************************************************************/
/* 
** SKS Cabin Crew:
** Calendar week. 
*/
export %max_in_calendar_week_sks% = 42:00;

/*
** SKS Cabin Crew:
** Duty pass for short haul with no charter or legs > 4:00
*/
export %max_in_duty_pass_sh_sks% = %max_in_duty_period_sh_sks%;

/*
** SKS Cabin Crew:
** Duty pass for long haul or charter or legs > 4:00
*/
export %max_in_duty_pass_lh_sks% = %max_in_duty_period_lh_sks%;
/*
** 4 weeks
*/
redefine %max_in_4_weeks_cc% = 140:00; /* JAP */

/*
** Month
*/
table duty_time_month_limits_cc =
  crew.%region% ->
    redefine %max_in_month_cc%;

    "SKJ" -> %max_in_month_cc_skj%;
    -     -> %max_in_month_cc_4exng%;
end

export %max_in_month_cc_4exng% = parameter 166:00
remark "Max duty in calendar month CC 4ExNG";

export %max_in_3_months_cc_4exng% = %max_in_month_cc_4exng%*3;

%max_in_month_cc_skj% = 150:00;

/* This variable is used for rostering. It is not reliable in tracking for long
   activities, like LA. In that case, the duty level limit should be used. */
export %max_in_month_wop% = %max_in_month%;

/* Reduced proportionally with part time factor. SKN Temporary crew are 
 * considered as 100% crew with respective to the duty time per month
 * rule. */
%max_in_month_cc_skn% =
  (if crew.%part_time_change_in_month% then
     crew.%avg_pt_factor_times_days_in_month%
   else
     wop.%month_days% * %part_time_factor_month_start_skn%)
  * %max_duty_in_month_cc_skn% / (wop.%month_days% * 100);

%part_time_factor_month_start_skn% = 
  if crew.%is_temporary_at_date%(wop.%start_month_start%) then
    100
  else
    crew.%part_time_factor_month_start%;

%max_duty_in_month_cc_skn% = if parameters.%k11_skn_cc_sp10_7_valid%(%pp_start%) then 154:00 else 153:50;

/* Reduced proportionally with part time factor and qualifying days
 * NB! Applies also for SKN CC from 01jul11
 */
%max_in_month_cc_sks% =
  (if crew.%part_time_change_in_month% then
     %qualifying_days_in_period%(duty.%start_month_start%,
                                 crew.%part_time_change_date%) *
     %max_duty_time_pt_factor_cc%(duty.%start_month_start%) +
     %qualifying_days_in_period%(crew.%part_time_change_date%,
                                 duty.%start_month_end%) *
     %max_duty_time_pt_factor_cc%(crew.%part_time_change_date%)
   else
     %qualifying_days_in_month% * %max_duty_time_pt_factor_cc%(duty.%start_month_start%))  
  / 
  (duty.%month_days%);

table max_duty_in_month_cc(Abstime date) =
  crew.%region_at_date%(date),
  crew.%part_time_factor_at_date%(date),
  crew.%is_temporary_at_date%(date) -> 
    %max_duty_time_pt_factor_cc%;
    
  "SKS",  100, false -> 158:00;
  "SKS",   80, false -> 126:00;
  "SKS",   75, false -> 118:30;
  "SKS",   50, false ->  80:00;
  
  "SKN",   - , false -> %max_duty_in_month_cc_skn% * crew.%part_time_factor_at_date%(date) / 100; /* max duty time scaled with part_time_factor_at_date */
 
  "SKN",   - , true  -> %max_duty_in_month_cc_skn%;
  "SKS",   - , true  -> 158:00;

  "SKJ",   - ,   -   -> 150:00;
  
    -  ,   - ,   -   -> 999:00; /* Obvious error code */
end
 

%max_duty_in_month_cc_sks% = 158:00;

table max_duty_in_month_part_time(Abstime date) =
  crew.%is_region_scand%,
  crew.%part_time_factor_at_date%(date) ->
    export %max_duty_in_calendar_month_pt_cc%,
    export %max_duty_in_3_months_pt_cc%;
  true,   90 -> 149:24, 448:12;
  true,   80 -> 132:48, 398:00;
  true,   75 -> 124:30, 374:00;
  true,   60 ->  99:36, 299:00;
  true,   51 ->  84:39, 254:00;
  true,   50 ->  83:00, 249:00;
    
    -  ,   -  -> 999:00, 999:00; /* Obvious error code */
end

export %qualifying_days_in_month% =
  %qualifying_days_in_period%(duty.%start_month_start%, duty.%start_month_end%);

%qualifying_days_in_period%(Abstime start, Abstime stop) =
  (stop - start) / 24:00 -
  %nr_reducing_days%(start, stop);

%nr_reducing_days%(Abstime start, Abstime stop) =
  sum(wop(roster), (if wop.%start_hb% >= start and wop.%end_hb% <= stop then
                      if %wop_has_reducing_days_IL_or_F31% then
                        %wop_reducing_days_IL_or_F31%(start, stop)
                      else
                        wop.%days%
                    else
                        if %wop_has_reducing_days_IL_or_F31% then
                          %wop_reducing_days_IL_or_F31%(start, stop)
                        else
                          overlap(wop.%start_hb%, wop.%end_hb%, start, stop) / 24:00))
  where (%wop_is_reducing% and
         wop.%end_hb% >= start and 
         wop.%start_hb% <= stop);

%wop_is_reducing% =
  wop.%is_vacation% or
  wop.%is_loa% or
  %wop_has_reducing_days_IL_or_F31%;

%wop_has_reducing_days_IL_or_F31% = 
  any(trip(wop),%is_reducing_days_IL_or_F31%);
  
%wop_reducing_days_IL_or_F31%(Abstime start, Abstime stop) =
  sum(trip(wop), trip.%days_in_period%(start, stop))
  where (%is_reducing_days_IL_or_F31%);

%is_reducing_days_IL_or_F31% =
  (trip.%is_illness% and not crew.%is_skn%) or
  any(leg(trip), task.%code% = "F31");

/****************************************************************
 * Section 3: Duty time calculations
 ***************************************************************/
/* 24h period */
export %duty_time_24h_fwd% =
  oma16.%duty_time_in_interval_indust%(duty.%start_UTC%, duty.%start_UTC% + 1*24:00) -
  %passive_plus_reduction%(duty.%start_UTC%, duty.%start_UTC% + 1*24:00);
export %duty_time_24h_bwd% =
  oma16.%duty_time_in_interval_indust%(duty.%end_UTC% - 1*24:00, duty.%end_UTC%) -
  %passive_plus_reduction%(duty.%end_UTC% - 1*24:00, duty.%end_UTC%);
export %duty_time_24h_hrs% = nmax(%duty_time_24h_bwd%, %duty_time_24h_fwd%);
/*
** 2x24 hrs
*/
export %2x24_hrs_bwd% =
  roster.%duty_time_in_period%(trip.%end_UTC% - 2*24:00, trip.%end_UTC%, fundamental.%night_upg%, duty.union);

/* Duty is first in wop
**   Redefined in CCT module where rescheduling info is used 
*/
export %duty_is_first_in_wop% =
  is_first(duty(wop));

%skd_duty_time_in_period%(Abstime start_utc, Abstime stop_utc, Bool night_upg, DutyCalculation dutycalc) = 
  roster.%duty_time_in_period%(start_utc, stop_utc, night_upg, dutycalc)
  + %duty_time_bought_days_skd_in_period%(start_utc, stop_utc, night_upg, dutycalc);
      
%duty_time_bought_days_skd_in_period%(Abstime start_utc, Abstime stop_utc, Bool night_upg, DutyCalculation dutycalc) =
  sum(duty(chain), duty.%duty_time_bought_days_skd_in_period%(start_utc, stop_utc, night_upg, dutycalc));
      
%compdays_duty_time_in_period_fwd%(Abstime start, Abstime stop) =
  compdays.%duty_time_in_period_fwd%(start, stop);
  
export %compdays_duty_time_in_period%(Abstime start_utc, Abstime stop_utc) =
  first(duty(chain), %compdays_duty_time_in_period_fwd%(start_utc, stop_utc))
  where(duty.%end_utc% > start_utc);
  
redefine export %passive_plus_reduction%(Abstime start_utc, Abstime stop_utc) =
  sum(duty(roster),duty.%passive_plus_reduction%(start_utc,stop_utc))
    where (overlap(duty.%start_utc%,duty.%end_utc%,
                   start_utc,stop_utc) > 0:00 and
           crew.%is_passive_plus%(trip.%start_day%));

/* Redefined for CCT */
export %skn_bought_va_duty_time%(Abstime start, Abstime stop) = 0:00;
%skn_illness_duty_time%(Abstime start, Abstime stop) = 0:00;

/*
** 4 weeks
*/
export %4_weeks% = 
  roster.%duty_time_in_period%(trip.%start_week_end% - 4*7*24:00,
                               trip.%start_week_end%,
                               fundamental.%night_upg%,
                               duty.union);

export %4_weeks_no_night_upg% = 
  accumulators.%duty_time_in_period_no_night_upg%(trip.%start_week_end% - 4*7*24:00,
                               trip.%start_week_end%);

/*
** Calendar month
*/
export %calendar_month% = 
  roster.%duty_time_in_period%(crew.%utc_time%(wop.%start_month_start%),
                               crew.%utc_time%(wop.%start_month_end%), 
                               fundamental.%night_upg%, 
                               duty.union) -
  %passive_plus_reduction%(crew.%utc_time%(wop.%start_month_start%),
                           crew.%utc_time%(wop.%start_month_end%));

export %calendar_month_no_night_upg% = 
  let duty_calc = if duty.%is_skj% then
                    duty.net_skj
                  else
                    duty.union;
                  
  roster.%duty_time_in_period%(crew.%utc_time%(wop.%start_month_start%),
                               crew.%utc_time%(wop.%start_month_end%),
                               false, 
                               duty_calc);

export %max_duty_time_factor% =
   if crew.%in_variable_group_wop_start%
   then 8:48
   else 9:30;

export %duty_time_2_months_start_check% = 
  if (%crew_changes_from_vg_to_fg% or
      %crew_changes_from_fg_to_vg%) and
     not fundamental.%even_month_by_month_start%(wop.%start_hb%) then
    wop.%start_month_start%
  else
    add_months(wop.%start_month_start%, -1);

/* Crew changes from VG->FG before end of month */
export %crew_changes_from_vg_to_fg% =
  crew.%in_variable_group_wop_start% and
  default(next(wop(roster), crew.%in_fixed_group_wop_start%), false);
  
/* Crew changes from FG->VG before end of month */
export %crew_changes_from_fg_to_vg% =
  crew.%in_fixed_group_wop_start% and
  default(next(wop(roster), crew.%in_variable_group_wop_start%), false);

/* Redefined for CCT% */
export %duty_time_cc_in_period%(Abstime start_hb, Abstime stop_hb) =
  accumulators.%planned_duty_time_2_months_skn_cc%(start_hb, stop_hb);

export %duty_time_cc_in_period_actual_scheduled%(Abstime start_hb, Abstime stop_hb) =
        accumulators.%actual_duty_time_cc_scheduled%(start_hb, stop_hb);

export %duty_time_skn_cc_in_period_scheduled%(Abstime start_hb, Abstime stop_hb) =
        accumulators.%duty_time_skn_cc_scheduled%(start_hb, stop_hb);

/* Redefined for CCT% */
export %max_duty_time_2_months_cc% =
    let duty_start = duty.%start_HB%;
    accumulators.%nr_planned_p_days_2_months_cc%(
        calendar.%month_pair_start%(duty_start),
        calendar.%month_pair_end%(duty_start))
    * %avg_daily_duty_time_2_months_cc%;
    
/* SKCMS-520 -> SKCMS-1341 -> SKCMS-1895*/
export %max_duty_time_2_months_skn_skd_cc_planned% =
  %nr_p_days_2_months_skn_cc_planned% * %duty_time_per_prod_day_2_months_skn_skd_cc%;

export %nr_p_days_2_months_skn_cc_planned% =
    let duty_start = duty.%start_HB%;
    if crew.%is_SKD% then
      accumulators.%nr_planned_p_days_2_months_cc%(
        calendar.%month_pair_start%(duty_start),
        calendar.%month_pair_end%(duty_start))
    else
      accumulators.%nr_planned_p_days_skn_cc%(
        calendar.%month_pair_start%(duty_start),
        calendar.%month_pair_end%(duty_start));

export %duty_time_per_prod_day_2_months_skn_skd_cc% =
    parameter 8:48
    remark "Time factor for 2 months planned P days duty time calc";

/* SKCMS-1057 -> SKCMS-1341 */
export %nr_sb_ln_days_2_months_snk_cc_planned% =
    let duty_start = duty.%start_HB%;
    accumulators.%nr_planned_sb_ln_days_cc%(
        calendar.%month_pair_start%(duty_start),
        calendar.%month_pair_end%(duty_start));

export %nr_p_days_in_1_month_cc% =
  let month_start = pp.%start_month%,
      month_end = pp.%end_month%;
  %nr_p_days_fg_in_1_month% + %nr_p_days_vg_in_1_month%(month_start,month_end);

%avg_daily_duty_time_2_months_cc% =
  parameter 8:48;

export %duty_time_2_months_start_check_cc% = 
  add_months(wop.%start_month_start%, -1);

export %duty_time_in_2_months_cc%(Abstime start_hb, Abstime end_hb) =
  let start_utc = crew.%utc_time%(start_hb),
      end_utc = crew.%utc_time%(end_hb);
  roster.%duty_time_in_period%(start_utc,end_utc,fundamental.%night_upg%, duty.union) +
  (if compdays.%use_compday_duty_time%(start_hb) then
     %compdays_duty_time_in_period%(start_utc,end_utc)
   else
     0:00);

/* 3 month duty times */
/* planned duty time calculation only works for the last month in a three month period. */
export %planned_duty_time_in_3_months% = 
  accumulators.%duty_time_planned_skd%(
    %planned_3_month_period_start%, 
    nmin(wop.%end_hb%, round_up_month(wop.%start_hb%)));

export %actual_duty_time_in_3_months% = 
  if duty_time.%_planned_months_into_quarter% = 2 then
    accumulators.%actual_duty_time_cc%(
      %actual_3_month_period_start%, 
      %actual_3_month_period_end%)
  else
    0:00;
    
export %planned_3_month_period_start% = add_months(round_down_month(wop.%start_hb%), - %_planned_months_into_quarter%);
export %actual_3_month_period_start% = add_months(round_down_month(trip.%start_utc%), - %_actual_months_into_quarter%);
export %actual_3_month_period_end%   = add_months(%actual_3_month_period_start%, 3);
  
export %_planned_months_into_quarter% = (fundamental.%month_in_quarter%(format_time(wop.%start_hb%,"%m")) + 1) mod 3;
export %_actual_months_into_quarter% = (fundamental.%month_in_quarter%(format_time(trip.%start_utc%,"%m")) + 1) mod 3;


export %duty_time_cc_scheduled%(Abstime start_hb, Abstime end_hb) =
  let start_utc = crew.%utc_time%(start_hb),
      end_utc = crew.%utc_time%(end_hb);
  roster.%duty_time_in_period_scheduled%(start_utc, end_utc, fundamental.%night_upg%, duty.union_scheduled, true) +
  (if compdays.%use_compday_duty_time%(start_hb) then
     %compdays_duty_time_in_period%(start_utc,end_utc)
   else
     0:00);


export %duty_time_in_period_scheduled%(Abstime start_hb, Abstime end_hb, Bool include_privately_traded) =
  let start_utc = crew.%utc_time%(start_hb),
      end_utc = crew.%utc_time%(end_hb);
  roster.%duty_time_in_period_scheduled%(start_utc, end_utc, fundamental.%night_upg%, duty.union_scheduled, include_privately_traded) +
  (if compdays.%use_compday_duty_time%(start_hb) then
     %compdays_duty_time_in_period%(start_utc,end_utc)
   else
     0:00);


export %nr_instr_sim_duty%(Abstime start_hb, Abstime stop_hb) =
  count(duty(roster)) 
    where (duty.%is_any_sim_instr% and
           not duty.%is_bought% and
           duty.%start_hb% < stop_hb and
           duty.%end_hb% > start_hb);

export %nr_sim_duty_as_tr%(Abstime start_hb, Abstime stop_hb) =
  count(duty(roster)) 
    where (duty.%is_tr% and
           not duty.%is_bought% and
           duty.%start_hb% < stop_hb and
           duty.%end_hb% > start_hb);

export %duty_time_agreement_sel%(Int agmt_sel, Abstime s, Abstime e) =
  sum(times(model_crew.%crew_chg_agm_max_index%),
    oma16.%duty_time_in_interval_indep%(
        crew.%utc_time%(model_crew.%crew_chg_agreement_from%(crew.%id%, %times_index_0%, s, e)), 
        crew.%utc_time%(model_crew.%crew_chg_agreement_to%(crew.%id%, %times_index_0%, s, e)))
  ) 
  where(model_crew.%crew_chg_agreement_selected%(agmt_sel, crew.%id%, %times_index_0%, s, e));

%_duty_time_bought_days%(Abstime cs, Abstime ce) =
  sum(times(bought_days.%BDI_MAX%), 
    oma16.%duty_time_in_interval_indep%(
      crew.%utc_time%(bought_days.%bdi_start%(%times_index_0%, cs, ce)),
      crew.%utc_time%(bought_days.%bdi_end%(%times_index_0%, cs, ce)))
  )
  where (not void(bought_days.%bdi_type_no_forced%(%times_index_0%, cs, ce)));


export %duty_time_bought_days%(Int agmt_sel, Abstime s, Abstime e) =
  sum(times(model_crew.%crew_chg_agm_max_index%),
    %_duty_time_bought_days%(
        model_crew.%crew_chg_agreement_from%(crew.%id%, %times_index_0%, s, e),
        model_crew.%crew_chg_agreement_to%(crew.%id%, %times_index_0%, s, e))
  )
  where(model_crew.%crew_chg_agreement_selected%(agmt_sel, crew.%id%, %times_index_0%, s, e));

/****************************************************************
 * Section 3: Definitions
 ***************************************************************/
redefine export %crew_or_duty_sks_fd% =
  crew.%has_agmt_group_sks_fd%;

redefine export %crew_or_duty_sks_cc% =
  crew.%has_agmt_group_sks_cc%;

redefine export %crew_or_duty_skd_fd% =
  crew.%has_agmt_group_skd_fd%;

redefine export %crew_or_duty_skd_cc% =
  crew.%has_agmt_group_skd_cc%;

redefine export %crew_or_duty_skn_fd% =
  crew.%has_agmt_group_skn_fd%;

redefine export %crew_or_duty_skn_cc% =
  crew.%has_agmt_group_skn_cc%;

redefine export %crew_or_duty_szs_fd% =
  crew.%has_agmt_group_szs_fd%;

redefine export %crew_or_duty_szsd_fd% =
  crew.%has_agmt_group_szsd_fd%;

redefine export %crew_or_duty_szss_fd% =
  crew.%has_agmt_group_szss_fd%;

redefine export %crew_or_duty_szs_cc% =
  crew.%has_agmt_group_szs_cc%;

redefine export %crew_or_duty_ski_fd% =
  crew.%has_agmt_group_ski_fd%;

redefine export %crew_or_duty_svs_fd% =
  crew.%has_agmt_group_svs_fd%;

redefine export %crew_or_duty_svs_cc% =
  crew.%has_agmt_group_svs_cc%;

/** Used in rules_indust_ccr.
    Redefined in duty_time_cct **/
export %max_fdp_extensions_month% =
      if crew.%has_agmt_group_skn_cc_at_date%(duty.%start_utc%) then
          %_max_fdp_extensions_month_snk_nkf_p%
    else
          3;

export %_max_fdp_extensions_month_snk_nkf_p% =
  parameter 2
  remark "Number of extension per calendar month for SKN CC";

/* end of file */
