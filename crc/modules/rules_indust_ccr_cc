/* -*- crc -*-
 *
 *
 *
 * Purpose:
 *   This module contains cabin crew specific industrial rules used in Carmen Crew Rostering
 *   and as studio only in Carmen Crew Tracking.
 *
 * Sections:
 *   1. Duty rules (7x24, 4weeks, month)
 *   2. Block time rules
 *   3. Rest rules
 *   4. Freeday rules
 *   5. Blank day rules
 *   6. SKBU Resource Pool
 *
 * Created by:
 *   Henrik Albertson, 24-Jan-2005
 *
 * Major changes:
 *
 */

module rules_indust_ccr_cc inherits rules_indust_ccr

import freedays;
import task;
import compdays;
import pp;
import bought_days;
import accumulators;
import calendar;
import crew_contract;
import base_product;
import oma16;



/****************************************************************
 * Section 1: Duty rules
 ***************************************************************/

/*
** Rule:
**    Maximum duty time in calendar month
**
** Description:
**    The rule checks that the duty time in a calendar month is less than the
**    maximum allowed.
**    The period is always a calendar month so it is enough to check if the
**    rule is valid for any period in the month.
**
**    NB! Assuming only 1 part time change in month (pre-4ExNG)
**
** Agreement:
**    NKF/SBK 1.1
**    SCCA C
**
**    4ExNG CC 3.1.1
*/
export rule ind_max_duty_time_in_calendar_month_cc_skd_sks =
  valid roster.%check_rules%
   and  wop.%start_hb% >= %pp_start%
   and  wop.%is_last_on_duty_in_month%
   and  crew.%k4exng_cc_sp5_1_valid%(wop.%start_month_start%) 
   and  (crew.%has_agmt_group_sks_cc%
         and (%use_max_duty_time_for_100_percent_SKS_CC_p% or
         crew.%part_time_factor_at_date%(wop.%start_utc%) = 100))
   or (crew.%has_agmt_group_skd_cc% and crew.%is_crew_monthly_parttime_at_date%(wop.%start_utc%));

  %duty_time_calendar_month% <= duty_time.%max_in_month_wop% +
				rule_exceptions.%overshoot_rel%(wop.%start_UTC%);

  startdate  = wop.%start_UTC%;
  severity = first(leg(wop), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %ind_max_duty_time_in_calendar_month_CC_SKD_SKS_failobject%;
  failtext(Reltime value, Reltime limit) =
    %ind_max_duty_time_in_calendar_month_CC_SKD_SKS_failtext%(value, limit);
  remark "(CCR) Coll: Max duty time in calendar month",
  planner "The rule checks that the maximum duty in calendar month"
          " is not exceeded. Night upgrade is not included. The rule is valid for"
          " SKD CC on monthly parttime contract and"
          " CC SKS. For CC the limit is reduced by part time factor and"
          " available days. " ;
end

%use_max_duty_time_for_100_percent_SKS_CC_p% =
  parameter true
  remark "Use max duty time rule for 100% SKS CC";

%ind_max_duty_time_in_calendar_month_CC_SKD_SKS_failtext%(Reltime value, Reltime limit) =
  rules.%failtext_rel%(format_time(wop.%start_month_start%, "Coll: Duty time %b"),
           value, limit);

%ind_max_duty_time_in_calendar_month_CC_SKD_SKS_failobject% =
  let overshoot = default(rule_exceptions.%overshoot_rel%(wop.%start_UTC%),0:00),
      month = wop.%start_month_start%,
      max_in_month = duty_time.%max_in_month_wop%;
  default(
          last(leg(wop),
               prev(leg(chain),
                    next(leg(chain),leg.%failobject_departure%))
               where(%duty_time_calendar_month_until_now% < max_in_month +
                     overshoot))
          where(round_down_month(leg.%start_hb%) = month),
          wop.%failobject_start%);
/*
**    Maximum duty time for CC VG part time
**
**    Part time factor at beginning of month determines Max duty time limit reduction
**
**    OMA and 4ExNG interpretations
**
*/
export rule ind_max_duty_time_in_cal_month_pt_cc_pt_SKS_monthly_pt_SKD =
  valid %ind_max_duty_time_in_calendar_month_pt_cc_parttime_SKS_monthly_parttime_SKD_valid%
    and wop.%start_hb% >= %pp_start%
    and wop.%is_last_on_duty_in_month%;

  %planned_duty_time_calendar_month% <= duty_time.%max_duty_in_calendar_month_pt_cc%(%_specific_date%) +
				rule_exceptions.%overshoot_rel%(wop.%start_UTC%);

  startdate  = wop.%start_UTC%;
  severity = first(leg(wop), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %ind_max_duty_time_in_calendar_month_pt_cc_failobject%;
  failtext(Reltime value, Reltime limit) =
    %ind_max_duty_time_in_calendar_months_pt_cc_failtext%(value, limit);
  remark "(CCR) CPG: Max duty time in calendar month for parttime crew",
  planner "The rule checks that the maximum duty in calendar month"
          " is not exceeded. The rule is valid for SKD on monthly parttime, VG parttime SKS/SKD,"
          " and for SKS/SKD FG part time when descshort match strings 'NNS F','Legal F', or 'Study F'"
          " The limit is reduced by part time factor";
end

redefine export %ind_max_duty_time_in_calendar_month_pt_cc_parttime_SKS_monthly_parttime_SKD_valid% =
    roster.%check_rules%
    and ((crew.%has_agmt_group_sks_cc% or %valid_for_skd_cc%)
        and crew.%part_time_factor_at_date%(%_specific_date%) < 100
        and (crew.%in_variable_group_wop_start% or crew.%is_legal_pt_wop_start%)) 
    or (crew.%has_agmt_group_skd_cc% and crew.%is_crew_monthly_parttime_at_date%(wop.%start_utc%));

%valid_for_skd_cc% =
    crew.%has_agmt_group_skd_cc% and system_db_parameters.%skd_cc_provavtal_2023off%(wop.%end_utc%);

%_specific_date% =
  let pp_month_start = round_down_month(wop.%start_utc%),
      pp_month_end = round_up_month(wop.%start_utc%);
  if (crew.%in_fixed_group%(pp_month_start) and  crew.%in_variable_group_wop_start%) then
    pp_month_end
  else if (crew.%part_time_factor_at_date%(pp_month_start) <> crew.%part_time_factor_at_date%(pp_month_end)) then
    pp_month_start
  else
    wop.%start_utc%;

export %planned_duty_time_calendar_month% =
  accumulators.%duty_time_planned_skd%(
    round_down_month(wop.%start_hb%),
    round_up_month(wop.%start_hb% + 0:01)); /* was bug for wops starting at month start */

%ind_max_duty_time_in_calendar_months_pt_cc_failtext%(Reltime value, Reltime limit) =
  rules.%failtext_rel%(format_time(wop.%start_month_start%, "Coll: Duty time %b"),
           value, limit);

%ind_max_duty_time_in_calendar_month_pt_cc_failobject% =
  let overshoot = default(rule_exceptions.%overshoot_rel%(wop.%start_UTC%),0:00),
      month = wop.%start_month_start%,
      max_in_month = duty_time.%max_duty_in_calendar_month_pt_cc%(round_down_month(wop.%start_utc%));
  default(
          last(leg(wop),
               prev(leg(chain),
                    next(leg(chain),leg.%failobject_departure%))
               where(%duty_time_calendar_month_until_now% < max_in_month +
                     overshoot))
          where(round_down_month(leg.%start_hb%) = month),
          wop.%failobject_start%);

/*
**    Maximum planned in a 3-month-period duty time for CC FG part time
**
**    Part time factor at beginning of month determines Max duty time limit reduction
**
**    OMA and 4ExNG interpretations
**
*/
export rule ind_max_duty_time_in_3_months_pt_cc =
  valid roster.%check_rules% and
        wop.%start_hb% >= %pp_start% and
        wop.%is_last_on_duty_in_month% and
        crew.%part_time_factor_at_date%(round_up_month(wop.%start_utc%)) < 100 and
        crew.%part_time_factor_at_date%(round_up_month(wop.%start_utc%)) =
        crew.%part_time_factor_at_date%(add_months(round_up_month(wop.%start_utc%),-3)) and
        (crew.%in_fixed_group_wop_start% and
         not crew.%is_legal_pt_wop_start%) and
        crew.%in_fixed_group%(add_months(round_up_month(wop.%start_utc%),-3)) and
        duty_time.%_planned_months_into_quarter% = 2
        and not crew.%has_agmt_group_skn_cc%;
  duty_time.%planned_duty_time_in_3_months% <= duty_time.%max_duty_in_3_months_pt_cc%(round_up_month(wop.%start_utc%)) +
				rule_exceptions.%overshoot_rel%(wop.%start_UTC%);
  startdate  = wop.%start_UTC%;
  severity = first(leg(wop), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = wop.%failobject_start%;
  failtext(Reltime value, Reltime limit) =
    %ind_max_duty_time_in_calendar_months_pt_cc_failtext%(value, limit);
  remark "(CCR) CPG: Max duty time in 3 calendar months for parttime crew",
  planner "The rule checks that the maxmimum duty in a 3-months-period"
          " is not exceeded. The rule is valid for FG parttime, but not FG when"
          " descshort match strings 'NNS F','Legal F', or 'Study F'"
          " The limit is reduced by part time factor";
end

/*
** Rule:
**   Maximum FDP extension duties in calendar month for CC.
**
** Description:
**   Check the number of SH FDP extension duties in a calendar month.
**
** Union Agreement:
**      4ExNG 6.3.1.1.B
**      Changes made 2022 in SKCMS-3069
*/
export rule ind_max_fdp_with_extension_in_month_cc =
  valid trip.%check_rules% and
        trip.%is_short_haul% and
        not crew.%is_svs% and
        duty.%in_pp_extended% and
        duty_period.%is_on_duty% and
        duty_period.%is_last_duty_period_on_start_day% and
        oma16.%is_extended_fdp% and
        oma16.%is_last_fdp_extension_duty_in_month%;
        
  %num_extension_duties_in_month% <= duty_time.%max_fdp_extensions_month% +
                rule_exceptions.%overshoot_int%(duty.%start_UTC%);
  startdate = duty.%start_UTC%;
  severity = first(leg(duty), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = duty.%failobject_start%;
  failtext(Int value, Int limit) =
    rules.%failtext_int%(format_time(duty.%start_month_start%,
                                     "(CCR) Coll: Max FDP extension duties in %b"),
                         value,limit);
  remark "Coll: Max FDP extension duties in month for CC",
  planner "The rule checks that the number of FDP extensions in a calendar "
          "month is less than maximum allowed.";
end
%num_extension_duties_in_month% =
    accumulators.%extended_shorthaul_duties_in_period%(duty.%start_month_start%,
                                             duty.%start_month_end%);

export rule ind_max_fdp_with_extension_in_7_days_cc =
  valid trip.%check_rules% and
        trip.%is_short_haul% and
        crew.%is_svs% and
        duty.%in_pp_extended% and
        duty_period.%is_on_duty% and
        duty_period.%is_last_duty_period_on_start_day% and
        oma16.%is_extended_fdp%;
        
  %num_extension_duties_in_prev_7_days% <= 1 +
                rule_exceptions.%overshoot_int%(duty.%start_UTC%);
  startdate = duty.%start_UTC%;
  severity = first(leg(duty), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = duty.%failobject_start%;
  failtext(Int value, Int limit) =
    rules.%failtext_int%(format_time(duty.%start_month_start%,
                                     "(CCR) Coll: Max FDP extension duties in %b"),
                         value,limit);
  remark "Coll: Max FDP extension duties in 7 days for CC",
  planner "The rule checks that the number of FDP extensions in a 7 days "
          "month is less than maximum allowed.";
end

%num_extension_duties_in_prev_7_days% =
        accumulators.%extended_shorthaul_duties_in_period%(duty.%end_UTC% - 24:00 * 7,
                                             duty.%end_UTC%);


/*
** Rule:
**    Max duty time in 2x24 hrs
**
** Description:
**    Check that the duty time with night upgrade in 2x24 hrs is less
**    than max allowed. The rule is only applicable to one-day greenland
**    return duties, and since such a trip must be followed by freedays,
**    it is only needed to check backwards from trip end.
**    The rule is only valid for CC SKD.
**
**    NB! Only one implementation is needed since trips are never combined
**    in the pairing phase.
**
** Agreement:
**    Greenland agreement 2.4
*/
rule ind_max_in_2x24_hrs_SKD =
  valid roster.%check_rules% and
        not crew.%is_leased_trip_start% and
        crew.%is_SKD% and
        trip.%in_pp_extended% and
        trip.%is_one_day_greenland_return% and
        not trip.%is_bought%;
  duty_time.%2x24_hrs_bwd% <=
    duty_time.%max_in_2x24_hrs% +
    rule_exceptions.%overshoot_rel%(trip.%start_UTC%);
  startdate  = trip.%start_UTC%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %ind_max_in_2x24_hrs_SKD_failobject%;
  failtext(Reltime value, Reltime limit) =
    rules.%failtext_rel%("Coll: Duty time in 2x24", value, limit);
  remark "(CCR) Coll: Max duty time in 2x24 hrs (Greenland trips)",
  planner "Check that the duty time with night upgrade in 2x24 hrs is less"
          " than max allowed. The rule is only applicable to one-day greenland"
          " return duties, and since such a trip must be followed by freedays,"
          " it is only needed to check backwards from trip end."
          " The rule is only valid for CC SKD.";
end

%ind_max_in_2x24_hrs_SKD_failobject% =
  let ps =  trip.%end_utc% - 2*24:00,
      overshoot = rule_exceptions.%overshoot_rel%(trip.%start_UTC%);

  last(leg(trip),
       if %duty_time_in_2x24_bwd_until_now%(ps) > duty_time.%max_in_2x24_hrs% +
       overshoot then
          leg.%failobject_departure%
       else
        prev(leg(chain), leg.%failobject_departure%)
        where(%duty_time_in_2x24_bwd_until_now%(ps) > duty_time.%max_in_2x24_hrs% +
              overshoot));

%duty_time_in_2x24_bwd_until_now%(Abstime ps) =
  roster.%duty_time_in_period%(ps, leg.%end_utc%, true, duty.union);
/*
** Rule:
**    Min freedays after greenland trip
**
** Description:
**    A one day Greenland return duty needs to be followed
**    by correct number of freedays.
**
** Agreement:
**    Greenland agreement 2.3
*/
rule ind_min_F_days_after_SFJ_SKD =
  valid roster.%check_rules% and
        not crew.%is_leased_wop_start% and
        crew.%is_SKD% and not crew.%is_temporary% and
        wop.%in_pp_extended% and
        last(trip(wop),trip.%is_one_day_greenland_return%) and
        not last(trip(wop),trip.%is_bought%);
  freedays.%freedays_and_bought_days_after_wop% >=
    freedays.%cabin_freedays_following_one_day_SFJ_return_skd% -
		rule_exceptions.%overshoot_int%(wop.%start_UTC%);
  startdate  = wop.%start_UTC%;
  severity = first(leg(wop), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %ind_min_F_days_after_SFJ_SKD_failobject%;
  failtext(Int value, Int limit) =
    rules.%failtext_int%("Coll: F-days after Greenland trip", value, limit);

  remark "(CCR) Coll: Min freedays after one-day Greenland return trip",
  planner "Check that the number of freedays after scheduled production is "
          "at least the number required according to the number of production "
          "days.";
end

%ind_min_F_days_after_SFJ_SKD_failobject% =
  if not last(duty(wop), duty.%consecutive_duties_fw%) then
    last(duty(wop), duty.%failobject_start%)
  else
  default(
          last(duty(wop), next(duty(chain) where
                               (not duty.%is_freeday% and
                               not duty.%is_bought% or
                               not duty.%consecutive_duties_fw%),
                               duty.%failobject_start%)),
  last(duty(wop), duty.%failobject_start%));

/*
** Rule:
**    Freedays  must follow Greenland trip
**
** Description:
**    A one day Greenland return duty needs to be followed by freedays.
**    i.e. wop has to end with (a) Greenland trip if it contains Greenland trip.
**
** Agreement:
**    Greenland agreement 2.3
*/
rule ind_F_days_after_SFJ_SKD =
  valid roster.%check_rules% and
        not crew.%is_leased_wop_start% and
        crew.%is_SKD% and not crew.%is_temporary% and
        wop.%in_pp_extended% and
        not wop.%is_bought_or_freeday% and
        any(duty(wop), duty.%is_one_day_greenland_return%)
        where (not duty.%is_bought%) and
        rule_exceptions.%rule_on%(wop.%start_UTC%);
        last(duty(wop), duty.%is_one_day_greenland_return%)
        where (not duty.%is_bought%);
  startdate  = wop.%start_UTC%;
  severity = first(leg(wop), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %ind_F_days_after_SFJ_SKD_failobject%;
  failtext "Coll: Greenland trip,no freedays after";
  remark "(CCR) Coll: Greenland trip is last in wop",
  planner "A Greenland trip has to be followed by freedays"
          "thus it has to be last in wop";
end

%ind_F_days_after_SFJ_SKD_failobject% =
  first(duty(wop), next(duty(wop), duty.%failobject_start%))
  where(duty.%is_one_day_greenland_return% and
        not duty.%is_bought%);
/*
** Rule:
**    Min 1 freeday between consecutive greenland trips
**
** Description:
**    A one-day Greenland return trip can be followed by a one freeday and another
**    one-day Greenland return trip. Under the condition that the trip is preceded
**    by freedays and the second Greenland trip ends the wop which should be followed
**    by the correct amount of freedays specified above in (Greenland 2.3)
**
** Agreement:
**    Greenland agreement 2.5
*/
export rule ind_min_one_F_day_between_SFJ_SKD =
  valid roster.%check_rules% and
        crew.%is_SKD% and not crew.%is_temporary% and
        not crew.%is_leased_trip_start% and
        trip.%in_pp_extended% and
        trip.%is_one_day_greenland_return% and
        not trip.%is_bought% and
        freedays.%nr_of_one_day_greenland_return_in_wop_not_bought% >= 2 and
        not is_last(trip(wop));
  %nr_freedays_btw_greenland_trips% >=
    1 - rule_exceptions.%overshoot_int%(trip.%start_UTC%);
  startdate  = trip.%start_UTC%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = next(trip(wop), trip.%failobject_start%);
  failtext(Int value, Int limit) =
    rules.%failtext_int%("Coll: F-days btw 1d Greenland", value, limit);
  remark "(CCR) Coll: Min one freeday between Greenland return trips",
  planner "Check that there is at least one freeday"
	        " between two one-day Greenland return duty"
          " The rule is only applicable to one-day Greenland"
          " return duties."
          " The rule is only valid for CC SKD.";
end

%nr_freedays_btw_greenland_trips% =
  (default(next(trip(wop), trip.%start_hb%) where (trip.%is_on_duty% and
                                                   not trip.%is_bought%),
           trip.%end_hb%) -
   round_up(trip.%end_hb%, 24:00))
  /24:00;

/*
** Rule: Maximum duty time in 4 weeks
*/
redefine %r_valid_duty_time_4_weeks% = crew.%is_SKJ%;
redefine %duty_time_4_weeks% = duty_time.%4_weeks_no_night_upg%;
redefine %duty_time_4_weeks_until_now% = accumulators.%duty_time_in_period_no_night_upg%(trip.%start_week_end% - 4*7*24:00,
                               leg.%end_utc%);

/*
** Rule: Maximum duty in calendar month
*/
redefine %r_valid_duty_time_calendar_month% =
  crew.%is_SKN% or
  crew.%is_SKS% or
  crew.%is_SKJ% or
  (crew.%k4exng_cc_sp5_1_valid%(wop.%start_month_start%) and
   crew.%is_SKD%);

%any_long_haul_in_month% =
  let this_month = wop.%start_month_start%;
  any(wop(roster), wop.%is_long_haul% and not wop.%is_bought_or_freeday%)
  from (current) backwards
  while (wop.%end_hb% > this_month);

redefine %duty_time_calendar_month% =
  duty_time.%calendar_month_no_night_upg% +
  (if not crew.%k4exng_cc_sp5_1_valid%(wop.%start_month_start%) and
      crew.%is_sks% then
     duty_time.%compdays_duty_time_in_period%(crew.%utc_time%(wop.%start_month_start%),
                                              crew.%utc_time%(wop.%start_month_end%))
   else 0:00);

redefine %duty_time_calendar_month_until_now% =
  roster.%duty_time_in_period%(wop.%start_month_start%, leg.%co_end_utc%,
                               false, duty.union);

/*
** Rule:
**    Maximum duty in vacation year
**
** Descirption:
**    The rule checks that the duty time including night upgrade in a vacation
**    year is not exceeded. A vacation year is defined as 01may - 30apr.
**
** Agreement:
**    CAU C.1.2c
**
**    4ExNG - rule no longer applies
*/
rule ind_max_duty_time_in_vacation_year_SKD =
  valid roster.%check_rules% and
        not crew.%k4exng_cc_sp5_1_valid%(wop.%start_month_start%) and
        crew.%is_SKD% and
        not crew.%is_temporary_trip_start% and
        crew.%is_short_haul_pp_start% and
        trip.%is_last_on_duty_in_month%;
  %duty_time_in_vacation_year% <= %max_duty_time_in_vacation_year% +
				  rule_exceptions.%overshoot_rel%(trip.%start_UTC%);
  startdate = trip.%start_UTC%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %ind_max_duty_time_in_vacation_year_SKD_failobject%;
  failtext(Reltime value, Reltime limit) =
    rules.%failtext_rel%("Coll: Duty in vacation yr", value, limit);
  remark "(CCR) Coll: Max duty in vacation year (01may - 30apr)",
  planner "The rule checks that the maximum duty time in a vacation year"
          " (from 01may to 30apr) is not exceeded. The rule is only valid"
          " for SKD and the limit is 1620:00 hours, or if it's a part time"
          " crew, the same amount reduced by the part time factor";
end

/* Calculated failobject not needed since rule is
** only active in planning /jastrom */
%ind_max_duty_time_in_vacation_year_SKD_failobject% =
  trip.%failobject_start%;

%duty_time_in_vacation_year% =
  accumulators.%duty_time_planned_skd%(
    %vacation_year_start%,
    nmin(trip.%end_hb%, round_up_month(trip.%start_hb%)));

%vacation_year_start% =
  if trip.%start_hb% >= add_months(round_down_year(trip.%start_hb%),4) then
    add_months(round_down_year(trip.%start_hb%),4)
  else
    add_months(round_down_year(trip.%start_hb%),-8);

%vacation_year_end% =
  add_months(%vacation_year_start%, 12) - 0:01;

%max_duty_time_in_vacation_year% =
 let max_limit = 1620:00,
     factor = crew.%part_time_factor_in_period%(%vacation_year_start%,
                                                %vacation_year_end%);
 (max_limit * factor)/10000;

/*
** Rule: No duty same day when check out later than 0200
*/
redefine %r_valid_no_duty_same_day_if_late_co% =
  crew.%is_SKS% or (crew.%is_SKD% and not crew.%is_temporary%);

  redefine %trip_start_same_day_as_prev_trip_end_with_late_check_out% =
  prev(trip(wop), trip.%start_day% <> trip.%end_day%) and
  trip.%start_day% = %prev_trip_end_day%;

%prev_trip_end_day% = prev(trip(wop), trip.%end_day%);

redefine %prev_trip_end_od% =
  prev(trip(wop), trip.%end_od%);



/*
** Rule:
**    No long haul trips to crew in fixed group
**
** Description:
**    Check that only short haul trips are assigned to crew in fixed group.
**    Crew in fixed group will normally not be qualified for LH production, but
**    it must be checked for the cases where crew has changed to fixed group
**    (could be temporary) and thus still has LH qualfication. The agreement can
**    be found implicitly in the paragraphs below.
**
** Agreement:
**    CAU E.1.9
**    SCCA D.1.3
**
**    4ExNG CC - no longer applies
*/
export rule ind_no_lh_trips_to_crew_in_fg_SKD_SKS =
  valid roster.%check_rules% and
        not crew.%k4exng_cc_sp5_1_valid%(trip.%start_day%) and
        (crew.%is_SKD% or crew.%is_SKS%) and
        crew.%in_fixed_group_trip_start% and
        not crew.%is_leased_trip_start% and
        trip.%in_pp_extended% and
        not trip.%is_bought% and
	rule_exceptions.%rule_on%(trip.%start_UTC%);
  not trip.%is_long_haul%;
  startdate = trip.%start_UTC%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = trip.%failobject_start%;
  failtext "Coll: No lh trips to fixed group";
  remark "(CCR) Coll: No long haul trips to crew in fixed group",
  planner "The rule checks that there are no long haul trips assigned"
          " to crew in fixed group. This will normally not happen but"
          " crew can temporarily belong to another group or is under"
          " transition. The rule is valid for SKD and SKS.";
end

/*
** Rule:
**    Max short haul duty time before long haul
**
** Description:
**    Check that the maximum duty time for short haul production before
**    long haul production is not exceeded.
**
**    NB! Two implementations are done. One in Pairing (when planning
**    short-before-long) and one in Rostering.
**
** Agreement:
**    CAU E.1.1 E.1.4, K06 P.3.4b
**    SCCA D.1.1
**    NKF K11 Appendix B 1.5
**
**    4ExNG 6.3.1.1.C
*/

export rule ind_max_sh_duty_time_before_lh_CC =
  valid roster.%check_rules% and
        crew.%k4exng_cc_sp5_1_valid%(trip.%start_day%) and
        not crew.%is_SKJ% and
        not crew.%is_SKK% and
        not (crew.%is_skd% and crew.%is_temporary%) and
        not crew.%is_leased_trip_start% and
        trip.%in_pp_extended% and
        trip.%is_long_haul% and
        not trip.%is_bought% and
        %trip_is_preceded_by_short_haul_or_gd_not_bought%;

  %sh_duty_time_before_lh% <= %max_sh_duty_time_before_lh% +
    rule_exceptions.%overshoot_rel%(trip.%start_UTC%);

  startdate  = trip.%start_UTC%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %ind_max_sh_duty_time_before_lh_CC_failobject%;
  failtext (Reltime value, Reltime limit) =
    rules.%failtext_rel%("Coll: SH duty time before LH", value, limit);
  remark "(CCR) Coll: Max short haul duty time before long haul",
  planner "The rule checks that the maximum allowed short haul duty time 20:00"
          " before long haul is not exceeded.";
end

%ind_max_sh_duty_time_before_lh_CC_failobject% =
  first(duty(trip), duty.%failobject_start%)
    where(duty.%is_long_haul% and not duty.%is_bought%);

%sh_duty_time_before_lh% =
 oma16.%scheduled_duty_time_in_interval_indust_indep%(
       crew.%utc_time%(%first_sh_trip_start%),
       crew.%utc_time%(%first_lh_duty_start_hb%));

%max_sh_duty_time_before_lh% = 20:00;


/*
** Rule:
**    Tel Aviv trip must be followed by freedays
**
** Description:
**    Check that a trip to TLV is followed by freedays,
**    i.e. check that the wop is terminated when arriving
**    to homebase after a trip to TLV. In rostering this
**    is also valid for standby-lines.
**
**    NB! Two implementations of this rule is done, One in CCP,
**    checking last in trip and one in CCR checking last in wop.
**
** Agreement:
**    SKD CC 6 M.1
**
**    4ExNG - no longer applies
*/
export rule ind_tlv_trip_last_in_wop_SKD_CC =
  valid roster.%check_rules% and
        not crew.%k4exng_cc_sp5_1_valid%(trip.%start_day%) and
        not crew.%is_leased_trip_start% and
        crew.%is_skd% and
        not crew.%is_temporary% and
        wop.%in_pp% and
        wop.%is_on_duty% and
        any(leg(trip), leg.%middle_east_distance_destination%) and
        not(last(duty(trip),duty.%is_bought%)) and
        default(not(last(duty(trip),next(duty(wop),duty.%is_bought%))),true) and
        rule_exceptions.%rule_on%(trip.%start_UTC%);

  %_tlv_last_in_wop_ok%;

  startdate  = trip.%start_UTC%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,duty.%region%));
  failobject = next(trip(wop), trip.%failobject_start%);
  failtext "Coll: Tel Aviv trip not followed by F-days";
  remark "(CCR) Coll: Tel Aviv trip must be followed by freedays",
  planner "Check that a trip including a TLV flight is followed by freedays,"
          " i.e. the trip is last in the working period.";
end

%_tlv_last_in_wop_ok% =
  let tlv_trip_end_day = trip.%end_day%;
  is_last(trip(wop)) where(not trip.%is_off_duty_cmp%) and
  (if crew.%in_fixed_group_wop_start% then
     default(next(wop(chain), wop.%start_day% <= tlv_trip_end_day + 24:00 and wop.%is_freeday%),false)
   else
     true);

/*
** Rule:
**    Max extended duties in period
**
** Description:
**    Check that there is no more than max extended duties in a period.
**    An extended duty is defined as: (SKN) a short haul duty including
**    legs with more than 3:00 hrs flying time, (SKD) max 3 legs or max 4
**    legs and a duty includes a meal stop (X). The rule is only valid for
**    CC SKD and SKN. Max allowed is 2 for SKD and 1 for SKN. A period is
**    defined as, between freedays for CC SKN and in 7x24 hrs for CC SKD.
**
**    NB! Two implementations are done. One in Pairing with max extended duties
**    in a trip and one in Rostering with max extended trips in period.
**
** Agreement:
**    CAU K06 C.1.2.b.ii
**    NKF/SBK 1.3.3
**
**    4ExNG - no longer applies
*/
export rule ind_max_extended_duties_in_period_SKD_SKN_SKL =
  valid roster.%check_rules% and
        not crew.%k4exng_cc_sp5_1_valid%(duty.%start_day%) and
        %r_valid_max_extended_duties% and
        not crew.%is_leased_trip_start% and
        trip.%in_pp_extended% and
        (trip.%is_short_haul% or
         trip.%is_long_haul_charter_skd%) and
        duty_time.%duty_is_extended% and
        not duty.%is_bought%;
  %nr_extended_duties_in_period% <=
    %max_extended_duties_in_period% +
    rule_exceptions.%overshoot_int%(duty.%start_UTC%);
  startdate  = duty.%start_UTC%;
  severity = first(leg(duty), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = duty.%failobject_start%;
  failtext(Int value, Int limit) =
    rules.%failtext_int%(concat("Coll: Nr extended duties ", %extended_duties_period_str%),
                         value, limit);
  remark "(CCR) Coll: Max extended duties in period",
  planner "The rule checks that there is no more than max extended duties"
          " in a period. An extended duty is defined as: (SKN) a short haul"
          " duty including legs with more than 3:00 hrs flying time, (SKD) max"
          " 3 legs or max 4 legs and a duty includes a meal stop (X)."
          " The rule is only valid for CC SKD and SKN. Max allowed is 2 for"
          " SKD and 1 for SKN. A period is defined as, between freedays for"
          " CC SKN and in 7x24 hrs for CC SKD.";
end

%r_valid_max_extended_duties% =
  (crew.%is_SKD% and not crew.%is_temporary%) or
   crew.%is_SKN%;

%nr_extended_duties_in_period% =
  %nr_extended_duties_in_period_bwd_from_date%(%extended_duty_period_start%,
                                               %extended_duty_period_end%);

%extended_duty_period_start% =
  if crew.%is_SKD% then
    duty.%end_hb% - 7*24:00
  else
    prev(duty(chain),
         next(duty(chain), duty.%start_hb%))
    where (duty.%is_freeday% or
           duty.%is_bought%);

%extended_duty_period_end% =
  if crew.%is_SKD% then
    duty.%end_hb%
  else
    next(duty(chain),
         prev(duty(chain), duty.%end_hb%))
    where (duty.%is_freeday% or
           duty.%is_bought%);

%max_extended_duties_in_period% = if crew.%is_SKD% then 2 else 1;

/* Used in failtext */
%extended_duties_period_str% = if crew.%is_SKD% then "in 7x24 bwds" else "btw f-days";

/*
** Rule:
**    Max extended duties in calendar month
**
** Description:
**    Check that there is no more than max extended duties in month.
**    An extended duty is defined as: (SKN) a short haul duty including
**    legs with more than 3:00 hrs flying time, (SKD) max 3 legs or max 4
**    legs and a duty includes a meal stop (X). Max allowed is 4, except
**    for SKD 50% which is 2. The rule is only valid for CC SKD and SKN.
**
**    SKD K12: 100% max 3, 80% max 2, 50% max 1 unless 2 charter duties on
**    consecutive days in same trip, in which case max 2.
**
** Agreement:
**    CAU K06 C.1.2.b.ii
**    NKF/SBK 1.3.3
**
**    4ExNG - no longer applies
*/
export rule ind_max_extended_duties_in_calendar_month_SKD_SKN_SKL =
  valid roster.%check_rules% and
        not crew.%k4exng_cc_sp5_1_valid%(trip.%start_day%) and
        not crew.%is_leased_trip_start% and
        %r_valid_max_extended_duties% and
        trip.%in_pp_extended% and
        (trip.%is_short_haul% or
         trip.%is_long_haul_charter_skd%) and
        duty_time.%trip_has_extended_duty% and
        not trip.%is_bought%;
  %nr_extended_duties_in_month% <=
    %max_extended_duties_in_month% +
    rule_exceptions.%overshoot_int%(trip.%start_UTC%);
  startdate  = trip.%start_UTC%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %ind_max_extended_duties_in_calendar_month_SKD_SKN_SKL_failobject%;
  failtext(Int value, Int limit) =
    rules.%failtext_int%(concat("Coll: Max extended duties in ",
                                format_time(trip.%start_month_start%, " %b")),
                            value, limit);
  remark "(CCR) Coll: Max extended duties in calendar month",
  planner "The rule checks that there is no more than max extended duties"
          " in month. An extended duty is defined as: (SKN) a short haul duty"
          " including legs with more than 3:00 hrs flying time, (SKD) max"
          " 3 legs or max 4 legs and a duty includes a meal stop (X)."
          " Max allowed is 4, except for SKD 50% which is 2."
          " For SKD K12, 100% max 3, 80% max 2, 50% max 1, or 50% max 2 if they"
          " are charter duties on consecutive days in the same trip."
          " The rule is only valid for CC SKD and SKN.";
end

%ind_max_extended_duties_in_calendar_month_SKD_SKN_SKL_failobject% =
  first(duty(trip), duty.%failobject_start%)
  where (duty_time.%duty_is_extended% and
         %nr_extended_duties_in_month_until_now% >
         %max_extended_duties_in_month% +
         rule_exceptions.%overshoot_int%(trip.%start_UTC%) and
         not duty.%is_bought%);

table max_extended_duties_in_month =
  crew.%region%, parameters.%k12_skd_cc_sp4_3_valid%(duty.%start_hb%),
  crew.%part_time_factor_month_end% ->
    %max_extended_duties_in_month%;
  "SKD", true,  100     -> 3;
  "SKD", true,  (80,99) -> 2;
  "SKD", true,  (50,79) -> %max_extended_duties_in_month_skd_k12_50%;
  "SKD", false, >50     -> 4;
  "SKD", false, 50      -> 2;
  "SKN",   -  ,  -      -> 4;
  -, -, - -> 0;
end

/*
** SKD CC 50% may have 2 extended duties per month if they are charter duties
** on consecutive days within a trip, otherwise maximum 1.
*/

%max_extended_duties_in_month_skd_k12_50% =
  let start_day = duty.%start_day%;

  if %trip_nr_extended_duties% > 1 and
     duty.%has_charter% and
     (default(prev(duty(trip),duty_time.%duty_is_extended% and
                              duty.%has_charter% and
                              duty.%start_day% = start_day - 24:00),
              false) or
      default(next(duty(trip),duty_time.%duty_is_extended% and
                              duty.%has_charter% and
                              duty.%start_day% = start_day + 24:00),
              false)) then
    2
  else
    1;

%nr_extended_duties_in_month% =
  %nr_extended_duties_in_period_bwd_from_date%(trip.%start_month_start%,
                                               trip.%start_month_end%);
%nr_extended_duties_in_month_until_now% =
  %nr_extended_duties_in_period_bwd_from_date%(trip.%start_month_start%,
                                               duty.%end_utc%);
/* The calculation is from current and backwards for performance reasons, i.e.
 * the function must be used under certain contexts. */
%nr_extended_duties_in_period_bwd_from_date%(Abstime start, Abstime stop) =
  sum(trip(roster), if trip.%start_hb% >= start and trip.%end_hb% <= stop then
                      %trip_nr_extended_duties%
                    else
                      %_trip_nr_extended_duties%(start, stop))
  from (current) backwards
  while (trip.%end_hb% > start)
  where (trip.%has_active_flight% and
         duty_time.%trip_has_extended_duty% and
         not trip.%is_bought%);

%trip_nr_extended_duties% =
  count(duty(trip))
  where (duty_time.%duty_is_extended% and
         not duty.%is_bought%);

%_trip_nr_extended_duties%(Abstime start, Abstime stop) =
  count(duty(trip))
  where (duty_time.%duty_is_extended% and
         duty.%start_hb% < stop and
         duty.%end_hb% > start and
         not duty.%is_bought%);

/*
** Rule:
**    Maximum number of night duties in calendar month
**
** Description:
**    Check that the max number of night duties in a calendar month is not
**    exceeded. A duty is at night if it touches the interval (02:00, 04:00).
**    The rule is valid for CC SKN.
**
** Agreement:
**    NKF/SBK 8.2
*/
export rule ind_max_night_duties_in_calendar_month_SKN_SKL =
  valid roster.%check_rules% and
        crew.%is_SKN% and
        not crew.%is_leased_trip_start% and
        trip.%start_hb% >= %pp_start% and
        trip.%is_last_night_duty_in_month%;
  %nr_night_duties_in_month% <= %max_night_duties_in_month% +
				rule_exceptions.%overshoot_int%(trip.%start_UTC%);
  startdate  = trip.%start_UTC%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %ind_max_night_duties_in_calendar_month_SKN_SKL_failobject%;
  failtext(Int value, Int limit) =
    rules.%failtext_int%("Coll: Night duties in month", value, limit);
  remark "(CCR) Coll: Max night duties in calendar month",
  planner "The rule checks that the maximum number of night duties is not"
          " exceeded. A duty is at night if it touches the interval"
          " (02:00, 04:00). The rule is valid for CC SKN.";
end


%ind_max_night_duties_in_calendar_month_SKN_SKL_failobject% =
  let month_start = trip.%start_month_start%,
      overshoot = rule_exceptions.%overshoot_int%(trip.%start_UTC%);

  if (%nr_night_duties_in_period_bwd_from_date%(month_start, trip.%start_utc%) <= %max_night_duties_in_month% +
	   overshoot) then
       first(duty(trip), duty.%failobject_start%)
       where(duty.%is_night_duty% and
             not duty.%is_bought% and
             %nr_night_duties_in_period_bwd_from_date%(month_start, duty.%start_utc%)<=%max_night_duties_in_month% +
             overshoot)
  else
    prev(trip(chain),
         first(duty(trip), duty.%failobject_start%)
         where(duty.%is_night_duty% and
               not duty.%is_bought% and
               %nr_night_duties_in_period_bwd_from_date%(month_start, duty.%start_utc%)<=%max_night_duties_in_month% +
               overshoot))
    where(%nr_night_duties_in_period_bwd_from_date%(month_start, trip.%start_utc%) <= %max_night_duties_in_month% +
          overshoot);


%max_night_duties_in_month% = 4;
%nr_night_duties_in_month% =
  %nr_night_duties_in_period_bwd_from_date%(trip.%start_month_start%,
                                            trip.%start_month_end%);

/* The calculation is from current and backwards for performance reasons, i.e.
 * the function must be used under certain contexts. */
%nr_night_duties_in_period_bwd_from_date%(Abstime start, Abstime stop) =
  sum(trip(roster), if trip.%start_hb% >= start and trip.%end_hb% <= stop then
                      trip.%night_duties_not_bought%
                    else
                      %_trip_nr_night_duties%(start, stop))
  from (current) backwards
  while (trip.%end_hb% > start)
  where (trip.%is_night_duty% and not
         trip.%is_bought%);

%_trip_nr_night_duties%(Abstime start, Abstime stop) =
  count(duty(trip))
  where (duty.%is_night_duty% and
         duty.%start_hb% >= start and
         duty.%end_hb% <= stop and not
         duty.%is_bought%);

/*
** Rule:
**    Long haul trip must be followed by freedays
**
** Description:
**    Check that a long haul trip is followed by freedays,
**    i.e. check that the wop is terminated when arriving
**    to homebase after a long haul trip. In rostering this
**    is also valid for standby-lines.
**
** Agreement:
**    CAU
*/
export rule ind_long_haul_trip_last_in_wop_fg_cc =
  valid roster.%check_rules% and
        base_product.%is_rostering% and
        not crew.%is_leased_trip_start% and
        crew.%is_skd% and
        crew.%in_fixed_group%(trip.%start_UTC%) and
        wop.%in_pp% and
        wop.%is_on_duty% and
        trip.%is_long_haul% and
        not(last(duty(trip),duty.%is_bought%)) and
        rule_exceptions.%rule_on%(trip.%start_UTC%);

  round_down(next(trip(roster), trip.%start_hb%),24:00) = round_up(trip.%end_hb%,24:00) and
  is_last(trip(wop)) where(not trip.%is_off_duty_cmp%);

  startdate  = trip.%start_UTC%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = next(trip(wop), trip.%failobject_start%);
  failtext "Soft: Long haul trip must be last in wop on fixed group crew";
  remark "Soft: Long haul trip must be last in wop on fixed group crew",
  planner "Long haul trips should be assigned last in wop on"
           " fixed group crew to enable productive rosters";
end


/*
** Rule:
**    Max duties with long charter duty in calendar month
**
** Description:
**    Check that there is no more than one duty in a calendar month that
**    includes long charter duty.
**
**    Long charter duty is defined as a duty with > 10:30 duty time, that
**    includes at least two active charter legs, with the last arriving in
**    Sweden
**
** Agreement:
**    SKS charter agreement
*/
rule ind_max_long_charter_duties_in_calendar_month_cc_sks =
  valid roster.%check_rules% and
        not crew.%is_leased_trip_start% and
        %is_valid_max_long_charter_duties_cc_sks% and
        trip.%in_pp_extended% and
        trip.%has_long_charter_duty_cc_sks% and
        not trip.%is_bought%;
  %nr_long_charter_duties_in_month% <= %max_long_charter_duties_in_month% +
    rule_exceptions.%overshoot_int%(trip.%start_UTC%);
  startdate  = trip.%start_UTC%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %ind_max_long_charter_duties_in_calendar_month_cc_sks_failobject%;
  failtext(Int value, Int limit) =
    rules.%failtext_int%(concat("Coll: Max long charter duties in ",
                                format_time(trip.%start_month_start%, " %b")),
                            value, limit);
  remark "(CCR) Coll: Max long charter duties in calendar month",
  planner "The rule checks for SKS that there is no more than 1 long charter duty"
          " in month. A long charter duty is defined as more than 10:30 duty,"
          " including at least 2 charter legs, with the last leg arriving"
          " in Sweden.";
end

%ind_max_long_charter_duties_in_calendar_month_cc_sks_failobject% =
  first(duty(trip), duty.%failobject_start%)
  where (duty.%is_long_charter_duty_cc_sks% and
         %nr_long_charter_duties_in_month_until_now% >
         %max_long_charter_duties_in_month% +
         rule_exceptions.%overshoot_int%(trip.%start_UTC%) and
         not duty.%is_bought%);

%max_long_charter_duties_in_month% = 1;

%nr_long_charter_duties_in_month_until_now% =
  %nr_long_charter_duties_in_period_bwd_from_date%(trip.%start_month_start%,
                                                   duty.%end_utc%);

%nr_long_charter_duties_in_month% =
  %nr_long_charter_duties_in_period_bwd_from_date%(trip.%start_month_start%,
                                                   trip.%start_month_end%);

/* The calculation is from current and backwards for performance reasons, i.e.
 * the function must be used under certain contexts. */
%nr_long_charter_duties_in_period_bwd_from_date%(Abstime start, Abstime stop) =
  sum(trip(roster), if trip.%start_hb% >= start and trip.%end_hb% <= stop then
                      %nr_long_charter_duties_in_trip%
                    else
                      %nr_long_charter_duties_in_part_trip%(start, stop))
  from (current) backwards
  while (trip.%end_hb% > start)
  where (trip.%has_long_charter_duty_cc_sks% and not
         trip.%is_bought%);

%nr_long_charter_duties_in_trip% =
  count(duty(trip)) where (duty.%is_long_charter_duty_cc_sks% and
                           not duty.%is_bought%);

%nr_long_charter_duties_in_part_trip%(Abstime start, Abstime stop) =
  count(duty(trip)) where (duty.%is_long_charter_duty_cc_sks% and
                           duty.%start_hb% >= start and
                           duty.%start_hb% < stop and not
                           duty.%is_bought%);

%is_valid_max_long_charter_duties_cc_sks% =
  parameters.%charter_cc_sks_valid%(%pp_start%) and
  trip.%is_sks% and
  (not crew.%is_temporary% or
   (pp.%start_month_number% >= 6 and
    pp.%start_month_number% <= 8));

/*
** Rule:
**    Long charter duty is last in wop.
**
** Description:
**    Check that a duty containing charter production and > 10:30 is
**    the last duty in a wop, because it must be followed by F-days.
**
**    NB! This rule is also implemented in a Pairing version, which checks
**    that the duty is the last in a trip.
**
** Agreement:
**    SKS Charter agreement
*/

rule ind_long_charter_duty_last_in_wop_cc_sks =
  valid roster.%check_rules% and
        not crew.%is_leased_trip_start% and
        wop.%in_pp% and
        wop.%is_on_duty% and
        %is_valid_max_long_charter_duties_cc_sks% and
        trip.%has_long_charter_duty_cc_sks% and
        not (crew.%is_temporary_at_date%(trip.%start_hb%) and
             crew.%in_fixed_group%(trip.%start_hb%)) and
        rule_exceptions.%rule_on%(trip.%start_UTC%);

  %is_long_charter_duty_followed_by_freedays_cc_sks%;

  startdate  = trip.%start_UTC%;
  severity = first(duty(trip), %severity_filter_int%(duty.%start_hb%,%duty_lh_region%));
  failobject = trip.%failobject_start%;
  failtext "Coll: Long charter duty not followed by F-days";
  remark "(CCR) Coll: Long charter duty must be followed by freedays",
  planner "Check that a duty containing charter production > 10:30 is followed"
          " by freedays, i.e. the trip is last in the working period.";
end

/*
** Check that the charter duty is on the day before the first freeday.
** This will prevent Matador from assigning a long charter duty to an FG CC
** on any day other than the last possible production day in the FG pattern.
** If it isn't assigned on the last day, Matador is unable to assign further
** production in the production block, e.g. ..F/P/////F/F/F..
*/

%is_long_charter_duty_followed_by_freedays_cc_sks% =
  is_last(trip(wop)) where (not trip.%is_off_duty_cmp%) and
  count (duty(trip)) where (duty.%is_long_charter_duty_cc_sks%) = 1 and
  last(duty(trip),duty.%is_long_charter_duty_cc_sks%) and
  (crew.%in_variable_group%(trip.%start_hb%) or
   default(last(duty(trip),duty.%start_day%) =
           next(trip(roster),trip.%start_day%) - 24:00, true));

/*
** Rule:
**    Maximum duty time in a duty after a SKN CC long  duty
**
** Description:
**    The rule checks the SKN CC K12 rule that the duty time in a duty pass that
**    follows a long duty, is less than the maximum allowed.
**
**    This rule is also included in the max duty pass rule in rules_indust_ccp,
**    but that is a module which isn't included in Matador. The rule's limit is
**    dependent on the duty time in the previous duty, so the rule has to be
**    active in Matador.
**
**    This CCR rule checks only the SKN CC rule, and only for a duty that is the
**    first in a trip. The CCP rule checks it for duties that are not the first
**    in a trip.
**
**    A duty period is separated by minimum rest.
**
** Agreement:
**    NKF/SBK 1.3.1, 1.3.2
**
**    4ExNG - no longer applies.
*/
export rule ind_max_duty_time_in_duty_period_after_long_duty_SKN =
  valid trip.%check_rules% and
        not crew.%k4exng_cc_sp5_1_valid%(trip.%start_day%) and
        trip.%is_SKN% and
        not is_first(trip(wop)) and
        trip.%start_hb% >= %pp_start% and
        first(duty(trip),duty_time.%max_in_duty_period_sh_skn_prev_duty_long% > 0:00 and
                         not (duty.%is_long_haul% or
                              duty.%is_on_duty_illness% or
                              duty.%is_child_illness%) and
                         rest.%duty_followed_by_minimum_scheduled_rest%(duty.union));

  first(duty(trip),%duty_time_in_duty_period%) <=
  first(duty(trip),duty_time.%max_in_duty_period_sh_skn_prev_duty_long%) +
        rule_exceptions.%overshoot_rel%(trip.%start_UTC%);

  startdate  = trip.%start_UTC%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = first(leg(trip), leg.%failobject_departure%);
  failtext(Reltime value, Reltime limit) =
    rules.%failtext_rel%(
      "Coll: Duty time in duty period after long duty day before",value, limit);
  remark "Coll: Max duty time in duty period after long duty",
  planner "The rule checks that the maximum duty time in a duty period"
          " following a long duty is not exceeded. A duty period is surrounded"
          " by minimum rest."
          " The rule is valid for CC SKN K12";
end

%duty_time_in_duty_period% =
  duty_time.%in_duty_period%(duty.union,false);

/* SKCMS-520 -> SKCMS-1341
   Agreement group SNK CC
   Max duty per calendar month
   Moved from rules_studio_ccr_cc to rules_indust_ccr_cc during SKCMS-1774 */

export rule ind_max_duty_time_2_months_skn_skd_cc =
  valid %ind_max_duty_time_2_months_skn_skd_cc_valid% and
    not crew.%is_svs%;

  %duty_time_2_months_skn_skd_cc_scheduled% <= duty_time.%max_duty_time_2_months_skn_skd_cc_planned%
                                                + rule_exceptions.%overshoot_rel%(wop.%start_utc%);
  startdate = wop.%start_utc%;
  severity = first(leg(wop), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %ind_max_duty_time_2_months_skn_skd_cc_failobject%;
  failtext(Reltime value, Reltime limit) =
    rules.%failtext_rel%("Coll: Max duty time in 2 months SKN and SKD",value,limit);
  remark "Coll: Max duty time in 2 months SKN and SKD",
  planner "This rule checks that SKD CC (except resource pool and crew with monthly parttime)"
          " and all SKN CC are not scheduled more than P x 8:48"
          " hours of duty time in two fixed calendar months,"
          " Jan+Feb, Mar+Apr etc. SKN 2018, item 3.1.1.";
end

%ind_max_duty_time_2_months_skn_skd_cc_valid% =
    roster.%check_rules% and
    wop.%starts_in_pp% and
    base_product.%is_rostering% and
    fundamental.%even_month_by_month_start%(%pp_start%) and
    not crew.%is_temporary% and
    (crew.%has_agmt_group_snk_cc% or crew.%has_agmt_group_nkf_cc%
    or (crew.%is_SKD% and not(crew.%is_crew_monthly_parttime_at_date%(wop.%start_utc%) or crew.%is_temporary%))) and
    wop.%is_last_on_duty_in_month% and
    %is_available_more_than_5_prod_days_in_2_month_pair%;

%even__or_after_release_in_odd_if_CCT% =
/* In Planning/Rostering the rule is only "on" for the second month of the pairs (even months).
   In Tracking it is "on" a little earlier, namely when "now" is after roster release on the odd month.*/
    if %is_tracking% then
        (calendar.%day_is_after_publish_date%(%now%) or fundamental.%even_month_by_month_start%(%now%)) and
        (calendar.%day_is_after_publish_date%(wop.%start_HB%) or fundamental.%even_month_by_month_start%(wop.%start_HB%))
    else
        fundamental.%even_month_by_month_start%(%pp_start%);

%even_month_open_if_CCT% =
    if %is_tracking% then
        fundamental.%even_month_by_month_start%(wop.%start_HB%) or
        calendar.%month_pair_end%(wop.%start_HB%) <= %pp_end%
    else
        true;

%is_available_more_than_5_prod_days_in_2_month_pair% =
    let day_count = %prod_days_in_2_month_pair%;
    day_count > 5;

%prod_days_in_2_month_pair% =
    let
        duty_start = duty.%start_hb%,
        start = calendar.%month_pair_start%(duty_start),
        stop = calendar.%month_pair_end%(duty_start);
    default(
        duty_time.%nr_p_days_in_period_cc%(start, stop, false, false, false, false, true)
        , 0);

%duty_time_2_months_skn_skd_cc_scheduled% =
    let duty_start = duty.%start_HB%;
    if crew.%is_SKD% then
      duty_time.%duty_time_cc_in_period_actual_scheduled%(
        calendar.%month_pair_start%(duty_start),
        calendar.%month_pair_end%(duty_start))
    else
      duty_time.%duty_time_skn_cc_in_period_scheduled%(
        calendar.%month_pair_start%(duty_start),
        calendar.%month_pair_end%(duty_start));

/* Go back from current object until we are below limits -
**  next object is illegal */
%ind_max_duty_time_2_months_skn_skd_cc_failobject% =
  default(
    last(duty(wop), duty.%failobject_start%)
    where(duty.%end_hb% <= calendar.%month_pair_end%(wop.%start_hb%))
    , wop.%failobject_start%);

/*
** Rule:
**    Max short haul production days before long haul
**
** Description:
**    Check that long haul production is not preceded by more than 2 (1) days short
**    haul production.
**    
**    NB! Two implementations are done. One in Pairing (when planning
**    short-before-long) and one in Rostering.
**    
**    There is also a "sister rule" for MFF in rules_qual_ccr_fc - SKCMS-3215
**
** Agreement:
**    CAU E.1.1 E.1.4, K06 P.3.4b
**    SCCA D.1.1
**    NKF K11 Appendix B 1.5
**
**    4ExNG 6.3.1.1.C
**    Engagement CC 2019 - Limit is 1 SH day before LH for SKD and SKS

*/
export rule ind_max_sh_duty_days_before_lh_cc =
  valid roster.%check_rules% and not
       (crew.%is_skd% and crew.%is_temporary%) and
        trip.%in_pp_extended% and
        trip.%is_long_haul% and
        not trip.%is_bought% and
        %trip_is_preceded_by_short_haul_gd_not_bought_or_standby%;

 %sh_days_before_lh% <= %max_sh_days_before_lh% + rule_exceptions.%overshoot_int%(trip.%start_UTC%);
 
  startdate  = trip.%start_UTC%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %ind_max_sh_duty_days_before_lh_failobject%;
  failtext (Int value, Int limit) = rules.%failtext_int%("Coll: SH production days before LH", value, limit);
  remark "(CCR) Coll: Max short haul production days before long haul",
  planner "The rule checks that LH production is not preceded by more than"
          " 1 short haul production days (2 for SKN CC).";
end


%trip_is_preceded_by_short_haul_gd_not_bought_or_standby% =
  default(prev(trip(wop), trip.%is_standby%), false) or
  %trip_is_preceded_by_short_haul_or_gd_not_bought%;

%trip_is_preceded_by_short_haul_or_gd_not_bought% =
  default(prev(trip(wop), %_trip_is_sh_or_gd_not_bought%), false);

%_trip_is_sh_or_gd_not_bought% =
  (trip.%is_short_haul% or
   (trip.%is_ground_duty% and not trip.%is_off_duty_cmp%) or
   %_k4exng_trip_is_sh_standby%) and
  not trip.%is_bought%;

%_k4exng_trip_is_sh_standby% =
  not base_product.%is_tracking% and
  not trip.%is_long_haul% and
  trip.%is_standby%;

%ind_max_sh_duty_days_before_lh_failobject% =
  first(duty(trip), duty.%failobject_start%)
    where(duty.%is_long_haul% and not duty.%is_bought%);

%first_sh_trip_start% =
  first(trip(wop), trip.%start_day%)
    where (%_trip_is_sh_or_gd_not_bought%);


%first_lh_duty_start_hb% =
  first(duty(wop), duty.%start_hb%)
    where (duty.%is_long_haul% and not duty.%is_bought%);

%first_lh_duty_start_day% =
  first(duty(wop), duty.%start_day%)
    where (duty.%is_long_haul% and not duty.%is_bought%);

%max_sh_days_before_lh% =
    if (system_db_parameters.%skd_cc_provavtal_2023off%(%pp_start%) and crew.%has_agmt_group_skd_cc%) or
    (crew.%has_agmt_group_sks_cc% and system_db_parameters.%max_1_sh_before_lh_sks_cc%(%pp_start%))
      and (%nr_of_sh_duty_days_in_wop% >= 2) then
    1
    else
    2;

%nr_of_sh_duty_days_in_wop% =
sum(duty(wop), duty.%days%)
    where (duty.%is_short_haul%);
    
%sh_days_before_lh% =
  %days_since%(%first_lh_duty_start_day%, %first_sh_trip_start%);

/*
** Rule:
**    Max short haul flight duty period before long haul
**
** Description:
**    Check that the maximum flight duty period for short haul production before
**    long haul production is not exceeded.
**
**   Agreement:
**    An agreement has been signed between CAU and SAS with the intent to
**    limit the number of short haul (sh) days before long haul (lh) to 1.
**    The SH-day can not be scheduled with a FDP > 11:00 or FDP > 09:30 if
**    the first LH has a scheduled FDP > 11:00 for CC SKD
**
**    SKCMS-1879. Max 1 SH before LH with max FDP 11h CC SKD
**    
**    NB!Moved from rules_indust_ccr in SKCMS-3215
**    There is also a "sister rule" for MFF in rules_qual_ccr_fc - SKCMS-3215

*/

/*export rule (off) ind_max_sh_fdp_before_lh =
  valid roster.%check_rules% and
        %max_fdp_before_lh_agmt_groups% and
        trip.%in_pp_extended% and
        trip.%is_long_haul% and
        not trip.%is_bought% and
        %trip_is_preceded_by_short_haul_gd_not_bought_or_standby%;

  %sh_fdp_before_lh% <= %max_sh_fdp_before_lh_calc%  +
    rule_exceptions.%overshoot_rel%(trip.%start_UTC%);

  startdate  = trip.%start_UTC%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %ind_max_sh_fdp_before_lh_failobject%;
  failtext (Reltime value, Reltime limit) =
    rules.%failtext_rel%("Coll: SH FDP time before LH", value, limit);
  remark "(CCR) Coll: Max short haul flight duty period before long haul",
  planner "The rule checks that the maximum allowed short haul flight duty period"
          " before long haul is not exceeded.";
end

%max_fdp_before_lh_agmt_groups% =
  not base_product.%is_tracking% and
      crew.%has_agmt_group_sk_cc% and not 
      crew.%is_temporary%;

%ind_max_sh_fdp_before_lh_failobject% =
  first(duty(trip), duty.%failobject_start%)
    where(duty.%is_long_haul% and not duty.%is_bought%);

%sh_fdp_before_lh% = fdp.%scheduled_time_in_interval%(
       crew.%utc_time%(%first_sh_trip_start%),
       crew.%utc_time%(%first_lh_duty_start_day%));
       
%first_lh_fdp% =
  first(duty(wop), fdp.%end_scheduled_utc% - fdp.%start_scheduled_utc%)
    where (duty.%is_long_haul% and not duty.%is_bought%);

%max_sh_fdp_before_lh_calc% =
    if crew.%has_agmt_group_skd_cc% and %first_lh_fdp% > 11:00 then
      %max_sh_fdp_before_long_lh_cc_skd%
    else
      %max_sh_fdp_before_lh%;

%max_sh_fdp_before_lh% =
    parameter 11:00
    remark "Max FDP time day before LH";

%max_sh_fdp_before_long_lh_cc_skd% =
    parameter 09:30
    remark "Max FDP time day before LH with FDP >11:00";/*



/****************************************************************
 * Section 2: Block time rules
 ***************************************************************/

/*
** Rule:
**    Max block in long haul duty if preceded by short haul
**
** Description:
**    Check that maximum block time in long haul duty (NRT excepted) where
**    preceded by a short haul duty is not exceeded. The rule is only valid for
**    cabin crew SKD.
**
**    NB! Two implementations are done. One in Pairing (when planning
**    short-before-long) and one in Rostering.
**
** Agreement:
**    CAU E.1.2
**
**    4ExNG - Rule no longer applies
*/
export rule ind_max_block_in_lh_if_preceded_by_sh_SKD =
  valid roster.%check_rules% and
        not crew.%k4exng_cc_sp5_1_valid%(trip.%start_day%) and
        crew.%is_SKD% and not crew.%is_temporary% and
        not crew.%is_leased_trip_start% and
        trip.%in_pp_extended% and
        trip.%is_long_haul% and
        not trip.%is_bought% and
        not %trip_to_NRT% and
        %trip_is_preceded_by_short_haul_or_gd_not_bought%;
  first(duty(trip), duty.%block_time_scheduled%)
  where (duty.%is_long_haul%) <=
  %max_block_time_for_lh_trip% +
        rule_exceptions.%overshoot_rel%(trip.%start_UTC%);
  startdate  = trip.%start_UTC%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = trip.%failobject_start%;
  failtext(Reltime value, Reltime limit) =
    rules.%failtext_rel%("Coll: BLH for LH after SH/GD", value, limit);

  remark "(CCR) Coll: Max BLH in long haul duty if preceded by other duty",
  planner "The rule checks that the max block time in a long haul duty (NRT"
          " excepted) where preceded by a short haul duty or a ground duty is"
          " not exceeded. Only valid for SKD.";
end

%trip_to_NRT% = any(duty(trip), duty.%duty_to_NRT%);
%max_block_time_for_lh_trip% = 10:00;

/*
** Rule:
**    Max block time in period
**
** Description:
**    Check that the block time in period (checked backwards for each day where
**    on duty activity) is less than the maximum allowed.
**    The rule is only valid for CC SKD.
**
**    A period is defined as 30 days.
**
** Agreement:
**    CAU K06 C.1.2.4, D.1.2.4
**
**    4ExNG - rule no longer applies.
*/
export rule ind_max_block_time_in_period_SKD =
  valid roster.%check_rules% and
        not crew.%k4exng_cc_sp5_1_valid%(wop.%start_month_start%) and
        crew.%is_SKD% and not crew.%is_temporary% and
        not crew.%is_leased_trip_start% and
        trip.%in_pp_extended% and
        duty.%is_on_duty% and
        not duty.%is_bought%;
  %block_time_in_period% <= %max_block_time_in_30_days% +
			    rule_exceptions.%overshoot_rel%(duty.%start_UTC%);
  startdate  = duty.%start_UTC%;
  severity = first(leg(duty), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %ind_max_block_time_in_period_SKD_failobject%;
  failtext(Reltime value, Reltime limit) =
    rules.%failtext_rel%(format_int(%blh_period%, "Coll: BLH in %i days "),
                         value, limit);
  remark "Coll: Max block time in period",
  planner "Check that block time in period is less than maximum. The rule is"
          " checked for each day where on duty activity. It is only valid for"
          " CC SKD. A period is defined as 30 days, and maximum is 100:00 blh."
          "reduced proportionately for part-time (K12)";
end

%ind_max_block_time_in_period_SKD_failobject% =
  let sp = duty.%start_day% - %blh_period% * 24:00,
      overshoot = rule_exceptions.%overshoot_rel%(duty.%start_UTC%);

  if(%duty_block_time_until_sod%(sp) <= %max_block_time_in_30_days% +
     overshoot) then
        first(leg(duty), leg.%failobject_departure%)
        where(%leg_block_time_until_now%(sp) > %max_block_time_in_30_days% +
              overshoot)
  else
    prev(duty(chain),
         first(leg(duty), leg.%failobject_departure%)
         where(%leg_block_time_until_now%(sp) > %max_block_time_in_30_days% +
               overshoot))
    where(%duty_block_time_until_sod%(sp) <= %max_block_time_in_30_days% +
			    overshoot);

%blh_period% = 30;

/* Variable duty.%start_day% is rounded down to nearest 24-hour period. In order
 * to check the rule for each whole day, the start day must be rounded up (done
 * here by adding 24hrs to the period start and end).
 *
 * The block time on bought freedays (FX) is subtracted since the 28x24 hrs rule
 * should not include blh on FX-days. */
%block_time_in_period% =
  accumulators.%block_time_in_period_excluding_bought_days_daily%(%block_time_period_start%,
                                      duty.%start_day% + 24:00);

%duty_block_time_until_sod%(Abstime sp) =
  accumulators.%block_time_in_period_excluding_bought_days_daily%(sp,
                                      duty.%start_hb%);

%leg_block_time_until_now%(Abstime sp) =
  accumulators.%block_time_in_period_excluding_bought_days_daily%(sp,
                                      leg.%end_hb%);

%block_time_period_start% =
  duty.%start_day% - %blh_period% * 24:00;

%max_block_time_in_30_days% =
  if parameters.%k12_skd_cc_sp4_3_valid%(%block_time_period_start%) then
    (crew.%part_time_factor_at_date%(%block_time_period_start%)
     * %max_block_time_in_period%) / 100
  else
    %max_block_time_in_period%;

%max_block_time_in_period% =
  parameter 100:00
  remark "Max block time in period";

/*
** Rule:
**    Max block time in 90 days
**
** Description:
**    Check that the block time in a 90 day period (checked backwards for each
**    day where on duty activity) is less than the maximum allowed.
**    The rule is only valid for CC SKD.
**
** Agreement:
**    CAU K06 C.1.2.4, D.1.2.4
**
**    4ExNG - no longer applies
*/
export rule ind_max_block_time_in_90_days_SKD =
  valid roster.%check_rules% and
        not crew.%k4exng_cc_sp5_1_valid%(duty.%start_day%) and
        crew.%is_SKD% and not crew.%is_temporary% and
        parameters.%k12_skd_cc_sp4_3_valid%(%block_time_90_days_start%) and
        not crew.%is_leased_trip_start% and
        trip.%in_pp_extended% and
        duty.%is_on_duty% and
        not duty.%is_bought%;

  %block_time_in_90_days% <= %max_block_time_in_90_days% +
			    rule_exceptions.%overshoot_rel%(duty.%start_UTC%);

  startdate  = duty.%start_UTC%;
  severity = first(leg(duty), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %ind_max_block_time_in_90_days_SKD_failobject%;
  failtext(Reltime value, Reltime limit) =
    rules.%failtext_rel%("Coll: BLH in 90 days ",value, limit);
  remark "Coll: Max block time in 90 days",
  planner "Check that block time in 90 days is less than maximum. The rule is"
          " checked for each day where on duty activity. It is only valid for"
          " CC SKD. Maximum is 270:00 blh., reduced proportionately for"
          " part-time (K12)";
end

%ind_max_block_time_in_90_days_SKD_failobject% =
  let sp = %block_time_90_days_start%,
      overshoot = rule_exceptions.%overshoot_rel%(duty.%start_UTC%);

  if(%duty_block_time_until_sod%(sp) <= %max_block_time_in_90_days% +
     overshoot) then
        first(leg(duty), leg.%failobject_departure%)
        where(%leg_block_time_until_now%(sp) > %max_block_time_in_90_days% +
              overshoot)
  else
    prev(duty(chain),
         first(leg(duty), leg.%failobject_departure%)
         where(%leg_block_time_until_now%(sp) > %max_block_time_in_90_days% +
               overshoot))
    where(%duty_block_time_until_sod%(sp) <= %max_block_time_in_90_days% +
			    overshoot);

/* Variable duty.%start_day% is rounded down to nearest 24-hour period. In order
 * to check the rule for each whole day, the start day must be rounded up (done
 * here by adding 24hrs to the period start and end).
 *
 * The block time on bought freedays (FX) is subtracted since the 28x24 hrs rule
 * should not include blh on FX-days. */
%block_time_in_90_days% =
  accumulators.%block_time_in_period_excluding_bought_days_daily%(%block_time_90_days_start%,
                                      duty.%start_day% + 24:00);

%block_time_90_days_start% =
  duty.%start_day% - 90 * 24:00;

%max_block_time_in_90_days% =
  if parameters.%k12_skd_cc_sp4_3_valid%(%block_time_90_days_start%) then
    (crew.%part_time_factor_at_date%(%block_time_90_days_start%)
     * %maximum_block_time_in_90_days%) / 100
  else
    %maximum_block_time_in_90_days%;

%maximum_block_time_in_90_days% =
  parameter 270:00
  remark "Max block time in 90 days";

/****************************************************************
 * Section 3: Rest rules
 ***************************************************************/

/*
** Rule: Night rest required before/after short stop
*/
redefine %r_valid_night_rest_surrounding_short_stop% =
  (trip.%is_on_duty% and not trip.%is_rest%)
   and not trip.%is_bought%
   and not crew.%is_skn%;

/*
** Rule:
**    Max night stops for 75% Swedish law parttime crew
**
** Description:
**    The rule checks that crew under 75% Swedish law parttime
**    are not assigned trips with more than 1 night stop away
**    from homebase. According to agreement ref below this is
**    only applicable to crew in fixed group.
**
** Agreement:
**    SCCA N.3.c
*/
rule ind_max_night_stops_for_75_SE_law_pt_SKS =
  valid crew.%is_SKS% and
        crew.%agreement_is_75_pt_law% and
        not crew.%is_leased_wop_start% and
        wop.%in_pp_extended% and
        wop.%is_short_haul% and not
        wop.%is_bought_or_freeday%;
  %nr_night_stops_in_wop% <= %max_nights_away_for_SE75_pt_law_crew% +
			     rule_exceptions.%overshoot_int%(wop.%start_UTC%);
  startdate  = wop.%start_UTC%;
  severity = first(leg(wop), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %ind_max_night_stops_for_75_SE_law_pt_SKS_failobject%;
  failtext(Int value, Int limit) =
    rules.%failtext_int%("Coll: 75% SE law pt crew night stops", value, limit);
  remark "Coll: Max 1 night stop away from homebase for 75% SE-law parttime",
  planner "The rule checks that there is no more than 1 night away from homebase,"
          " i.e. max 2 day trips per working period. Only valid for SKS-crew"
          " under 75% parttime law.";
end

%ind_max_night_stops_for_75_SE_law_pt_SKS_failobject% =
  default(
    first(duty(wop) where (not duty.%arrives_at_homebase%),
          next(duty(wop) where (not duty.%arrives_at_homebase%),
               last(leg(duty), leg.%failobject_departure%))),
    wop.%failobject_start%);

%max_nights_away_for_SE75_pt_law_crew% = 1;

/*
%nr_night_stops_in_wop_old% =
  sum(trip(wop), trip.%days% - 1)
  where (not trip.%is_bought%);
*/
/****************************************************************
  Night stop must touch 02:00 and be away from homebase.
 ***************************************************************/


%nr_night_stops_in_wop% =  sum(trip(wop), trip.%days% - 1) where (not trip.%is_bought%);


/*
** Rule:
**    SKCMS-2516
**    Latest check-out before long haul
**
** Description:
**      Valid for SKD CC and checks that the latest allowed check-out time is at
**      midnight if there is a long haul in production the next day.
**
*/

export rule ind_latest_checkout_before_lh_skd_cc =
  valid roster.%check_rules% and
        crew.%has_agmt_group_skd_cc% and
        duty.%in_pp_extended% and
        %co_same_day_as_lh% and
        duty.%is_long_haul%
        and prev(duty(wop), duty.%is_short_haul%) and
        %agreement_valid%("K20_cau_co_before_LH", trip.%start_scheduled_hb% );

        %planned_checkout_lh% <=
            %co_time_limit_before_lh% + rule_exceptions.%overshoot_rel%(prev(duty(roster), duty.%start_scheduled_hb%));

  startdate  =    prev(duty(roster),duty.%start_scheduled_hb%)
                  where (duty.%is_on_duty%);
  severity = first(leg(duty), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %ind_check_out_before_lh_failobject%;
  failtext(Reltime value, Reltime limit) =
  rules.%failtext_rel%("Coll: C/O before long haul",
                       value, limit);
  remark "(CCR) Coll: No check out after midnight before long haul for SKD CC",
  planner "The rule checks that the check out time for the last duty"
          " before lh duty is not later than midnight."
          " The rule is valid for SKD CC.";
end

%co_time_limit_before_lh% = 00:00;

%co_same_day_as_lh% = (round_down(duty.%start_scheduled_hb%, 24:00) = %co_time_lh%);

%co_time_lh% =
  round_down(prev(duty(roster),duty.%end_scheduled_hb%)
		   where (duty.%is_on_duty% and not duty.%is_compensation_day%),
		   24:00);

%planned_checkout_lh% = time_of_day(prev(duty(roster), duty.%end_scheduled_hb%));

%ind_check_out_before_lh_failobject% =
   prev(duty(roster),duty.%failobject_end%)
      where (duty.%is_on_duty%);

/****************************************************************
 * Section 4: Freeday rules
 ***************************************************************/

/*
** Rule: Min number of freedays in calendar month.
*/
redefine export %r_valid_freedays_in_1_month% = true;

/*
** Rule:
**    Min rest days between east/west or vv
**
** Description:
**    Check that the number of rest days between a long haul east flight
**    followed by a long haul west flight or vice versa is at least
**    according to agreement. The rest days need not be consecutive, i.e.
**    there can be a short haul block in between.
**    The rule is valid for SKD.
**
**    SKN K11: the rule applies, the requirement is however for min F-days,
**    i.e. days between two consecutive LH wops, so that a SH day/trip before
**    the long haul trip shouldn't be counted. The days count has so been  .
**    adjusted for SKN to count the number of days between wops.
**
**    4ExNG: the CAU rule applies for all regions, i.e. minimum 4 calendar days
**    between east<-->west trips, which can be the required 3 F-days after LH
**    plus e.g. a SH production day when it is not part of the LH trip.
**
** Agreement:
**    CAU K06 J.2.1
**    SKN K11 2.4.5
**
**    4ExNG 6.6.2.f
*/
export rule ind_min_rest_days_btw_east_west_skd =
  valid roster.%check_rules% and
        (crew.%k4exng_cc_sp5_1_valid%(wop.%start_day%) or
         ((crew.%is_SKD% and not crew.%is_temporary%) or
          (crew.%is_SKN% and parameters.%k11_skn_cc_sp10_8_valid%(%pp_start%)))) and
        not crew.%is_leased_wop_start% and
        wop.%start_hb% >= %pp_start% and
        crew.%is_long_haul_wop_start% and
        (%trip_is_lh_east_preceded_by_lh_west% or
         %trip_is_lh_west_preceded_by_lh_east%);

  %calendar_days_btw_east_west% >= %min_rest_days_btw_east_west% -
			       rule_exceptions.%overshoot_int%(wop.%start_UTC%);

  startdate = wop.%start_UTC%;
  deadline = prev(wop(chain), wop.%end_UTC%);
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = wop.%failobject_start%;
  failtext(Int value, Int limit) =
    rules.%failtext_int%("Coll: Days btw e/w", value, limit);
  remark "(CCR) Coll: Min days between east/west long haul",
  planner "Check that the number of days between a long haul east flight"
          " followed by a long haul west flight or vice versa is at least"
          " according to agreement.";
end

%trip_is_lh_east_preceded_by_lh_west% =
  trip.%is_long_haul% and
  trip.%is_east_bound% and
  not trip.%is_bought% and
  prev(wop(roster) where (wop.%is_long_haul%),
    last(trip(wop),trip.%is_west_bound%)
       where (not trip.%is_bought%));

%trip_is_lh_west_preceded_by_lh_east% =
  trip.%is_long_haul% and
  trip.%is_west_bound% and
  not trip.%is_bought% and
  prev(wop(roster) where (wop.%is_long_haul%),
    last(trip(wop),trip.%is_east_bound%)
      where (not trip.%is_bought%));

%min_rest_days_btw_east_west% =
  if (crew.%has_agmt_group_skd_cc% or crew.%has_agmt_group_snk_cc%) then
    4
    else
    3;

%calendar_days_btw_east_west% =
  if crew.%is_SKD% or
     crew.%k4exng_cc_sp5_1_valid%(wop.%start_day%) then
    %calendar_days_btw_east_west_skd%
  else
    (wop.%start_day% - prev(wop(roster),wop.%end_day%  + 24:00)
                         where (wop.%is_long_haul%))
    / 24:00;

%calendar_days_btw_east_west_skd% =
  (trip.%start_day% -
   prev(trip(roster), trip.%end_day% + 24:00)
   where (%trip_is_lh_west_not_bought% or %trip_is_lh_east_not_bought%)) / 24:00;

%trip_is_lh_west_not_bought% =
 trip.%is_long_haul% and trip.%is_west_bound% and not trip.%is_bought%;
%trip_is_lh_east_not_bought% =
 trip.%is_long_haul% and trip.%is_east_bound% and not trip.%is_bought%;

/*
** Rule: Min freedays before vacation
*/
redefine %r_valid_min_freedays_in_cnx_with_VA% =
  (wop.%start_day% > %pp_start%) and
  ((wop.%start_day% - 2 * 24:00) < %pp_end%);
/*
** Rule: Check the check-in time for a wop.
*/
redefine %_ci_limitation_after_2F% =
  %last_trip_is_long_haul_charter% and
  (wop.%end_od% > 22:00 or
   wop.%end_od% = 0:00);

/*
** Rule:
**   More than 60 hours free after 4 days production
**
** Description:
**   Checks that there are at least 60 (from co to ci) hours planned free after
**   3 or 4 days production.
**
** Agreement:
**    NKF K11: 2.4.4
**    CAU K12: J.4
**    SCCA K12: H.1.5
*/
rule ind_min_rest_after_4_or_3_prod_days =
   valid roster.%check_rules% and
        not (freedays.%freedays_after_duty% = 1) and
        %_k_valid_and_crew_origin% and
        crew.%is_short_haul_wop_start% and
        (wop.%in_pp% or %_next_duty_in_pp%) and
        %wop_day_limit% and
        is_last(duty(wop)) and
        not trip.%has_agmt_group_fpu_cc% and
        freedays.%valid_freedays_after_duty% and
        not last(duty(wop),duty.%has_no_duty_time_contribution%) and
        crew.%in_variable_group_duty_end% and
        not crew.%is_leased_duty_start% and
	%_k4exng_and_not_lh%;       
 
        duty.%rest_time_scheduled% >= 60:00 - rule_exceptions.%overshoot_rel%(duty.%start_UTC%);

  startdate = duty.%start_UTC%;
  severity = first(leg(duty), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %ind_min_rest_after_4_or_3_prod_days_failobject%;
  failtext(Reltime value, Reltime limit) =
    rules.%failtext_rel%(
      concat("Coll: Min 60 hours rest after ", format_int(freedays.%wop_days%,"%d"), " production days"), value,limit);
  remark "Coll: Min 60 hours rest after 3 or 4 production days",
  planner "Check that the number of hours after 3 or 4 production days is at least 60"
          "The rule is valid for CC.";
end

export %_k_valid_and_crew_origin% = 
   ((parameters.%k11_skn_cc_valid%(duty.%start_hb%) and
     crew.%has_agmt_group_skn_cc%) or
     (parameters.%k12_skd_cc_sp4_3_valid%(duty.%start_hb%) and
     crew.%has_agmt_group_skd_cc%) or
     (parameters.%k12_sks_cc_sp4_4_valid%(duty.%start_hb%) and
     crew.%has_agmt_group_sks_cc%));

export %_k4exng_and_not_lh% =
   ((crew.%k4exng_cc_sp5_1_valid%(duty.%start_day%) and
     not (duty.%is_long_haul% or duty.%is_blank_day%)) or
    (not crew.%k4exng_cc_sp5_1_valid%(duty.%start_day%) and
     %is_short_haul_or_standby%));

%wop_day_limit% =
  if (crew.%has_agmt_group_skn_cc% and parameters.%k20_skn_cc_planned_rest_after_3_prod_days%(duty.%start_hb%)) then
    (freedays.%wop_days% = 3 or freedays.%wop_days% = 4)
  else
    freedays.%wop_days% = 4;

%_next_duty_in_pp% =
  default(next(duty(roster) where (duty.%is_on_duty_not_rest%), duty.%start_hb%),
  1jan1986 0:00) >= %pp_start%;

%is_short_haul_or_standby% =
  wop.%is_short_haul% or wop.%is_standby%;

%ind_min_rest_after_4_or_3_prod_days_failobject% =
  default(if not duty.%consecutive_duties_fw%
          then last(leg(duty), leg.%failobject_departure%)
          else next(duty(chain) where (not duty.%is_freeday% or not duty.%is_off_duty_cmp% or
                                       (duty.%is_bought% and bought_days.%duty_bought_type% <> "F") or
                                       not duty.%consecutive_duties_fw%), duty.%failobject_start%)
  ,duty.%failobject_start%);

/*
** Rule:
**    Required number of freedays after flight production.
**
** Description:
**   Checks that the number of freedays scheduled after flight production is
**   equal to the number required.
**
**
** Agreement:
**    Chinese CC
*/

rule ind_reqd_freedays_after_duty_SKK =
  valid roster.%check_rules% and
        freedays.%valid_freedays_after_duty% and
        crew.%is_skk% and
        duty.%has_flight_duty% and
        crew.%in_variable_group_duty_end% and
        not (%last_on_duty_in_tracking_in_published_period% or
             %last_on_duty_in_rostering_before_published_period%) and
        not crew.%is_leased_duty_start%;

  freedays.%freedays_after_duty% = freedays.%min_required_freedays_after_duty_total% -
                           rule_exceptions.%overshoot_int%(duty.%start_utc%);

  startdate  = duty.%start_UTC%;
  severity = first(leg(duty), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %ind_reqd_freedays_after_duty_SKK_failobject%;
  failtext(Int value, Int limit) =
    rules.%failtext_int%("Coll: Required F-days after flight duty", value,limit);
  remark "Coll: Required freedays after flight production",
  planner "Check that the number of freedays after scheduled flight production "
          "is equal to the number required for Chinese CC";
end

/* Tracking should not check production that goes into
** unpublished period or where the freedays goes into unpublished period */
%last_on_duty_in_tracking_in_published_period% =
  %is_tracking% and
  not parameters.%is_request_bidding% and
  %is_last_on_duty_in_published_period% and
  not %next_wop_is_non_wrappable_vacation_in_published_period%;
%last_on_duty_in_rostering_before_published_period% =
  (%is_rostering% or parameters.%is_request_bidding%) and
  duty.%is_last_on_duty_before_pp% and
  %next_wop_is_non_wrappable_vacation_in_published_period%;

%is_last_on_duty_in_published_period% =
  default(next(duty(chain), duty.%start_hb% >= attributes.%crew_last_published%)
          where(duty.%is_on_duty%), true);

%next_wop_is_non_wrappable_vacation_in_published_period% =
  freedays.%next_not_freedays_wop_is_vacation% and
  not freedays.%_wrap_around_vacation% and
  next(wop(chain), wop.%start_hb% <= attributes.%crew_last_published%)
  where(wop.%is_vacation%);


%ind_reqd_freedays_after_duty_SKK_failobject% =
    default(
        if not duty.%consecutive_duties_fw% then
            last(leg(duty), leg.%failobject_departure%)
        else
            next(duty(chain)
            where (not duty.%is_freeday% or not duty.%is_off_duty_cmp% or
                   (duty.%is_bought% and bought_days.%duty_bought_type% <> "F") or
                   not duty.%consecutive_duties_fw%), duty.%failobject_start%)
        , duty.%failobject_start%);

/*
** Rule:
**    Special addition: Min F-days after LH starting with 2 SH days.
**    Min F-days
**
** Description:
**    The rule is only valid for wops that are qualified:
**    SKD, CC, WOP with LH, and the first two days are SH (or can be: SB and BL also counted).
**      If so, 2+2 freedays are requested to follow, the first two real freedays, the rest any off
**      duty code.
**
** Agreement:
**    CAU 2014 dec, 6.6.2
**    The rule was time limitited, and is planned to be put off early 2016, Jira SKCMS-865
**
*/
export rule ind_min_freedays_cau1412_662 =
  valid roster.%check_rules% and
    (
        (crew.%has_agmt_group_skn_cc% and system_db_parameters.%skn_cc_oct2016_valid%(wop.%start_hb%)) or
        crew.%has_agmt_group_sks_cc% or
        (crew.%has_agmt_group_skd_cc% and system_db_parameters.%cau1412_skd_16_valid%(wop.%start_hb%))

    ) and
        next(wop(chain), wop.%touches_pp%) AND
        freedays.%is_last_duty_in_wop_cau1412_662% AND
        rule_exceptions.%rule_on%(wop.%start_UTC%);

  freedays.%count_cau1412_662_regarded_as_freedays% >= freedays.%min_freedays_cau1412_662%;

  startdate  = wop.%start_UTC%;
  severity = first(leg(wop), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = wop.%failobject_start%;

  failtext concat("Coll: 2 SH prod days followed by LH prod gives ", format_int(freedays.%min_freedays_cau1412_662%,"%d"), " freedays");
  /*
  failtext(Int value, int limit) =
    rules.%failtext_int%("Coll: 2 SH prod days followed by LH prod gives", value, limit);
  */
  /*failtext "Coll: 2 SH prod days followed by LH prod gives 4 freedays";*/
  remark "(CCR) Coll: 2 SH prod days followed by LH prod gives 4 freedays",
  planner "The rule is valid for CC SKD as per CAU agreement 2014-12-22."
          " The rule declares that any long haul production preceded by"
          " 2 short haul flight days must be followed by minimimum 4 days"
          " off. The first two days must be freedays, whereas the 3rd"
          " and 4th day may be replaced by any other off-time";
end

/*
** Rule:
**    Before lh with single slip to SFO / LAX (or similar?)
**    there should be no active short haul production
**
** Jira: SKCMS-865
**
** Description:
**    This is not a strict agreement, but a rule meant to please cabin unions.
**    It regards all SK Cabin Crew, flying LH far west, -7 timezone or more. This currently
**    means SFO or LAX. Such flights earlier had double slipping. Now single slipping is introduced,
**    and for single slipping we don't want any other active production before the trip. The exact
**    defintion of "active production" can change with short notice.
**
*/
export rule ind_union_production_before_far_timeszones_not_allowed =
  valid roster.%check_rules%
    and parameters.%cc16_lh_far_timezones_valid%(duty.%start_UTC%)
    and duty.%is_long_haul%
    and crew.%is_cabin%
    and not (crew.%is_skd% and crew.%in_fixed_group_at_date%(duty.%start_UTC%))
    and %duty_with_single_slipp_far_timezones%
    and rule_exceptions.%rule_on%(duty.%start_UTC%)
    and %is_single_slipp_far_tz_trip_start_after_pp_start%;

    %prod_sh_duties_before% <= 0 + rule_exceptions.%overshoot_int%(duty.%start_UTC%);

  startdate  = duty.%start_UTC%;
  severity = first(leg(duty), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = prev(duty(trip), duty.%failobject_start%);

  failtext "Coll: Single slipping cannot be preceded by production";
  remark "(CCR) Coll: Single slipping cannot be preceded by production",
  planner "The rule is valid for CC SK as per soft agreement spring 2016."
          " The rule declares that any singe slipp production which is not also"
          " double slipp to tz <= -7 (param) should not be preced by other"
          " production in same wop"
          " The rule does not apply for CC SKD in FG";
end

/* selection of duty for these two rules. The return duty is selected. */
%duty_with_single_slipp_far_timezones% =
  duty.%departure_station_tz_corrector% <= parameters.%slipp_layover_time_zone_p%
  and prev(duty(wop), duty.%follows_by_single_slipp% )
  and not any(duty(wop), duty.%follows_by_double_slipp%);

/* number of 'active short haul duties' within the wop, before current duty */
%prod_sh_duties_before% =
  duty.%count_wop_duties_within_interval%(duty.%duty_sel_active_union%, wop.%start_hb%, duty.%start_hb%);

%is_single_slipp_far_tz_trip_start_after_pp_start% =
   if any(duty(trip), %duty_with_single_slipp_far_timezones%) then
      trip.%start_hb% >= %pp_start%
   else false;

/*
** Rule:
**    After lh with single slip to LH off days need be 4 days, with first 2 days freedays
**
** Description:
**    This is not a strict agreement, but a rule meant to please cabin unions.
**    It regards all SK Cabin Crew, flying LH far west, -7 timezone or more. This currently
**    means SFO or LAX. Such flights earlier had double slipping. Now single slipping is introduced,
**    and for single slipping we require 4 days off duty after, which of the first 2 should be freedays
**    April 2019 SKS-245: CC SKS - all 4 days should be freedays
*/
export rule ind_min_freedays_after_far_timezones =
    valid roster.%check_rules%
          and %ind_min_freedays_after_far_timezones_valid%
          and rule_exceptions.%rule_on%(duty.%start_UTC%);

    %count_required_freedays_following_last_duty_in_wop% >= %minimum_nr_of_freedays_after_singleslipping% - rule_exceptions.%overshoot_int%(duty.%start_UTC%);

    startdate  = duty.%start_UTC%;
    severity = %ind_min_freedays_after_far_timezones_severity%;
    failobject = prev(duty(trip), duty.%failobject_start%);

    failtext(Int value, int limit) =
        rules.%failtext_int%( "Coll: Single slipping should be followed by off duty", value, limit);
    remark "(CCR) Coll: Single slipping should be followed by off duty",
    planner "The rule is valid for CC SK as per soft agreement spring 2016."
            " The rule declares that any singe slipp production which is not also"
            " double slipp to tz <= -7 (param) should be followed by 4 off duty days,"
            "  where the first two should be freedays";
end

%ind_min_freedays_after_far_timezones_valid% =
    parameters.%cc16_lh_far_timezones_valid%(duty.%start_UTC%)
    and duty.%is_long_haul%
    and crew.%is_cabin%
    and %duty_with_single_slipp_far_timezones%
    and %is_duty_with_single_slipp_far_timezones_plus_Fdays_overlapping_pp%;

%count_required_freedays_following_last_duty_in_wop% =
    if (crew.%has_agmt_group_sks_cc% and system_db_parameters.%scca_engagement_2019%(duty.%start_hb%)) then
        freedays.%count_freedays_following_last_duty_in_wop%
    else
        freedays.%count_mixed_freedays_following_last_duty_in_wop%;

%minimum_nr_of_freedays_after_singleslipping% = 4;

%is_duty_with_single_slipp_far_timezones_plus_Fdays_overlapping_pp% =
  %duty_with_single_slipp_far_timezones% and
  (duty.%end_hb% + 24:00*%minimum_nr_of_freedays_after_singleslipping% >= %pp_start%);

%ind_min_freedays_after_far_timezones_severity% =
    if %ind_min_freedays_after_alert% then
       first(leg(duty), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%))
    else
        %severity_filter_ignorable%;

/****************************************************************
 * Section 5: Blank day rules
 ***************************************************************/
/*
** Rule:
**    Max BL-days in calendar year
**
** Description:
**    Maximum number of blank days per crew in one calendar year.
**
** Agreement:
**    CAU K04 F.1.1.11
**
**    4eXNG 6.4.3.1
**    K22 SKN CC - SKCMS-3232
*/
/* CR404 */
rule ind_max_bl_days_in_calendar_year_SKD_SKS_SKN =
  valid roster.%check_rules%
   and crew.%is_homebase_scand%
   and  trip.%start_hb% >= %pp_start%
   and  trip.%is_last_blank_day_in_month_or_pp%
   and  not crew.%is_leased_trip_start%;

  %bl_days_in_calendar_year% <=
    %max_bl_days_in_calendar_year% +
		rule_exceptions.%overshoot_int%(trip.%start_UTC%);
  startdate = trip.%start_UTC%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %bl_calendar_year_failobject%;
  failtext(Int value, int limit) =
    rules.%failtext_int%("Coll: BL days in year", value, limit);
  remark "Coll: Max BL days in calendar year",
  planner "Check that number of BL days in a calendar year doesn't exceed max limit";
end

%max_bl_days_in_calendar_year% = 
    if crew.%has_agmt_group_skn_cc%
        then default(system_db_parameters.%max_bl_year_skn_cc%(%pp_start%),10)
    else if crew.%has_agmt_group_skd_cc%
        then default(system_db_parameters.%max_bl_year_skd_cc%(%pp_start%),10)
    else if crew.%has_agmt_group_sks_cc%
        then default(system_db_parameters.%max_bl_year_sks_cc%(%pp_start%),10)
    else 365; /*Other crew have no limit*/

%bl_days_in_calendar_year% =
  accumulators.%blank_days_in_period%(round_down_year(trip.%end_day%),
                                      round_up_year(trip.%end_day%));
/*
** For tracking we wish to pinpoint the precise date of rule break
*/
%bl_calendar_year_failobject% =
  first(trip(roster),trip.%failobject_start%)
  where (trip.%in_pp% and
         trip.%is_blank_day% and
         %bl_days_in_calendar_year% > %max_bl_days_in_calendar_year%);

/*
** Rule:
**    BL days not allowed for Resource Pool CC.
**
** Description:
**    Check that BL days are not assigned to Resource Pool CC
**
** Agreement:
**    4ExNG CC
*/
export rule ind_bl_not_allowed_resource_pool_CC =
  valid roster.%check_rules% and
        crew.%k4exng_cc_sp5_1_valid%(trip.%start_day%) and
        crew.%is_temporary% and
        trip.%in_pp_extended% and
        trip.%is_blank_day% and
	    rule_exceptions.%rule_on%(trip.%start_UTC%);

  not trip.%is_blank_day%;

  startdate = trip.%start_UTC%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = trip.%failobject_start%;
  failtext "Coll: BL days not allowed for Resource Pool CC";
  remark "(CCR) Coll: BL days not allowed for Resource Pool CC",
  planner "The rule checks that BL days are not assigned to Resource Pool CC";
end

/****************************************************************
 * Section 6: SKBU Resource Pool rules
 ***************************************************************/

/*
** Rule:
**    Max production days in resource pool accounting year -> calendar year.
**
** Description:
**    Maximum number of prod days per crew in one calendar year.
**
** Agreement:
**    CAU K04 F.1.1.11
**
**  SASCMS-5964
*/
export rule ind_max_prod_days_in_resource_pool_year_SKN_SKL =
  valid roster.%check_rules% and
        crew.%is_skbu_resource_pool%;

  %resource_pool_prod_days_in_year% <=
    %max_resource_pool_prod_days_in_year% +
		rule_exceptions.%overshoot_int%(%pp_start%);

  startdate = %pp_start%;
  severity =  %severity_filter_int_chain%(%pp_start%);
  failobject = %ind_max_prod_days_in_resource_pool_year_SKN_SKL_failobject%;
  failtext(Int value, Int limit)=
    rules.%failtext_int%("Coll: Max number of working days in calendar year", value, limit);
  remark "(CCR) Coll: Max production days for resource pool crew in accounting year",
  planner "Check that production days in an accounting year is less than 190 (SKN resource pool).";
end

%max_resource_pool_prod_days_in_year% =
  if crew.%is_skbu_resource_pool% then
    if crew.%k4exng_cc_sp5_1_valid%(%pp_start%) then 190
    else 76
  else
    0;

/* Returns the number of months, inclusive */
%resource_pool_months% =
  if crew.%k4exng_cc_sp5_1_valid%(%pp_start%)
  then pp.%start_month_number%
  else if pp.%start_month_number% > 4
  then
    pp.%start_month_number% - 4
  else
    pp.%start_month_number% + 8;

/* Returns last 1st */
%resource_pool_start_date% =
  add_months(%pp_start%, 1 - %resource_pool_months%);

/* Returns next 1st. The accumulator lookup is non-inclusive
 * so that's ok */
%resource_pool_end_date% =
  add_years(%resource_pool_start_date%, 1);

%resource_pool_prod_days_in_year% =
  let start_date = %resource_pool_start_date%,
      end_date = %resource_pool_end_date%;
  accumulators.%skbu_resource_qual_working_days_in_period%(start_date,end_date) -
  accumulators.%bought_days_in_period%(start_date,end_date);

%resource_pool_prod_days_in_year_until_now% =
  let start_date = %resource_pool_start_date%,
      end_date = duty.%end_day% + 24:00;
  accumulators.%skbu_resource_qual_working_days_in_period%(start_date,end_date) -
  accumulators.%bought_days_in_period%(start_date,end_date);

/*
** For tracking we wish to pinpoint the precise date of rule break
*/
%ind_max_prod_days_in_resource_pool_year_SKN_SKL_failobject% =
  first(wop(roster),
        first(duty(wop), duty.%failobject_start%)
        where(%resource_pool_prod_days_in_year_until_now% >
         %max_resource_pool_prod_days_in_year% +
         rule_exceptions.%overshoot_int%(%pp_start%) and
         not duty.%is_bought%))
  where (wop.%is_on_duty% and
         not wop.%is_bought_or_freeday% and
         last(duty(wop), %resource_pool_prod_days_in_year_until_now%) >
         %max_resource_pool_prod_days_in_year% +
         rule_exceptions.%overshoot_int%(%pp_start%));


/******************
** Super Freedays**
*******************/


redefine %days_before% =
  if crew.%is_SKD% or crew.%is_SKS% or crew.%is_SKN% then 5
  else void_int;
redefine %days_after% =
  if %agreement_valid_4exng_fs_day_logic% and
     (crew.%is_SKD% or crew.%is_SKS% or crew.%is_SKN%) or
     not %agreement_valid_4exng_fs_day_logic% and crew.%is_SKD% then
        3
  else if crew.%has_agmt_group_snk_cc_at_date%(duty.%start_hb%) then
    0
  else if crew.%is_SKS% or crew.%is_SKN% then
    5
  else void_int;

/*
Checks if an activity should be considered as a valid activity in the context of FS and FS1
placements on roster.
*/
redefine %valid_activity% =
  crew.%is_SKD% and (duty.%is_vacation% or duty.%is_loa%)
  or
  crew.%is_SKS%  and (%course% or %military% or (duty.%is_vacation% and not duty.%is_military%) or duty.%is_loa% or %long_f7s_block%)
  or
  crew.%is_SKN% and (duty.%is_vacation% or duty.%is_loa% or %long_f7s_block% or duty.%is_F0%);

redefine %military% = duty.%is_military% and duty.%days% > 4;
redefine %course% = trip.%is_course_period_min_length%(5);


redefine %long_f7s_block% =
  let duty_start_day = duty.%start_day%,
      duty_end_day = duty.%end_day% + 24:00;
  if duty.%is_f7s% then
    duty.%days% >= %min_F7S_days_full_block% or
    default(%days_since%(next(duty(chain), duty.%end_day% + 24:00)
                           where (duty.%is_f7s% and
                                  default(next(duty(chain), not duty.%is_f7s% or
                                                            not duty.%consecutive_duties_bw%), true))
                           while (duty.%is_f7s% and duty.%consecutive_duties_bw%),
                         duty_start_day),
            0) >= %min_F7S_days_full_block% or
    default(%days_since%(duty_end_day,
                         prev(duty(chain), duty.%start_day%)
                           where (duty.%is_f7s% and
                                  default(prev(duty(chain), not duty.%is_f7s% or
                                                            not duty.%consecutive_duties_fw%), true))
                           while (duty.%is_f7s% and duty.%consecutive_duties_fw%)),
            0) >= %min_F7S_days_full_block%
    else false;

%min_F7S_days_full_block% =
  if crew.%is_SKS% then
    4
  else if crew.%is_SKN% and crew.%part_time_factor% = 100 then
    5
  else if crew.%is_SKN% and (crew.%part_time_factor% = 80 or crew.%part_time_factor% = 75) then
    4
  else
    3;

redefine %fs_immediately_before_summer_va% =
    let wop_end_day = wop.%end_day% + 24:00;
    default(next(wop(chain),
        (freedays.%wop_is_vacation_starting_in_summer_period%)
        and ((wop.%start_day% = wop_end_day) or
            (freedays.%vacation_length% >= 19 and not
            %_saturday_fs1_before_summer_va%))), false)
    and all(duty(wop), (duty.%is_fs% or duty.%is_FS1%))
        from (current) forwards
        while (true or (duty.%is_fs% or duty.%is_FS1%)); /* while (x) only to avoid compile warning */

%_saturday_fs1_before_summer_va% =
    default(prev(wop(chain),
        wop.%is_FS1% and calendar.%wd_from_abs%(wop.%start_day%)=6), false);

redefine %fs_immediately_after_summer_va% =
    let wop_start_day = wop.%start_day%;
    default(prev(wop(chain),
        (freedays.%wop_is_vacation_starting_in_summer_period%)
        and wop.%end_day%+24:00 = wop_start_day), false)
    and all(duty(wop), duty.%is_fs%)
        from (current) backwards
        while (true or duty.%is_fs%); /* while (x) only to avoid compile warning */

redefine %fs_immediately_after_7_days_va% =
    let wop_start_day = wop.%start_day%;
    duty.%is_FS% and
    default(prev(wop(chain),
        (freedays.%is_wop_vacation%
        and freedays.%vacation_length% >= 7
        and wop.%end_day%+24:00 = wop_start_day)), false);

redefine %fs_immediately_before_7_days_va% =
    let wop_end_day = wop.%end_day%+24:00;
    duty.%is_FS% and
    default(next(wop(chain),
        (freedays.%is_wop_vacation%
        and freedays.%vacation_length% >=7
        and wop.%start_day% = wop_end_day)), false);

redefine %fs1_immediately_after_7_days_va% =
    let wop_start_day = wop.%start_day%;
    duty.%is_FS1% and
    default(prev(wop(chain),
        (freedays.%is_wop_vacation%
        and freedays.%vacation_length% >= 7
        and wop.%end_day%+24:00 = wop_start_day)), false);

%_next_duty_is_FS% =
    default(next(duty(wop), duty.%is_FS%), false);

%_prev_duty_is_FS% =
    default(prev(duty(wop), duty.%is_FS%), false);

/* end of file */

