/* -*- crc -*- 
 *
 * Purpose:
 *   Calendar variables.
 *
 * Sections:
 *   1. Month
 *   2. Weekends and special weekends
 *
 * Created by:
 *   Leo, 21-Feb-2007
 *
 * Major changes:
 *
 */

root module calendar

import fundamental;
import base_calendar;

/****************************************************************
 * Section 1: Month
 ***************************************************************/

export %month_start% = round_down_month(fundamental.%pp_start%);
export %month_end% = round_up_month(%month_start% + 0:01);

/****************************************************************
 * Section 1: Weekends and special weekends
 ***************************************************************/

/* these routindes were replaced by algorithms in base_calendar module, with variations for different needs */


%special_weekends_table_p% = 
  parameter "spec_weekends"
  remark "ETAB: table with special weekends";
  
%special_weekends_table% = %etab_path%(%special_weekends_table_p%);

/*
export %is_public_holiday%(AbsTime date, String country) = not void(%public_holiday_name%(round_down(date,24:00)-24:00,round_down(date,24:00), country));

table public_holidays(Abstime ivalstart, Abstime ivalend, String country) =
  ivalstart, ivalend, country ->
    String %public_holiday_name%;
  external %special_weekends_table%;
  >=westart, <=weend, country -> si;
  -, -, - -> void_string;
end
*/
/* in the old context weekend intervals were counted, so that a weekend always started midnight one day before end, which
   was midnight before the holiday. Matching abstime have some strange minute criteria. THis is reteined in calendar module,
   but base_calendar works with strict day handlings */
%start_d%(Abstime d) = round_up(d, 24:00)+24:00;

%end_d%(Abstime d) = round_up(d, 24:00);

export %interval_contains_special_weekend%(Abstime s, Abstime e, String country) =
  not void(%special_weekend_startdate%(s, e, country));

export %special_weekend_enddate%(Abstime s, Abstime e, String country) =
  base_calendar.%first_hol_per_cat_in_iv%(%start_d%(s), %end_d%(e), country, base_calendar.%hol_cat_per_diem%);

export %special_weekend_startdate%(Abstime s, Abstime e, String country) =
  %special_weekend_enddate%(s, e, country) - 24:00;

export %weekend_name%(Abstime s, Abstime e, String country) =
  base_calendar.%holiday_name%(%special_weekend_enddate%(s, e, country), country, base_calendar.%hol_cat_per_diem%);
    
/* This is for functions that need to generate a string from a day number. */
table weekday_from_daynumber(Int day) =
  day -> export String %weekday%;
  1 -> "Monday";
  2 -> "Tuesday";
  3 -> "Wednesday";
  4 -> "Thursday";
  5 -> "Friday";
  6 -> "Saturday";
  7 -> "Sunday";
  - -> "";
end

export %monday%   = 1;
export %tuesday%  = 2;
export %wednesday%= 3;
export %thursday% = 4;
export %friday%   = 5;
export %saturday% = 6;
export %sunday%   = 7;

export %wd_from_abs%(Abstime d) =
  time_of_week(d)/24:00 + 1;

export %weekdays_string%(Int int_from, Int int_to) =
  if (int_from = int_to) then %weekday%(int_from)
  else if (int_to = int_from + 1) then
    concat(%weekday%(int_from), " and ", %weekday%(int_to))
  else
    concat(%weekday%(int_from), " to ", %weekday%(int_to));
  
table month_number_from_date(Abstime date) =
    format_time(Date, "%m") -> export %month_number%;
    "1"   -> 1;
    "2"   -> 2;
    "3"   -> 3;
    "4"   -> 4;
    "5"   -> 5;
    "6"   -> 6;
    "7"   -> 7;
    "8"   -> 8;
    "9"   -> 9;
    "10"  -> 10;
    "11"  -> 11;
    "12"  -> 12;
    - -> void_int;
end

table month_name_from_number(Int number) =
    number -> export %month_name%;
    1   -> "JAN";
    2   -> "FEB";
    3   -> "MAR";
    4   -> "APR";
    5   -> "MAY";
    6   -> "JUN";
    7   -> "JUL";
    8   -> "AUG";
    9   -> "SEP";
    10  -> "OCT";
    11  -> "NOV";
    12  -> "DEC";
    - -> void_string;
end

/****************************************************************
 * Quarter functions and variables
 ***************************************************************/
table quarter_var_from_date(Abstime date) =
    format_time(Date, "%m") -> export Int %quarter_nr%,
                               export Abstime %quarter_first_month_start%;
    "1"   -> 1,Date;
    "2"   -> 1,add_months(Date, -1);
    "3"   -> 1,add_months(Date, -2);
    "4"   -> 2,Date;
    "5"   -> 2,add_months(Date, -1);
    "6"   -> 2,add_months(Date, -2);
    "7"   -> 3,Date;
    "8"   -> 3,add_months(Date, -1);
    "9"   -> 3,add_months(Date, -2);
    "10"  -> 4,Date;
    "11"  -> 4,add_months(Date, -1);
    "12"  -> 4,add_months(Date, -2);
    - -> void_int,void_abstime;
end

export %quarter_current% = default(%quarter_nr%(%month_start%), 1);
export %quarter_1_month_start% = default(%quarter_first_month_start%(%month_start%), 01Jan1986);
export %quarter_2_month_start% = add_months(%quarter_1_month_start%, 1);
export %quarter_3_month_start% = add_months(%quarter_2_month_start%, 1);
export %quarter_1_month_end% = round_up_month(%quarter_1_month_start%+0:01);
export %quarter_2_month_end% = round_up_month(%quarter_2_month_start%+0:01);
export %quarter_3_month_end% = round_up_month(%quarter_3_month_start%+0:01);


/****************************************************************
 * month-pair functions and variables  (jan-feb, mar-apr, may-jun, jul-aug, sep-oct, nov-dec)
 ***************************************************************/


export %month_pair_start%(Abstime date) =
    let
        is_even = fundamental.%even_month_by_month_start%(date),
        current_month_start = round_down_month(date);
    if is_even then
        round_down_month(current_month_start - 0:01)
    else
        current_month_start;


export %month_pair_end%(Abstime date) =
    let current_month_end = round_up_month(date);
    if fundamental.%even_month_by_month_start%(date) then
        current_month_end
    else
        round_up_month(current_month_end + 0:01);

/****************************************************************
 * Easter and Whitsun functions and variables
 ***************************************************************/
table easter_day_dates(Abstime year) =
  format_time(round_down_year(year), "%Y") -> export %easter_day_start%;
  "2008" -> 23Mar2008;
  "2009" -> 12Apr2009;
  "2010" -> 04Apr2010;
  "2011" -> 24Apr2011;
  "2012" -> 08Apr2012;
  "2013" -> 31Mar2013;
  "2014" -> 20Apr2014;
  "2015" -> 05Apr2015;
  "2016" -> 27Mar2016;
  "2017" -> 16Apr2017;
  "2018" -> 01Apr2018;
  "2019" -> 21Apr2019;
  "2020" -> 12Apr2020;
  "2021" -> 04Apr2021;
  "2022" -> 17Apr2022;
  "2023" -> 09Apr2023;
  "2024" -> 31Mar2024;
  "2025" -> 20Apr2025;
  "2026" -> 05Apr2026;
  "2027" -> 28Mar2027;
  "2028" -> 16Apr2028;
  "2029" -> 01Apr2029;
  "2030" -> 21Apr2030;
  "2031" -> 13Apr2031;
  "2032" -> 28Mar2032;
  "2033" -> 17Apr2033;
  "2034" -> 09Apr2034;
  "2035" -> 25Mar2035;
  -      -> void_abstime;
end

export %maundy_thursday_start%(Abstime year) =
  %easter_day_start%(year) - 3 * 24:00;

export %easter_monday_end%(Abstime year) =
  %easter_day_start%(year) + 2 * 24:00;

export %whitsun_day_start%(Abstime year) =
  %easter_day_start%(year) + 49 * 24:00;
  
export %whit_saturday_start%(Abstime year) =
  %whitsun_day_start%(year) - 24:00;

export %whit_monday_end%(Abstime year) =
  %whitsun_day_start%(year) + 2 * 24:00;



export %is_in_published_period%(Abstime date) =
/* Calculates whether the the date is in a publised roster,
   based on the assumption that if "now" is after the 15th of this month,
   then the following month is published. */
   date <= %_published_period_end%;


export %day_is_after_publish_date%(AbsTime d) =
    base_calendar.%day_of_month%(d) > 15;


export %_published_period_end% =
    /* Returns the end of the published roster period. */
    if %day_is_after_publish_date%(%now%) then  /* next month's roster should be published. */
        base_calendar.%month_end%(%now% + 20 * 24:00)  /* "20*24:00" puts us squarely in next month */
    else
        base_calendar.%month_end%(%now%);

/* end of file */
