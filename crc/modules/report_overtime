/* -*- crc -*-
 *
 * 
 * Purpose:
 *   This file containes overtime variables needed for reports.
 *
 * Created by:
 *   Leo Wentzel; 18-Apr-2006
 *
 * Major changes:
 *
 */

 module report_overtime

 import leg;
 import duty;
 import duty_code;
 import trip;
 import roster;
 import levels;
 import fundamental;
 import model_crew;
 import crew;
 import crew_pos;
 import salary;
 import salary_overtime;
 import salary_loss_of_rest;
 import rescheduling;
 import parameters;
 import report_common;
 import accumulators;
 import crew_contract;
 import standby;
 import crg_date;
 import duty_period;
 
/* Calculations only used in Reports */
 %4exng_cc_ot_valid% = salary_overtime.%4exng_cc_ot_valid%;
 %4exng_fc_ot_valid% = salary_overtime.%4exng_fc_ot_valid%;
 export %month_start% = salary.%salary_month_start%;
 export %month_end% = salary.%salary_month_end%;
 
 export %is_SKD% = salary_overtime.%is_SKD%;
 export %is_SKN% = salary_overtime.%is_SKN%;
 export %is_SKS% = salary_overtime.%is_SKS%;
 export %is_FC% = salary_overtime.%is_FC%;
 export %is_FP% = salary_overtime.%is_FP%;
 
 export %is_short_haul% = salary_overtime.%crew_is_short_haul%;
 export %is_full_time% = salary_overtime.%crew_is_full_time%;
 export %is_temporary% = salary_overtime.%crew_is_temporary%;
 export %is_temporary_two_months% = salary_overtime.%crew_is_temporary_two_months%;
 export %is_convertible% = salary_overtime.%crew_is_convertible%;
 
 export %duty_time_wop_7x24% = first(duty(wop), salary_overtime.%overtime_wop_7x24_duty%);
 
 export %salary_system% = default(salary.%salary_system%(%month_start%), "SE");
 
 export %full_time_duty_in_month% = salary_overtime.%full_time_duty_in_1_month%;
 
 /* Salary code DK: 316, NO: 3405 */
 export %maitre_de_cabin_short_haul% = 
   if not %is_SKS% then salary_overtime.%MDC_SH%
   else void_reltime;
 
 /* Salary code DK: 416, NO: 3765 */
 export %maitre_de_cabin_long_haul% = 
   if not %is_SKS% then salary_overtime.%MDC_LH%
   else void_reltime;
 
 /* Salary code SE: 351 */
 export %maitre_de_cabin% = 
   if %is_SKS% then
     default(salary_overtime.%MDC_SH%, 0:00) 
     + default(salary_overtime.%MDC_LH%, 0:00)
   else void_reltime;
 
 /* Salary code DK: 317, SE: 350, NO: 3150 */
 export %senior_cc_allowance% = salary_overtime.%SCC%;
 
 /* Salary code DK: 328, NO: 3412 */
 export %senior_cc_allowance_no_purser% = salary_overtime.%SCC_no_purser%;
 
 /* Salary code DK/NO SCC SVS: 032A  (SKCMS-2807) */
 export %senior_cc_allowance_svs% = salary_overtime.%SCC_SVS%;
 
 /* Salary code DK: 325, NO: 3143 */
 export %loss_of_rest_low% =
   if not %4exng_cc_ot_valid% then
     salary_loss_of_rest.%loss_of_rest_low_roster%
   else void_int;
 
 /* Salary code DK: 326, SE: 348 */
 export %loss_of_rest_high% =
   if not %4exng_cc_ot_valid% then
     salary_loss_of_rest.%loss_of_rest_high_roster%
   else void_int;
 
 /* Salary code DK: 229, NO: 6048 */
 export %temporary_crew_hours% =
       salary_overtime.%temporary_crew_hours%;
 
 export %active_duty_hrs% = if duty.%has_active_flight% then
                                if duty.%has_standby% then
                                 duty.%end_hb% - %checkin_post_standby%  
                                else
                                   duty.%end_hb% - duty.%start_hb%
                            else 0:00;
                          
 export %checkin_post_standby% =  first(leg(duty), leg.%ci_start_hb%) where 
   (not leg.%is_standby_at_airport% and not leg.%is_standby_at_home% and
     not leg.%is_standby_at_hotel% );



 export %checkin_post_sb% = crg_date.%print_time%(%checkin_post_standby%);

 export %stand_callout_at_start% = first(leg(duty), duty.%is_standby_callout% or duty.%is_airport_callout%);

 export %is_on_duty_illness_link% = first(leg(duty), leg.%is_on_leg_illness_link%);

  export %duty_starttime% =
  crg_date.%print_time%(duty.%start_hb%);
  export %duty_endtime% =
  crg_date.%print_time%(duty.%end_hb%);

  export %split_duty_starttime% =
  crg_date.%print_time%(duty_period.%start_hb%);

  export %split_duty_endt% =
  crg_date.%print_time%(duty.%end_hb%);

  export %split_duty_endtime% =
  crg_date.%print_time%(duty_period.%end_hb%);

  %crew_scheduled_hours_before_sick%(Abstime date) =
   rescheduling.%period_inf_prev_duty_time%(date, date + 24:00);
                               
 export %temporary_crew_hours_per_calendar_day%(Abstime date) = 
   salary_overtime.%temp_crew_hours_per_day%(date);
 
 export %temporary_crew_hours_for_day%(AbsTime date) =
   salary_overtime.%temporary_crew_hours_in_period%(crew.%utc_time%(date), crew.%utc_time%(date+24:00));
 
 /* Salary code DK: 329 */
 export %ill_temporary_crew_hours% = salary_overtime.%ill_temporary_crew_hours%;
  
 /* Illness temp crew report SKS */
 export %ill_temp_duty_time_num_days% = trip.%days%;
 export %ill_temp_duty_time_day%(Int dayIndex) = salary_overtime.%ill_temp_duty_time_day%(dayIndex);
 
 /* Values that need to be calculated in Python */
 
 export %overtime_7x24_fwd_ot% = 
   if %cabin_crew% and %is_SKD% 
   then salary_overtime.%overtime_wop_7x24_ot%
   else salary_overtime.%overtime_rolling_7x24_fwd_ot%;
 /* the next 3 variables are the same for both cases */  
 export %overtime_7x24_fwd_start% = salary_overtime.%overtime_rolling_7x24_fwd_start%;
 export %overtime_7x24_fwd_end% = salary_overtime.%overtime_rolling_7x24_fwd_end%;
 export %overtime_7x24_fwd_duty% = salary_overtime.%overtime_rolling_7x24_fwd_duty%;
 
 export %overtime_7x24_bwd_ot% =
   if %cabin_crew% and %is_SKD% 
   then void_reltime
   else salary_overtime.%overtime_rolling_7x24_bwd_ot%;
 export %overtime_7x24_bwd_start% = salary_overtime.%overtime_rolling_7x24_bwd_start%;
 export %overtime_7x24_bwd_end% = salary_overtime.%overtime_rolling_7x24_bwd_end%;
 export %overtime_7x24_bwd_duty% = salary_overtime.%overtime_rolling_7x24_bwd_duty%;
 
 export %overtime_1x24_fwd_ot% = salary_overtime.%overtime_1x24_fwd_ot%;
 export %overtime_1x24_fwd_start% = salary_overtime.%overtime_1x24_fwd_start%;
 export %overtime_1x24_fwd_end% = salary_overtime.%overtime_1x24_fwd_end%;
 export %overtime_1x24_fwd_duty% = salary_overtime.%overtime_1x24_fwd_duty%;
 
 export %overtime_1x24_bwd_ot% = salary_overtime.%overtime_1x24_bwd_ot%;
 export %overtime_1x24_bwd_start% = salary_overtime.%overtime_1x24_bwd_start%;
 export %overtime_1x24_bwd_end% = salary_overtime.%overtime_1x24_bwd_end%;
 export %overtime_1x24_bwd_duty% = salary_overtime.%overtime_1x24_bwd_duty%;
 
 export %overtime_dutypass_ot% = salary_overtime.%overtime_dutypass_ot%;
 export %overtime_dutypass_start% = salary_overtime.%overtime_dutypass_start%;
 export %overtime_dutypass_end% = salary_overtime.%overtime_dutypass_end%;
 export %overtime_dutypass_duty% = salary_overtime.%overtime_dutypass_duty%;
 
 export %overtime_late_checkout_ot% = 
   if %4exng_cc_ot_valid% and not salary_overtime.%disable_overtime_before_freeday_SKD_SKN_CC% then
     default(salary_overtime.%overtime_before_freeday_ot%,
             salary_overtime.%overtime_before_free_weekend_ot%)
   else if not %flight_crew% and not salary_overtime.%disable_overtime_before_freeday_SKD_SKN_CC% then
     default(salary_overtime.%overtime_before_freeday_ot%,
             default(salary_overtime.%overtime_late_checkout_rescheduling_ot%,
                     salary_overtime.%overtime_before_free_weekend_ot%))
   else
      0:00;
 /* the next 2 variables are the same for both cases */
 export %overtime_late_checkout_start% = salary_overtime.%overtime_before_freeday_start%;
 export %overtime_late_checkout_end% = salary_overtime.%overtime_before_freeday_end%;
 export %overtime_late_checkout_duty% = 
   if not void(salary_overtime.%overtime_before_freeday_ot%) then
     salary_overtime.%overtime_before_freeday_duty%
   else
     if not void(salary_overtime.%overtime_late_checkout_rescheduling_ot%) and not %flight_crew% then
       salary_overtime.%overtime_late_checkout_rescheduling_duty%
     else
       if not void(salary_overtime.%overtime_before_free_weekend_ot%) then
         salary_overtime.%overtime_before_free_weekend_duty%
       else
         0:00;
 
 export %overtime_month_ot% = salary_overtime.%overtime_calendar_month_ot%;
 
 /* the next 2 variables are the same for both cases */
 export %overtime_month_start% = salary_overtime.%overtime_calendar_month_start%;
 export %overtime_month_end% = salary_overtime.%overtime_calendar_month_end%;
 export %overtime_month_duty% = salary_overtime.%overtime_calendar_month_duty%;
   
 export %overtime_part_time_month_ot% = salary_overtime.%overtime_part_time_month_ot%;
 export %overtime_part_time_month_start% = salary_overtime.%overtime_calendar_month_start%;
 export %overtime_part_time_month_end% = salary_overtime.%overtime_calendar_month_end%;
 export %overtime_part_time_month_duty% = salary_overtime.%overtime_part_time_month_duty%;
 
 export %overtime_calendar_week_ot% = salary_overtime.%overtime_calendar_week_ot%;
 export %overtime_calendar_week_start% = salary_overtime.%overtime_calendar_week_start%;
 export %overtime_calendar_week_end% = salary_overtime.%overtime_calendar_week_end%;
 export %overtime_calendar_week_duty% = salary_overtime.%overtime_calendar_week_duty%;
 
 /*export %overtime_7_calendar_days_ot% = salary_overtime.%overtime_7_calendar_days_ot%;*/
 export %overtime_7_calendar_days_start% = salary_overtime.%overtime_7_calendar_days_start%;
 export %overtime_7_calendar_days_end% = salary_overtime.%overtime_7_calendar_days_end%;
 
 %_7_Calendar_days_bwd% =  round_down(duty.%end_utc%, 24:00)-6*24:00;
 %_7_Calendar_days_fwd% = round_up(duty.%start_UTC% + 6*24:00, 24:00) - 0:01;
 %_any_overtime_in_7_Calendar_days_fwd%(reltime current_ot) =
   let stop = %_7_Calendar_days_fwd%;
   any(duty(chain), salary_overtime.%overtime_7_calendar_days_ot% > current_ot)
   from (current) forwards
   while (duty.%start_UTC% < stop);
 
 %_any_overtime_in_7_Calendar_days_bwd%(reltime current_ot) =
   let stop = %_7_Calendar_days_bwd%;
   any(duty(chain), salary_overtime.%overtime_7_calendar_days_ot% > current_ot)
   from (current) backwards
   while (duty.%start_UTC% > stop);

  %_any_overtime_in_7_Calendar_45_50_days_fwd%(reltime current_ot) =
   let stop = %_7_Calendar_days_fwd%;
   any(duty(chain), salary_overtime.%overtime_7_calendar_days_ot_45_50_svs% > current_ot)
   from (current) forwards
   while (duty.%start_UTC% < stop);
 
 %_any_overtime_in_7_Calendar_45_50_days_bwd%(reltime current_ot) =
   let stop = %_7_Calendar_days_bwd%;
   any(duty(chain), salary_overtime.%overtime_7_calendar_days_ot_45_50_svs% > current_ot)
   from (current) backwards
   while (duty.%start_UTC% > stop);

  %_any_overtime_in_7_Calendar_50_days_fwd%(reltime current_ot) =
   let stop = %_7_Calendar_days_fwd%;
   any(duty(chain), salary_overtime.%overtime_7_calendar_days_ot_50_svs% > current_ot)
   from (current) forwards
   while (duty.%start_UTC% < stop);
 
 %_any_overtime_in_7_Calendar_50_days_bwd%(reltime current_ot) =
   let stop = %_7_Calendar_days_bwd%;
   any(duty(chain), salary_overtime.%overtime_7_calendar_days_ot_50_svs% > current_ot)
   from (current) backwards
   while (duty.%start_UTC% > stop);
 
 export %overtime_7_calendar_days_ot% = 
    if (%_any_overtime_in_7_Calendar_days_fwd%(default(salary_overtime.%overtime_7_calendar_days_ot%, 0:00)) or
      %_any_overtime_in_7_Calendar_days_bwd%(default(salary_overtime.%overtime_7_calendar_days_ot%, 0:00))) then
    void_reltime
  else
    salary_overtime.%overtime_7_calendar_days_ot%;

 export %overtime_7_calendar_days_ot_45_50_svs% = 
    if (%_any_overtime_in_7_Calendar_45_50_days_fwd%(default(salary_overtime.%overtime_7_calendar_days_ot_45_50_svs%, 0:00)) or
      %_any_overtime_in_7_Calendar_45_50_days_bwd%(default(salary_overtime.%overtime_7_calendar_days_ot_45_50_svs%, 0:00))) then
    void_reltime
  else
    salary_overtime.%overtime_7_calendar_days_ot_45_50_svs%;

  export %overtime_7_calendar_days_ot_50_svs% = 
    if (%_any_overtime_in_7_Calendar_50_days_fwd%(default(salary_overtime.%overtime_7_calendar_days_ot_50_svs%, 0:00)) or
      %_any_overtime_in_7_Calendar_50_days_bwd%(default(salary_overtime.%overtime_7_calendar_days_ot_50_svs%, 0:00))) then
    void_reltime
  else
    salary_overtime.%overtime_7_calendar_days_ot_50_svs%;
 
 
 %_any_duty_with_overtime_in_7x24_fwd%(reltime current_ot) =
   let stop = %_7_Calendar_days_fwd%;
   any(duty(chain), salary_overtime.%overtime_7_calendar_days_duty% > current_ot)
   from (current) forwards
   while (duty.%start_UTC% < stop);
 
 %_any_duty_with_overtime_in_7x24_bwd%(reltime current_ot) =
   let stop = %_7_Calendar_days_bwd%;
   any(duty(chain), salary_overtime.%overtime_7_calendar_days_duty% > current_ot)
   from (current) backwards
   while (duty.%start_UTC% > stop);
 
 export %overtime_7_calendar_days_duty% =
  if (%_any_duty_with_overtime_in_7x24_fwd%(default(salary_overtime.%overtime_7_calendar_days_duty%, 0:00)) or
      %_any_duty_with_overtime_in_7x24_bwd%(default(salary_overtime.%overtime_7_calendar_days_duty%, 0:00))) then
    void_reltime
  else
    salary_overtime.%overtime_7_calendar_days_duty%;
 
 /* Mertid and overtime for part_time cabin crew for 1 and 3 month periods. */
 export %mertid_part_time_cc_one_month% = salary_overtime.%mertid_part_time_cc_one_month%;
 export %mertid_part_time_cc_one_month_start% = salary_overtime.%mertid_part_time_cc_one_month_start%;
 export %mertid_part_time_cc_one_month_end% = salary_overtime.%mertid_part_time_cc_one_month_end%;
 export %mertid_part_time_cc_one_month_duty% = salary_overtime.%mertid_part_time_cc_one_month_duty%;
 
 export %mertid_part_time_cc_three_months% = salary_overtime.%mertid_part_time_cc_three_months%;
 export %mertid_part_time_cc_three_months_start% = salary_overtime.%mertid_part_time_cc_three_months_start%;
 export %mertid_part_time_cc_three_months_end% = salary_overtime.%mertid_part_time_cc_three_months_end%;
 export %mertid_part_time_cc_three_months_duty% = salary_overtime.%mertid_part_time_cc_three_months_duty%;
 
 export %overtime_part_time_cc_one_month% = salary_overtime.%overtime_part_time_cc_one_month%;
 export %overtime_part_time_cc_one_month_start% = salary_overtime.%overtime_part_time_cc_one_month_start%;
 export %overtime_part_time_cc_one_month_end% = salary_overtime.%overtime_part_time_cc_one_month_end%;
 export %overtime_part_time_cc_one_month_duty% = salary_overtime.%overtime_part_time_cc_one_month_duty%;
 
 export %overtime_part_time_cc_three_months% = salary_overtime.%overtime_part_time_cc_three_months%;
 export %overtime_part_time_cc_three_months_start% = salary_overtime.%overtime_part_time_cc_three_months_start%;
 export %overtime_part_time_cc_three_months_end% = salary_overtime.%overtime_part_time_cc_three_months_end%;
 export %overtime_part_time_cc_three_months_duty% = salary_overtime.%overtime_part_time_cc_three_months_duty%;
 
 /* Help variable for salary run overtime to decide whether or not to include a certain extartid. */
 %is_valid_extartid%(String extartid, AbsTime date) = 
   not void(salary.%salary_system_article_id%(extartid,date));
 
 
 /* 
    #### SKCMS-2114
    #### SKS CC
    Normal case the actual performed or scheduled duty time is reported.
    In cases where activities don't have hours in CMS (VA, VA1, F7 or BL*) 
    we report time as 1/5 of a weeks work factored by employment rate (see no_hrs_table)
    
     Example:
       Crew employment rate 100%
       
       Day 1 12,5 hr workday. 
       Actual duty time is reported i.e 12:30 hrs
       
       Day 2 Vacation
       1/5 of a weeks work factored by employment rate 
       is reported i.e 7:38 hrs
  */ 
 export %crew_calculated_duty_hours%(Abstime date) =
   if %_invalid_employment_for_calculated_hrs_at_date%(date) or not crew.%has_agmt_group_sks_cc% then
     0:00
   else
     %_calculated_hours%(date);
 
 /* Either no employment at date */
 %_invalid_employment_for_calculated_hrs_at_date%(Abstime date) =
   not crew.%crew_has_valid_employment_at_date%(date); 
 
 
 %_calculated_hours%(Abstime date) =
     let hours =
                 /* Previous informed duty was VA but reported ill (IL/IL4/(IL7))*/
                 if (%has_ill_in_hb_interval%(date, date + 24:00) or %has_il4_in_hb_interval%(date, date + 24:00)) and
                    %has_inf_VA_in_hb_interval%(date, date + 24:00) then
                    %no_hrs_calculated_time%("VA", date)
                 /* Previous informed duty was BL but reported ill (IL/IL4/(IL7))*/
                 else if (%has_ill_in_hb_interval%(date, date + 24:00) or %has_il4_in_hb_interval%(date, date + 24:00)) and
                    %has_inf_BL_in_hb_interval%(date, date + 24:00) then
                     %no_hrs_calculated_time%("BL", date)
                 /* IL7, reports missed work */
                 else if %has_il7_in_hb_interval%(date, date + 24:00) then
                     rescheduling.%period_inf_prev_duty_time%(date, date + 24:00) - accumulators.%duty_time_in_interval%(date, date + 24:00)
                 /* IL, report prev informed work */
                 else if %has_ill_in_hb_interval%(date, date + 24:00) then
                     rescheduling.%period_inf_prev_duty_time%(date, date + 24:00)
                 /* No specific exception, report actual worked time */
                 else
                     accumulators.%duty_time_in_interval%(date, date + 24:00);
 
     /* For vacation/blank day a standard time should be reported, VA/BL can not exist on same day as duty/IL */
     accumulators.%vacation_day%(date) * %no_hrs_calculated_time%("VA", date) + accumulators.%blank_day%(date) * %no_hrs_calculated_time%("BL", date)
     + hours;
 
 %contract_factor_at_date%(Abstime date) =
   crew_contract.%crew_contract_part_time_factor_at_date%(date);
 
 /* 
    Represents how many hours should be reported if 
    no hours are counted on activity (VA, VA1, F7, BL*)
 */
 table no_hrs_table(String activity, Abstime date) =
   activity, %contract_factor_at_date%(date)
                         -> %no_hrs_calculated_time%;
   "BL", 100 -> 7:38;
   "BL", 80  -> 6:06;
   "BL", 75  -> 5:43;
   "BL", 60  -> 4:35;
   "BL", 50  -> 3:49;
   "VA", 100 -> 5:27;
   "VA", 80  -> 4:22;
   "VA", 75  -> 4:05;
   "VA", 60  -> 3:16;
   "VA", 50  -> 2:44;
   - , -  -> 0:00;
 end 
 /* ### End calculated hours */
 
 export %crew_budgeted_hours%(Abstime date) =
   if crew.%is_temporary_at_date%(date) then
     %temp_crew_budgeted_hours%(date)
   else
     8:00;
 
 export %crew_scheduled_hours%(Abstime date) =
   if not crew.%crew_has_valid_employment_at_date%(date) then
     0:00
   else if crew.%is_temporary_at_date%(date) then
     %temp_crew_scheduled_hours%(date)
   else
     8:00;
 
 export %crew_scheduled_hours_no_rounding%(Abstime date) =
   if not crew.%crew_has_valid_employment_at_date%(date) then
     0:00
   else if crew.%is_temporary_at_date%(date) then
     %temp_crew_scheduled_hours_no_rounding%(date)
   else
     8:00;
 
 export %temp_crew_ill_hours%(Abstime date) =
   let ill_hours = salary_overtime.%ill_temp_duty_time_date%(date);
 
   if %temp_crew_was_ill_all_day%(date) then
     nmax(ill_hours, 4:00)
   else
     ill_hours;
 
 %temp_crew_was_ill_all_day%(Abstime st) =
   let sch_hours = rescheduling.%dt_inf_prev_duty_time%(st),
       ill_hours = salary_overtime.%ill_temp_duty_time_date%(st);
   (ill_hours > 0:00) and (ill_hours = sch_hours);
 
 
 %temp_crew_budgeted_hours%(Abstime date) =
   let act_hours = salary_overtime.%temporary_crew_hours_in_period%(crew.%utc_time%(date), crew.%utc_time%(date+24:00)),
       sch_hours = %temp_crew_scheduled_hours%(date);
 
   if act_hours >= sch_hours then /* Crew was not absent during the day */
     act_hours
   else /* Crew was absent for the whole or part of the day */
     sch_hours;
 
 /* This can probably be removed after SKCMS-2114/2118 has been released */
 %has_short_ill_in_hb_interval%(Abstime st, Abstime et) =
   any(leg(roster), overlap(leg.%start_hb%, leg.%end_hb%, st, et) > 0:00 and
     (leg.%code% = "IL" or leg.%code% = "IL7"));
 
 /* Replaces %has_short_ill_in_hb_interval% as IL and IL7 should be treated differently hence forth */
 %has_ill_in_hb_interval%(Abstime st, Abstime et) =
   any(leg(roster), overlap(leg.%start_hb%, leg.%end_hb%, st, et) > 0:00 and
     leg.%code% = "IL");
 
 %has_il7_in_hb_interval%(Abstime st, Abstime et) =
   any(leg(roster), overlap(leg.%start_hb%, leg.%end_hb%, st, et) > 0:00 and
     leg.%code% = "IL7");
 
 %has_bl_in_hb_interval%(Abstime st, Abstime et) =
   any(leg(roster), overlap(leg.%start_hb%, leg.%end_hb%, st, et) > 0:00 and
     leg.%code% = "BL");
 /* --------------- */
 
 set unfit_flight_codes = "UF", "UF1", "UF2", "UFO", "UFH", "UFP", "UFE";
 %has_uf_star_in_hb_interval%(Abstime st, Abstime et) =
   any(leg(roster), overlap(leg.%start_hb%, leg.%end_hb%, st, et) > 0:00 and
     leg.%code% in unfit_flight_codes);
 
 %has_il4_in_hb_interval%(Abstime st, Abstime et) =
   any(leg(roster), overlap(leg.%start_hb%, leg.%end_hb%, st, et) > 0:00 and
     leg.%code% = "IL4");
 
 %has_inf_VA_in_hb_interval%(Abstime st, Abstime et) =
   any(leg(roster), overlap(leg.%start_hb%, leg.%end_hb%, st, et) > 0:00 and
     rescheduling.%duty_inf_vacation%);
 
 %has_inf_BL_in_hb_interval%(Abstime st, Abstime et) =
   any(leg(roster), overlap(leg.%start_hb%, leg.%end_hb%, st, et) > 0:00 and
     rescheduling.%duty_inf_hist_blank_day%);
 
 %temp_crew_scheduled_hours%(Abstime date) =
   let hours = if %has_short_ill_in_hb_interval%(date, date + 24:00) then
     rescheduling.%period_inf_prev_duty_time%(date, date + 24:00)
   else rescheduling.%period_inf_duty_time%(date, date + 24:00);
   if not crew.%crew_has_valid_employment_at_date%(date) then
     0:00
   else if hours > 0:00 and hours < 4:00 then
     4:00
   else
     hours;
 
 %temp_crew_scheduled_hours_no_rounding%(Abstime date) =
   let hours = if %has_short_ill_in_hb_interval%(date, date + 24:00) then
     rescheduling.%period_inf_prev_duty_time%(date, date + 24:00)
   else accumulators.%duty_time_in_interval%(date, date + 24:00);
   if not crew.%crew_has_valid_employment_at_date%(date) then
     0:00
   else
     hours;
 
 /* Included for reference: calculation made with temporary crew hours
 export %crew_budgeted_hours%(Abstime date) =
   if crew.%is_temporary_at_date%(date) then
     salary_overtime.%temporary_crew_hours_in_period%(crew.%utc_time%(date), crew.%utc_time%(date+24:00))
   else
     8:00;
 */
 
 /* Included for reference
 export %crew_budgeted_hours%(Abstime date) =
   if crew.%is_temporary_at_date%(date) then
     roster.%duty_time_in_period_scheduled%(crew.%utc_time%(date), crew.%utc_time%(date+24:00), fundamental.%night_upg%, duty.union)
   else
     8:00;
 */
 
 %sum_OT_FD_units% =
     salary_overtime.%sum_OT_FD_units%;
 
 %sum_OT_FD_netto% =
     salary_overtime.%sum_OT_FD_netto%;
 
 /* "contributors */
 %OT_FD_time% =
     salary_overtime.%OT_FD_time%;
 %OT_FD_units% =
     salary_overtime.%OT_FD_units%;
 %OT_FD_F3_balance% =
     salary_overtime.%OT_FD_F3_balance%;
 
 %OT_units_SVS% =
     salary_overtime.%OT_units_SVS%;


 %OT_FD_F3_source_str% =
     salary_overtime.%OT_FD_F3_source_str%;
 
 
 %QA_FD_Fxx_balance% =
     salary_overtime.%QA_FD_Fxx_balance%;
 
 %bought_FD_F15_source_str% =
     salary_overtime.%bought_FD_F15_source_str%;
 %bought_FD_F16_source_str% =
     salary_overtime.%bought_FD_F16_source_str%;
 
 %sum_bought_comp_days_QA_FD% =
     salary_overtime.%sum_bought_comp_days_QA_FD%;
 
 %is_bought_day% =
     salary_overtime.%is_bought_day%;
 
 %bought_comp_day_QA_FD_netto% =
     salary_overtime.%bought_comp_day_QA_FD_netto%;
 
 %sum_bought_comp_days_QA_FD_netto% =
     salary_overtime.%sum_bought_comp_days_QA_FD_netto%;
 /* eof */
 