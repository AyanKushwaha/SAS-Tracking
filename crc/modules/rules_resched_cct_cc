/* -*- crc -*-
 * 
 *
 * Purpose:
 *
 * Created by:
 *   Stefan Hansson, 19-Jun-2007
 *
 * Major changes:
 *
 */

module rules_resched_cct_cc inherits rules_resched_cct_mainline

import bought_days;
import crew;
import levels;
import oma16;
import duty_period;
import trip;
import rescheduling;
import rule_exceptions;
import roster;
import checkinout;
import system_db_parameters;

/*******************************************************************************
* NOTIFICATION DEADLINE
*******************************************************************************/

redefine %trip_notification_deadline_CC% =
  nmin(
       default(%trip_notification_deadline_R316%, 31Dec2099),
       default(%trip_notification_deadline_resched_bl%,31Dec2099));
  
/*******************************************************************************
* RULES
*******************************************************************************/

/****************************************************************
 * Section 1: Standby-duty rules
 *
 * These rules are only dependent on the current roster
 ***************************************************************/

export rule resched_R242_CC =
  valid not (crew.%is_SKD% and crew.%is_temporary_trip_start%) and
        not %trip_inf_is_standby_at_checkin% and
        not %trip_inf_is_first_in_wop%;
    
  rescheduling.%trip_inf_checkin_diff% >= -2:00;
  
  startdate = trip.%start_UTC%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = trip.%failobject_start%;
  failtext(Reltime value, Reltime limit) =
    rules.%failtext_rel%("Coll: C/I >2h earlier than informed",value,limit);    
  remark "(CCT) Resched: Check-in must be < 2 hours earlier than informed";
end

rule resched_R243_CC =
  valid not (crew.%is_SKD% and crew.%is_temporary_trip_start%) 
        and %trip_inf_is_first_in_wop%
        and %trip_has_not_started%;

  rescheduling.%trip_inf_checkin_diff% >= 0:00;

  startdate = trip.%start_UTC%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = trip.%failobject_start%;
  failtext rules.%failtext_abs%("Coll: C/I after T/O earlier than informed C/I",
                                rescheduling.%trip_checkin_hb%,
                                rescheduling.%trip_inf_checkin%);
  remark "(CCT) Resched: Check-in after time-off must not be earlier than informed";
end

export rule resched_R246_CC =
  valid not (crew.%is_SKD% and crew.%is_temporary_trip_start%) and
    rescheduling.%trip_is_short_haul% and
    not %trip_inf_is_standby_at_checkout% and
    not rescheduling.%trip_inf_hist_blank_day% and
    not %trip_inf_is_last_in_wop_with_co%;

  rescheduling.%trip_inf_checkout_diff% <= 2:00;

  startdate = trip.%start_UTC%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = %resched_R246_CCSH_failobject%;
  failtext(Reltime value, Reltime limit) =
    rules.%failtext_rel%("Coll: C/O >2h later than informed C/O", value, limit);
  remark "(CCT) Resched: Check-out must not be >2 hours after informed";
end

%resched_R246_CCSH_failobject% = 
  first(leg(trip),leg.%failobject_departure%) where
    (leg.%co_end_scheduled_hb% > rescheduling.%trip_inf_checkout% + 2:00);


                                  
/*
** 4ExNG CC: 6.4.3 Blank day
*/

/*
** Rule:
**   Check rescheduled blank day informed before limit for each agmt group
**
** Description:
**   Rescheduled blank day must must be performed no later than 1800 on the 
**   previous production day for CC SKS and SKD. 
**   Before 1600 the calendar day before the BL for CC SKN.
**
** Agreement:
**   4ExNG CC: 6.4.3.1
**   K22 CC SKN - SKCMS-3232
*/

rule resched_bl_deadline_cc =
    valid rule_exceptions.%rule_on%(trip.%start_UTC%)
        and %resched_bl_deadline_valid%;

  %resched_bl_deadline_inform_in_time%;

  startdate = trip.%start_UTC%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_utc%,%duty_lh_region%));
  failobject = trip.%failobject_start%;
  failtext  concat("Coll: Resched of BL-day after ", format_time(%resched_bl_deadline_inform_limit%, "%02d%b%y %02H%02M"));
  remark "(CCT) Resched: BL-day resched must be informed before inform limit",
  planner "The rule checks that rescheduling of BL-day is informed no later than"
          "the limits set in etable property for entries bl_day_resched_limit_cc_XXX.";
end

%resched_bl_deadline_valid% =
  crew.%k4exng_cc_sp5_1_valid%(trip.%start_day%)
  and trip.%is_on_duty% and
  not crew.%is_leased_trip_start% 
  and %trip_is_rescheduled_blank_day%
  and not (crew.%is_SKD% and crew.%is_temporary_trip_start%)
  and not first(duty(trip), standby.%duty_is_airport_callout%)
  and not trip.%is_illness%
  and not crew.%is_leased_trip_start%;

%resched_bl_deadline_inform_in_time% =
  %now_hb% <= %resched_bl_deadline_inform_limit%;

%trip_notification_deadline_resched_bl% =
  if %resched_bl_valid% then
    %resched_bl_deadline_inform_limit%
  else
    void_abstime;

/*
**  Deadline for rescheduling BL-day for cc.
**
**  The external table "property" is used to control the bl inform limit.
**  entries for controlling the limits should be made as "bl_day_resched_limit_cc_XXX" 
**  where XXX is the crew region in capital letters, e.g. "bl_day_resched_limit_cc_SKN".
**  Columns value_int and value_rel needs to be set, these dictates how many calendar days previous the bl day that the 
**  limit should be set,resp. what time of day the inform limit is.
**  Column value_bool if set to true controls if the crew group instead have a time limit that should be on previous 
**  production day, no matter how far back in time that is (overrules value_int).
**
**  There is no control for if inform limit is previous production day's check-out time.
**  
*/

%resched_bl_deadline_inform_limit% =
   /*first see if there is a standby call-out to a multi day trip which covers an informed
     BL-day, the BL notification deadline is considered to be the standby call-out
     time if it is earlier than the normal BL- deadline*/
    if %trip_standby_callout_with_overnight_into_bl% then
        nmin(%trip_standby_callout_time_hb%,
        first(duty(trip),prev(duty(trip),duty.%start_day% + system_db_parameters.%bl_day_resched_limit_cc_time_p%(crew.%region%,trip.%start_utc%)))
        where (first(leg(duty),rescheduling.%leg_inf_hist_blank_day%)))
    /*second look if parameter is set true = then we should look for last prod day and use time limit there.
    If prev prod day is beyond what is found on roster we need a default value to get a warning, will not work if void values here*/
    else if system_db_parameters.%bl_day_resched_limit_cc_not_calendar_days_bool_p%(crew.%region%,trip.%start_utc%)
        then default(prev(trip(roster),last(duty(trip),duty.%start_day% + system_db_parameters.%bl_day_resched_limit_cc_time_p%(crew.%region%,trip.%start_utc%)))
        where ((not trip.%has_no_duty_time_contribution%) or trip.%is_blank_day%), %pp_start%)
    /*otherwise we look for x calendar past and set time limit there, no matter if it's a day with production or not*/
    else (rescheduling.%trip_inf_blank_start_hb% - 
    system_db_parameters.%bl_day_resched_limit_cc_calendar_days_before_p%(crew.%region%,trip.%start_utc%)*24:00 
    + system_db_parameters.%bl_day_resched_limit_cc_time_p%(crew.%region%,trip.%start_utc%));

%trip_standby_callout_time_hb% =
    first(leg(trip), leg.%end_hb%)
    where(leg.%is_standby_callout%);


/*
** Rule: R316
*/

%_R316_valid% =
  crew.%is_SKD%
  and crew.%is_temporary_trip_start%
  and not crew.%is_leased_trip_start%
  and rescheduling.%trip_is_rescheduled%
  and %trip_free_is_rescheduled_checkin%;

rule resched_R316_CC_SKD =
  valid %_R316_valid%
    and rule_exceptions.%rule_on%(trip.%start_UTC%);

  %_R316_inform_in_time%;
  
  startdate = trip.%start_UTC%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = trip.%failobject_start%;
  failtext "Coll: Schedule removed <12h before C/I"; 
  remark "(CCT) Resched: Schedule must not be removed <12h before check-in",
  planner "The rule checks that if a temporary CC's planned schedule is"
          " removed, it is done at least 12 hours before planned check-in."
          " The rule is only valid for CC CAU.";
end

%_R316_inform_in_time% =
  %trip_free_inf_checkin% >= %now_hb% + 12:00;
  
%trip_notification_deadline_R316% =
  if %_R316_valid%
  then %trip_free_inf_checkin% - 12:00
  else void_abstime;


/***********************************************/

/*
** Rule:
**   Check when rescheduled later LH check-out at homebase, that there is at
**   least 72:00 time-off.
**
** Description:
**   When LH check-out at homebase is rescheduled to be later than planned,
**   there must be at least 72:00 time-off.
**
** Agreement:
**   4ExNG CC 6.4.2.2
*/
rule resched_min_timeoff_after_lh_CC =
  valid crew.%k4exng_cc_sp5_1_valid%(trip.%start_day%) and
        %is_duty_inf_long_haul% and
        not crew.%is_temporary_trip_start% and
        not crew.%is_leased_trip_start% and
        %later_checkout_homebase% and
        not rescheduling.%wp_fat_legality_500_trip_inf_checkout_is_suspicious%;

  trip.%rest_time% >= %min_time_off_after_lh% - 
    rule_exceptions.%overshoot_rel%(trip.%start_UTC%);
    
  startdate = trip.%start_UTC%;
  severity = first(leg(trip), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
  failobject = trip.%failobject_start%;
  failtext(Reltime value, Reltime limit) =
    rules.%failtext_rel%("Coll: rescheduled time-off after LH",value,limit);
  remark "(CCT) Resched: time-off after LH",
  planner "The rule checks that when check-out at home base after LH is"
          " rescheduled, there is still at least 72:00 time-off.";
end
 
/**/

%min_time_off_after_lh% = 72:00;


/*  Reduction for Danish crew according to agreement CAU 2014-12-22.

    These two rules check that any duty that has been re-scheduled to sick of free day after schedule release,
    are still counted towards the max limit for assignable duty time in a one-week window or a calendar month.

    For the "rolling 7 days", the error rule should be triggered for the last leg on the last day.
    Therefore the rule simply checks a 7 day period backward in time.

    (Jira SKCMS-495)
*/


rule max_limit_reduction_CAU_7_day_window =
  valid
        (crew.%has_agmt_group_skd% or crew.%has_agmt_group_sks%) and
        %_has_hours_duty_reduction_7_days% and
        trip.%check_rules% and
        ( crew.%k4exng_cc_sp5_1_valid%(duty.%start_day%) or
          parameters.%k4exng_fc_sp5_1_valid%(duty.%start_day%)) and
        duty.%in_pp_extended% and
        (duty_period.%is_on_duty% or %_is_CAU_reducing%) and
        duty_period.%is_last_duty_period_on_start_day%;

  duty_time.%7_days_start_day% <=
    %max_duty_time_in_7_days% -
    ( if theme_prod.%is_flight_crew_training_7_days% then 0:00
      else theme_prod.%p_buffer_max_duty_time_7_days%) +
    rule_exceptions.%overshoot_rel_on_off%(duty.%start_UTC%) -
    %_hours_duty_reduction_7_days%;

    startdate = duty.%start_UTC%;
    severity = first(leg(duty), %severity_filter_int%(leg.%start_hb%,%duty_lh_region%));
    failobject = duty.%failobject_end%;
    failtext(Reltime value, Reltime limit) = %max_limit_reduction_CAU_7_day_window_failtext%(value, limit);
    remark "Coll: Union agreements to include rescheduled time in max limit calculation.",
    planner "The rule checks that duty that has been rescheduled to sick or free day after schedule release,"
            " are included in the sum of assignable hours. This rule monitors a 7 day 'floating window'. "
            "Ref. CAU and SCCA agreement of 2014-12-22 (Danish and Swedish cabin crew)";
end


%max_limit_reduction_CAU_7_day_window_failtext%(Reltime value, Reltime limit) =
  rules.%failtext_rel%(
    concat(
        "Coll: Reduced duty time in 7 days after release ",
        format_time(%_7_day_window_start%, "%d%b"), "-", format_time(%_7_day_window_end%, "%d%b"),
        ". "),
    value, limit);


/* ------------------------  */


export rule max_limit_reduction_CAU_calendar_month =
    valid
    (crew.%has_agmt_group_skd% or crew.%has_agmt_group_sks%)  and
    %_has_hours_duty_reduction_calendar_month% and
    (duty_period.%is_on_duty% or %_is_CAU_reducing%) and
    duty_period.%is_last_duty_period_on_start_day%;

    %_subq_duty_time_in_period%(%m_s%, %m_e%)
        <= %maximum_duty_hours_per_calendar_month% - %_hours_duty_reduction_calendar_month%;

    startdate = duty.%start_UTC%;
    failobject = duty.%failobject_start%;
    failtext(Reltime value, Reltime limit) = %max_limit_reduction_CAU__calendar_month_failtext%(value, limit);
    remark "Union agreements to include rescheduled time in max limit calculation",
    planner "The rule checks that duty that has been rescheduled to sick or free day after schedule release,"
            " are included in the sum of assignable hours. This rule monitors a calendar month. "
            "Ref. CAU and SCCA agreement of 2014-12-22 (Danish and Swedish cabin crew)";
end

%max_limit_reduction_CAU__calendar_month_failtext%(Reltime value, Reltime limit) =
  rules.%failtext_rel%(
    concat(
        "Reduced duty time in ", format_time(%m_s%, "%b"), " after release. "),
    value, limit);


/* ------------------------  */


%m_s% = round_down_month(trip.%start_UTC%);
%m_e% = round_up_month(trip.%start_UTC%) - 0:01;


%max_duty_time_in_7_days% = 47:30;
%maximum_duty_hours_per_calendar_month% = 166:00;


%_is_CAU_reducing% =
    first(leg(duty), leg.%code% in reducers);

set reducers = "IL", "IL7", "LA91", "LA92", "F22", "F3", "F7", "F7S", "VA", "VA1";

%_has_hours_duty_reduction_7_days% =
    %_hours_duty_reduction_7_days% > 0:00;

%_has_hours_duty_reduction_calendar_month% =
    %_hours_duty_reduction_calendar_month% > 0:00;

%_hours_duty_reduction_7_days% =
    %_hours_duty_reduction_period%(%_7_day_window_start%, %_7_day_window_end%);

%_7_day_window_start% = duty.%start_day% - 24:00 * 6;
%_7_day_window_end% = duty.%start_day% + 23:59;

%_hours_duty_reduction_calendar_month% =
    %_hours_duty_reduction_period%(%m_s%, %m_e%);


%_hours_duty_reduction_period%(Abstime start, Abstime stop) =
        let
            first_day_start = round_down(start, 24:00);
        default(
            sum(duty(chain), %_hours_duty_actual_reduction%(duty.%start_day%))
            where(
                duty.%start_day% >= first_day_start
                and duty.%start_day% <= stop
                and %_is_CAU_reducing%)
        , 0:00);

%_hours_duty_actual_reduction%(Abstime duty_start_day) =
    /* Is called if a duty contains a "reducer. " If so, then this function then fetches previous duty time,
       then reduces it by duty time which is still on the roster. */

    let red = rescheduling.%period_inf_prev_duty_time%(duty_start_day, duty_start_day + 24:00);
    if red > 0:00 then
        red - %_hours_duty_not_reduction_period%(duty_start_day, duty_start_day + 24:00)
    else
        0:00;


%_hours_duty_not_reduction_period%(Abstime start, Abstime stop) =
        let
            first_day_start = round_down(start, 24:00);
        default(
            sum(leg(chain), leg.%duty_end_hb% - leg.%duty_start_hb%)
            where(
                leg.%start_hb% >= first_day_start
                and leg.%start_hb% <= stop
                and leg.%is_on_duty%
                and not (leg.%code% in reducers)
                 )
        , 0:00);


%_subq_duty_time_in_period%(Abstime d1, Abstime d2) =
    oma16.%duty_time_in_interval_indust%(d1, d2);


/*
** End of file
*/
