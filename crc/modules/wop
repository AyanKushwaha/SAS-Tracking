/* -*- crc -*-
 *
 *
 *
 * Purpose:
 *   This file contains basic definitions for the areas defined under the section headline. Many of the
 *   definitions are used in the other level modules. This is to improve caching and to reuse variable
 *   names in a good way.
 *
 * Created by:
 *   Extracted from the Carmen Standard User, 07-Dec-2005
 *
 * Major changes:
 *
 */
root module wop
import time_utils;
import trip;
import duty;
import leg;
import levels;
import fundamental;
import task;
import base_calendar;


/*
** Basic definitions
*/

export %is_dummy% = first(trip(wop), trip.%is_dummy%);
export %is_on_duty% = any(trip(wop),trip.%is_on_duty%);
export %is_freeday% = first(trip(wop),trip.%is_freeday%);
export %is_rest% = first(trip(wop), trip.%is_rest%);
export %is_group_valid_freeday% = first(trip(wop),trip.%is_group_valid_freeday%);
export %is_group_valid_pt_freeday% = first(trip(wop),trip.%is_group_valid_pt_freeday%);
export %is_untouchable% = first(trip(wop),trip.%is_untouchable%);
export %is_off_duty% = first(trip(wop),trip.%is_off_duty%);
export %is_preassigned% = all(trip(wop),trip.%is_preassigned%);
export %is_locked% = all(trip(wop),trip.%is_locked%);
export %is_compensation_day% = all(trip(wop),trip.%is_compensation_day%);
export %is_bought_or_freeday% = all(trip(wop),trip.%is_bought% or
                                              trip.%is_freeday%);
export %is_on_duty_not_bought% = any(duty(wop),duty.%is_on_duty% and
                                               not duty.%is_bought%);
export %no_of_days% = (wop.%end_utc% - wop.%start_utc%)/24:00;
/*
** Long / Short haul
*/

/* Old implementation of %is_short_haul% with note:
**     NOTE: check this. export %is_short_haul% = %is_on_duty% and not %is_long_haul%;
**     export %is_short_haul% = %is_flight_duty% and not %is_long_haul%;
*/

/* NOTE: To cover for wops with short haul trip + BL/SB. Confirm this change... HenrikA 02Nov2006 */
export %is_short_haul% = any(trip(wop), trip.%is_short_haul%) and not %is_long_haul%;
export %is_long_haul% = any(trip(wop), trip.%is_long_haul%);
export %is_mixed_ac_types% = any(trip(wop), trip.%with_short_haul_ac_family%) and any(trip(wop), trip.%with_long_haul_ac%);

export %is_west_bound% = any(trip(wop), trip.%is_west_bound%);
export %is_east_bound% = any(trip(wop), trip.%is_east_bound%);

export %is_production% = all(trip(wop), trip.%is_production%);

export %has_production% = any(trip(wop), trip.%has_production%);
/*
** Tasks
*/
export %is_vacation% = first(trip(wop),trip.%is_vacation%);
export %is_meeting% = first(trip(wop), trip.%is_meeting%);
export %is_charter% = any(trip(wop),trip.%has_charter%);
export %is_standby% = all(trip(wop),trip.%is_standby%);
export %is_standby_line% = all(trip(wop),trip.%is_standby_line%);
export %is_standby_line_any% = any(trip(wop),trip.%is_standby_line%);
export %has_standby% = any(trip(wop),trip.%has_standby%);
export %has_airport_standby% = any(trip(wop),trip.%has_airport_standby%);
export %has_standby_line% = any(trip(wop), trip.%has_standby_line%);
/* For accumulator: accumulators_impl.%standby_lines_acc% */
export %has_cancellation_standby% = any(trip(wop), trip.%has_cancellation_standby%);
export %has_standby_line_not_bought_day% = any(trip(wop),trip.%is_standby_line_not_bought_day%);
export %has_scattered_standby% = any(trip(wop), trip.%has_scattered_standby_at_home%);
export %has_scattered_standby_at_any_location% = any(trip(wop), trip.%is_scattered_standby%);
export %has_standby_block% = any(trip(wop), trip.%is_standby_block%);
export %is_standby_block% = all(trip(wop), trip.%is_standby_block%);
export %has_single_day_standby% =
  wop.%standby_block_days% = 1 and
  not wop.%has_scattered_standby%;
export %has_short_standby_block% =
  %has_standby% and
  not %has_standby_line% and
  not %has_scattered_standby% and
  not %has_single_day_standby%;
export %is_blank_day% = all(trip(wop),trip.%is_blank_day%);
export %is_f0% = all(trip(wop), trip.%is_f0%);
export %is_F7S% = all(trip(wop), trip.%is_F7S%);
export %is_f36% = all(trip(wop), trip.%is_f36%);
export %is_ground_duty% = all(trip(wop), trip.%is_ground_duty%);
export %is_only_ground_duty% = all(trip(wop), trip.%is_only_ground_duty%);
export %has_ground_duty% = any(trip(wop), trip.%is_ground_duty%);
export %has_destination%(String station) = any(trip(wop), trip.%has_destination%(station));
export %has_FS% = any(trip(wop), trip.%is_FS%);
export %has_illness% = any(trip(wop), trip.%is_illness%);
export %is_illness% = all(trip(wop), trip.%is_illness%);
export %is_pact% = all(trip(wop), trip.%is_pact%);
export %has_blank_day_BL% = any(trip(wop),trip.%has_blank_day_BL%);

export %has_prev_illness%(Abstime a1) =
    any(trip(wop), trip.%is_illness%) where(trip.%start_utc% < a1);

export %has_prev_child_illness%(Abstime a1) =
    any(trip(wop), trip.%is_child_illness%) where(trip.%start_utc% < a1);

 /* CJ Flight Deck sign; (SKCMS-745) */
export %has_ac_employer_qa% = any(trip(wop),trip.%is_ac_employer_qa%);
export %is_qa_fd% = %has_ac_employer_qa% and fundamental.%flight_crew%;


export %has_ac_employer_svs% = any(trip(wop),trip.%is_ac_employer_svs%);
export %is_svs_fd% = %has_ac_employer_svs% and fundamental.%flight_crew%;

export %ends_with_standby% = last(leg(wop), leg.%is_standby%);
export %ends_with_ground_duty% = last(leg(wop), leg.%is_ground_duty%);
export %ends_with_simulator% = last(leg(wop),leg.%is_simulator%);
export %ends_with_blank% = last(leg(wop),leg.%is_blank_day%);
export %is_SH_LH% =
  any(leg(wop), leg.%is_short_haul% and leg.%is_active_flight%) and
  any(leg(wop), leg.%is_long_haul% and leg.%is_active_flight%);

/* Old comment: Activity groups definitions Joakim */
export %is_gnd% = all(trip(wop), trip.%is_gnd%);

export %in_long_course_period% =
  %is_ground_duty% and
  first(trip(wop), trip.%is_long_course_period%);

export %in_long_THSI_period% =
  %is_ground_duty% and
  first(trip(wop), trip.%is_long_THSI_period%);

export %is_course_office_duty% =
  %is_ground_duty% and
  all(trip(wop), trip.%is_course_office_duty%);


export %is_flight_duty% = any(trip(wop), trip.%has_only_flight_duty%);
export %has_flight_duty% = any(trip(wop), trip.%has_flight_duty%);
export %has_active_flight% = any(trip(wop), trip.%has_active_flight%);
export %has_active_long_haul% = any(trip(wop), trip.%has_active_long_haul%);
export %has_active_short_haul% = any(trip(wop), trip.%has_active_short_haul%);

/* NOTE: Use task.%group_code% for LA and illness definitions. */
export %is_loa% = first(leg(wop), task.%is_loa%(leg.%code%)); /*first(leg(wop), substr(task.%code%, 1, 2) = "LA");*/
export %is_la% = first(leg(wop), substr(task.%code%, 1, 2) = "LA");
export %is_ppf% = first(leg(wop), task.%is_ppf%(leg.%code%)); /*first(leg(wop), substr(task.%code%, 1, 2) = "LA");*/
export %is_pt_freeday% = first(leg(wop), task.%is_pt_freeday%(leg.%code%));
export %is_FS% = all(trip(wop), trip.%is_FS%);
export %is_FS1% = all(trip(wop), trip.%is_FS1%);

export %is_non_plannable% =
  %is_vacation% or
  %is_loa% or
  %has_IL_or_F31%;

export %has_IL_or_F31% =
  any(trip(wop), trip.%is_illness% or any(leg(trip), task.%code% = "F31"));

export %wop_IL_or_F31_days%(Abstime start, Abstime stop) =
  sum(trip(wop), trip.%days_in_period%(start, stop))
  where (trip.%is_illness% or any(leg(trip), task.%code% = "F31"));

/* All must be allowed, since a wop may consist of a
 * compensation day followed by flight duty, HenrikA 15may2007 */
export %is_allowed_on_free_weekend% =
  all(trip(wop), trip.%is_allowed_on_free_weekend%);

export %has_2_pilot_long_haul% = any(trip(wop), trip.%has_2_pilot_long_haul%);

export %in_pp%  =
  overlap(%start_hb%,%end_hb%,%pp_start%,%pp_end%) > 0:00;
export %touches_pp% =
  %end_hb% >= %pp_start% and %start_hb% <= %pp_end%;
export %in_pp_extended% =
  overlap(%start_hb%,%end_hb%,%pp_start%,%pp_end_extended%) > 0:00;
export %in_publ%  =
  overlap(%start_hb%,%end_hb%,%pp_start%,%publ_period_end%) > 0:00;
export %completely_in_pp%  =
  %start_hb% >= %pp_start% and
  %end_hb% <= %pp_end%;
export %starts_in_pp% =
  %start_hb% >= %pp_start% and %start_hb% < %pp_end%;
export %starts_in_pp_extended% =
  %start_hb% >= %pp_start% and %start_hb% < %pp_end_extended%;
export %starts_in_publ% =
  %start_hb% >= %pp_start% and %start_hb% < %publ_period_end%;
export %starts_in_period%(Abstime start_hb, Abstime stop_hb) =
  wop.%start_hb% >= start_hb and
  wop.%start_hb% < stop_hb;
export %ends_in_pp% =
  %end_hb% >= %pp_start% and %end_hb% < %pp_end%;
export %for_publish_in_pp% =
  all(leg(wop), leg.%published_wop_start% > %pp_start%);

export %no_days_btw_wops% =
  default(prev(wop(roster), wop.%end_day% + 24:00) = wop.%start_day%, false) and
  default(next(wop(roster), wop.%start_day% - 24:00) = wop.%end_day%, false);

/* AlertServer failobjects */
export %failobject_start% = first(trip(wop), trip.%failobject_start%);
export %failobject_end% = last(trip(wop), trip.%failobject_end%);

/*
** Wop time/days
*/

export %time% = %end_hb% - %start_hb%;
export %start_hb% = first(trip(wop),trip.%start_hb%);
export %start_UTC% = first(trip(wop),trip.%start_UTC%);
export %start_lt% = first(trip(wop),trip.%start_lt%);
export %start_day% = first(trip(wop),trip.%start_day%);
export %start_day_scheduled% = first(trip(wop),trip.%start_scheduled_day%);
export %start_od% = time_of_day(%start_hb%);
export %end_hb% = last(trip(wop),trip.%end_hb%);
export %end_UTC% = last(trip(wop),trip.%end_UTC%);
export %end_lt% = last(trip(wop),trip.%end_lt%);
export %end_day% = last(trip(wop),trip.%end_day%);
export %end_day_scheduled% = last(trip(wop),trip.%end_scheduled_day%);
export %end_od% = time_of_day(%end_hb%);
export %start_weekday% = time_of_week(%start_hb%)/24:00 + 1;
export %end_weekday% = time_of_week(%end_hb%)/24:00 + 1;
export %days% = (%end_day% - %start_day%) / 24:00 + 1;
export %days_scheduled% = (%end_day_scheduled% - %start_day_scheduled%) / 24:00 + 1;
export %start_station% = first(trip(wop), trip.%start_station%);

/* the start time for the first duty in wop, which is not matching duty_selection. Blank days regardes as empty */
export %first_duty_not_selected%(Int duty_selection, Abstime default_end) =
  let st = wop.%start_hb%;
  default(
    first(duty(wop), duty.%start_hb%)
        where (not duty.%duty_selected%(duty_selection,st) and not duty.%is_blank_day%)
  ,
    default_end
  );

/* the reltime in beginning of wop, not matching selection (or blank), duty level */
export %time_duty_not_selected%(Int duty_selection, Abstime default_end) =
  %first_duty_not_selected%(duty_selection,default_end) - wop.%start_day%;


/* number of whole days in beginning of wop, not matching selection (or blank), duty level */
export %days_duty_not_selected%(Int duty_selection, Abstime default_end) =
  %time_duty_not_selected%(duty_selection, default_end) / 24:00;

/* number of whole days in beginning of what that is or can be sh production , duty level*/
export %start_days_sh_possible% =
  %days_duty_not_selected%(duty.%duty_sel_sh_possible%, wop.%end_day%+24:00);

export %is_last_in_month_with_selection%(Int duty_selection) =
  any(duty(wop), duty.%is_last_in_month_with_selection%(duty_selection));


/*
** For 5-4 flex single freedays 'inside'
** working periods must count as production day.
*/
export %days_incl_single_freedays% =
  %days% +
  sum (wop(roster), %days%)
  from (next)
  while ((%is_on_duty% and
          %preceeded_by_single_freeday%) or
         %is_single_freeday%);

export %preceeded_by_single_freeday% =
  default(prev(wop(roster), wop.%is_single_freeday%), false);

/* a single physical offduty day */
export %is_single_freeday% =
  not %is_on_duty% and
  %days% = 1 and
  %no_days_btw_wops% and
  default(next(wop(roster), %is_on_duty%), false);

/*  free weekends  */
export %is_preceded_by_F4% =
  default(prev(wop(roster), %last_trip_is_F4%), false) and
  %start_day% - 24:00 = prev(wop(roster), %end_day%);

%last_trip_is_F4% = last(trip(wop), trip.%code% = "F4");

export %is_preceded_by_FW% =
  default(prev(wop(roster), %last_trip_is_FW%), false) and
  %start_day% - 24:00 = prev(wop(roster), %end_day%);

export %is_preceded_by_FS_Weekend% =
  default(prev(wop(roster), %last_trip_is_FS_weekend%),false) and
    %start_day%-24:00 = prev(wop(roster),%end_day%);



%last_trip_is_FW% = last(trip(wop), trip.%code% = "FW");
%last_trip_is_FS_weekend% = last(trip(wop),trip.%code%="FS" and base_calendar.%wd_from_abs%(trip.%end_hb%-0:01)=7);

export %is_preceded_by_fs1_Weekend% =
  default(prev(wop(roster), %ends_with_fs1_weekend%), false) and
    %start_day%-24:00 = prev(wop(roster),%end_day%);
%ends_with_fs1_weekend% = last(leg(wop), leg.%is_fs1% and
                                         base_calendar.%wd_from_abs%(leg.%end_hb%-0:01)=7 and
                                         %consecutive_fs1_bw%);
%consecutive_fs1_bw% = default(((prev(leg(roster), round_up(leg.%end_hb%, 24:00)) - leg.%start_date%) < 24:00) and
                               prev(leg(roster), leg.%is_fs1%),
                               false);

export %is_preceded_by_activity_allowed_on_weekend_fcsh% =
  default(prev(wop(roster),last(trip(wop),trip.%is_allowed_on_free_weekend_fcsh%)),
          false) and
  %start_day% - 24:00 = prev(wop(roster), %end_day%);

export %is_followed_by_F4% =
  default(next(wop(roster), %first_trip_is_F4%), false) and
  wop.%end_day% + 24:00 = next(wop(roster), wop.%start_day%);

%first_trip_is_F4% = first(trip(wop), trip.%code% = "F4");

export %is_followed_by_FW% =
  default(next(wop(roster), %first_trip_is_FW%), false) and
  round_up(wop.%end_hb%, 24:00) = next(wop(roster), wop.%start_day%);

export %is_followed_by_fs_weekend% =
  default(next(wop(roster),%first_trip_is_FS_weekend%),false) and
  round_up(wop.%end_hb%,24:00)=next(wop(roster),wop.%start_day%);


export %first_trip_is_FW% = first(trip(wop), trip.%code% = "FW");
%first_trip_is_FS_weekend% = first(trip(wop), trip.%code%="FS" and base_calendar.%wd_from_abs%(trip.%start_hb%+0:01)=6);


export %is_followed_by_fs1_weekend% =
  default(next(wop(roster),%starts_with_fs1_weekend%), false) and
  round_up(wop.%end_hb%,24:00)=next(wop(roster),wop.%start_day%);
%starts_with_fs1_weekend% = first(leg(wop), leg.%is_fs1% and
                                            base_calendar.%wd_from_abs%(leg.%start_hb%+0:01)=6 and
                                            %consecutive_fs1_fw%);
%consecutive_fs1_fw% = default(((next(leg(roster), leg.%start_date%) - round_up(leg.%end_hb%, 24:00)) < 24:00) and
                               next(leg(roster), leg.%is_fs1%),
                               false);


export %is_followed_by_activity_allowed_on_weekend_fcsh% =
  default(next(wop(roster),first(trip(wop),trip.%is_allowed_on_free_weekend_fcsh%)),
          false) and
  wop.%end_day% + 24:00 = next(wop(roster), wop.%start_day%);

export %is_followed_by_empty_days% =
  default(next(wop(roster),wop.%start_day%) - wop.%end_day% > 24:00,
          false);

export %is_preceded_by_wop_allowed_on_we% =
  default(prev(wop(roster), %is_allowed_on_free_weekend%) and
          wop.%start_day% - 24:00 = prev(wop(roster), wop.%end_day%), false);

export %is_followed_by_wop_allowed_on_we% =
  default(next(wop(roster), %is_allowed_on_free_weekend%) and
          wop.%end_day% + 24:00 = next(wop(roster), wop.%start_day%), false);

export %pp_days% = %days_in_period%(%pp_start%,%pp_end%);
export %publ_period_days% = %days_in_period%(%pp_start%,%publ_period_end%);

export %hole_1_start_hb% =
  default(
          first(trip(wop), trip.%end_hb%)
          where (next(trip(wop), trip.%start_day%) - trip.%end_day% > 24:00),
          1jan1986);

export %hole_1_date% =
  default(
          first(trip(wop), trip.%end_day% + 24:00)
          where (next(trip(wop), trip.%start_day%) - trip.%end_day% > 24:00),
          1jan1986);

export %hole_1_time% =
  default(
          first(trip(wop), trip.%end_hb%)
          where (next(trip(wop), trip.%start_day%) - trip.%end_day% > 24:00),
          1jan1986);

export %hole_2_date% =
  if %hole_1_date% = 1jan1986 then
    1jan1986
  else
    default(
            first(trip(wop), trip.%end_day% + 24:00)
            where (next(trip(wop), trip.%start_day%) - trip.%end_day% > 24:00
                   and
                   trip.%end_day% + 24:00 > %hole_1_date%),
            1jan1986);

/* Joakim temporary fix */
export %gnd_days% =
  default(sum(trip(wop),trip.%days%) where (trip.%is_gnd%),0);

/* Added 24:00 due to the subtraction in %end_day%, HenrikA 05oct2006 */
export %days_in_period%(Abstime PStart, Abstime PEnd) =
  if wop.%start_day% >= PStart and wop.%end_day% < PEnd then
    %days%
  else
    overlap(%start_day%, %end_day% + 24:00, PStart, PEnd) / 24:00;


export %days_in_period_scheduled%(Abstime PStart, Abstime PEnd) =
  if %start_day_scheduled% >= PStart and %end_day_scheduled% < PEnd then
    %days_scheduled%
  else
    overlap(%start_day_scheduled%, %end_day_scheduled% + 24:00, PStart, PEnd) / 24:00;

/* Variables wop_month_start/end is wop dependent,
 * to cover for Tracking where the pp can touch 2 months.
 * It returns the current month for the start hb time of the wop. */
export %start_month_start% = round_down_month(%start_hb% + 0:01);
export %start_month_end% = round_up_month(%start_hb% + 0:01);

export %end_month_start% = round_down_month(%end_hb% + 0:01);
export %end_month_end% = round_up_month(%end_hb% + 0:01);

export %month_days% = (%start_month_end% - %start_month_start%) / 24:00;

export %start_week_start% = round_down_week(wop.%start_hb% + 0:01);
export %start_week_end% = round_up_week(wop.%start_hb% + 0:01);

export %is_last_in_week% =
  let this = %start_week_end%;
  default(next(wop(roster), %start_week_end% > this) where (%is_on_duty%),
  true);

/* Add more attributes here, and create cache variables */
table wop_attribute(String attr) =
  attr -> %attribute%;
  "ShortHaul"    -> %is_short_haul%;
  "LongHaul"     -> %is_long_haul%;
  "BlankDay"     -> %is_blank_day%;
  "Standby"      -> %has_standby% and not %has_standby_line%;
  "StandbyLine"  -> %has_standby_line%;
  "ScatteredSBY" -> %has_scattered_standby%;
  "ScatteredSBYanyLocation" -> %has_scattered_standby_at_any_location%;
  "OnDuty"       -> %is_on_duty%;
end

export %is_last_short_haul_in_month% = %_is_last_in_month%("ShortHaul");
export %is_last_long_haul_in_month% = %_is_last_in_month%("LongHaul");
export %is_last_blank_day_in_month% = %_is_last_in_month%("BlankDay");
export %is_last_standby_in_month% = %_is_last_in_month%("Standby");
export %is_last_standby_line_in_month% = %_is_last_in_month%("StandbyLine");
export %is_last_scattered_standby_in_month% = %_is_last_in_month%("ScatteredSBY");
export %is_last_scattered_standby_in_month_sks% = %_is_last_in_month%("ScatteredSBYanyLocation");
export %is_last_on_duty_in_month% = %_is_last_in_month%("OnDuty");
export %is_last_on_duty_in_pp_start_month% = %_is_last_in_pp_start_month%("OnDuty");

export %is_last_in_month% =
  default(next(wop(roster), %start_month_start%) > %start_month_start%, true);

export %is_last_on_duty_in_quarter% = %_is_last_in_month%("OnDuty") and fundamental.%is_last_month_in_quarter%(wop.%start_hb%);



%_is_last_in_month%(String attr) =
  %attribute%(attr) and %in_pp% and
  default(next(wop(roster), %start_month_start%) where (%attribute%(attr))
          > %start_month_start%,
  true);

%_is_last_in_pp_start_month%(String attr) =
  %attribute%(attr) and %in_pp% and
  %start_month_start% = %pp_start% and
  default(next(wop(roster), %start_month_start%) where (%attribute%(attr))
          > %pp_start%,
  true);

/*
** To support the assignment of carry-out freedays
*/
export %should_have_carry_out_freedays% =
  %is_last_on_duty_in_month% and
  (wop.%is_long_haul% or
   (wop.%days% = 5 and last(trip(wop), trip.%starts_in_pp%)));


/*
** Check in/out
*/
export %check_out% = last(trip(wop), trip.%check_out%);
export %check_in% = first(trip(wop), trip.%check_in%);

export %has_delayed_check_out% = any(trip(wop), trip.%has_delayed_check_out%);

/*
** Rest after wop
*/

/* Rest time after wop */
export %rest_time% = %rest_end_utc% - %rest_start_utc%;

/** Number of days rest after wop **/
export %rest_days% = (%rest_end_day%-%rest_start_day%) / 24:00;

/* Rest starts at end of wop */
export %rest_start_utc% = last(trip(wop), trip.%rest_start_utc%);
export %rest_start_day% = last(trip(wop),trip.%rest_start_day%);
export %rest_start_day_utc% = %hb2utc%(%rest_start_day%);

/* Rest ends at start of next non rest trip */
export %rest_end% =
  default(
          next(wop(roster),%rest_end_before%) where (not all(trip(wop), trip.%is_rest%)),
          31dec2035);
export %rest_end_before% = first(trip(wop),trip.%start_hb%) where (not trip.%is_rest%);

export %rest_end_utc% =
  next(wop(roster), %rest_end_before_utc%) where (not all(trip(wop), trip.%is_rest%));
export %rest_end_before_utc% = first(trip(wop), trip.%start_UTC%) where (not trip.%is_rest%);

export %rest_end_day% =
  default(next(wop(roster),%rest_end_day_before%) where (not all(trip(wop), trip.%is_rest%)),
          31dec2035);
export %rest_end_day_utc% = %hb2utc%(%rest_end_day%);
export %rest_end_day_before% = first(trip(wop),trip.%rest_end_day_before%) where (not trip.%is_rest%);



/* Used for Rostering rule set */
export %rest_starts_in_pp% =
  wop.%end_hb% >= %pp_start% and
  wop.%end_hb% <= %pp_end%;
export %rest_ends_in_pp% =
  %rest_end% >= %pp_start% and
  %rest_end% <= %pp_end%;
export %rest_is_in_pp% =
  %rest_starts_in_pp% and
  not void(%rest_end%) or
  %rest_ends_in_pp%;


export %freedays% = nmax((%freedays_end_day_incl_bought% - %_rest_start_day%) / 24:00, 0);
export %freedays_end_day% =
    default(%_freedays_end_day%, 1Jan2035);

%_freedays_end_day% =
  next(wop(roster), %trip_freeday_end_day%) where
   (not %is_freeday%);

export %freedays_end_day_incl_bought% =
  next(wop(roster), first(duty(wop), duty.%start_day%) where
       (not duty.%is_bought%))
  where (not %is_freeday% and
         not %is_bought%);

%trip_freeday_end_day% =
  first(trip(wop), round_down(trip.%start_hb%, 24:00)) where
    (not trip.%is_freeday%);


/* Sling freedays inside current month */
export %freedays_in_period%(abstime start, abstime stop) =
  (nmin(stop, default(%freedays_end_day%, stop)) -
   nmax(start, %rest_start_day%)) / 24:00;

%_rest_start_day% =
  last(duty(wop),round_up(duty.%end_hb% - 0:01, 24:00)) where
    (not duty.%is_bought%);

/*
** Blank days after wop
*/

/* NOTE: Actually empty days after wop. Needs to be redefined, HenrikA 06-Dec-2005. */
export %blank_days% =
  (%blank_end_day%-%rest_start_day%) / 24:00;
export %pp_blank_days% =
  (%pp_blank_end_day%-%pp_blank_start_day%) / 24:00;

%blank_end_day% = next(wop(roster),%rest_end_day_before%);
%pp_blank_start_day% = nmax(%rest_start_day%,%pp_start%);
%pp_blank_end_day% =
  default(nmin(nmax(%blank_end_day%, %pp_start%), %pp_end%), %pp_end%);

/*
** Duty time
*/

export %duty_time%(DutyCalculation dutycalc, Bool night_upg) =
  sum(trip(wop),trip.%duty_time%(dutycalc, night_upg));

export %duty_time_in_period%(Abstime a1, Abstime a2, Bool night_upg, DutyCalculation dutycalc) =
  if %end_utc% <= a1 or %start_utc% >= a2 then
    0:00
  else if %start_utc% >= a1 and %end_utc% <= a2 then
    %duty_time%(dutycalc, night_upg)
  else
    sum(trip(wop),trip.%duty_time_in_period%(a1,a2,night_upg, dutycalc));


export %duty_time_in_period_scheduled%(Abstime a1, Abstime a2, Bool night_upg, DutyCalculation dutycalc) =
  %duty_time_in_period%(a1, a2, night_upg, dutycalc);


/*
** Block time
*/

export %block_time% = sum(trip(wop),trip.%block_time%);

export %pp_block_time% =
  if not %in_pp% then
    0:00
  else if %completely_in_pp% then
    %block_time%
  else
    sum(trip(wop),trip.%pp_block_time%);

export %block_time_in_period%(Abstime a1, Abstime a2) =
  if %end_utc% <= a1 or %start_utc% >= a2 then
    0:00
  else if %start_utc% >= a1 and %end_utc% <= a2 then
    %block_time%
  else
    sum(trip(wop),trip.%block_time_in_period%(a1,a2));

export %block_time_in_period_caa%(Abstime a1, Abstime a2) =
  if %end_UTC% <= a1 or %start_UTC% >= a2 then
    0:00
  else if %start_UTC% >= a1 and %end_UTC% <= a2 then
    %block_time%
  else
    sum(trip(wop),trip.%block_time_in_period_caa%(a1,a2));

export %block_time_of_ac_qual_in_period_caa%(Abstime start, Abstime stop, String acqual) =
  if %end_UTC% <= start or %start_UTC% >= stop then
      0:00
  else
    sum(trip(wop), trip.%block_time_of_ac_qual_in_period_caa%(start, stop, acqual));

/*
**  Standby
*/
%sby_start_hb% =
  if %is_standby_line% then
    first(trip(wop), trip.%standby_line_start%)
  else
    %start_hb%;

/*
** Assumption is that a standby block is inside wop range.
** It is also assumed that standby types are not mixed within same wop ie.
** a wop doesnt contain neither scattered standby and ordinary standby in same wop
** nor standby line standby and ordinary standby in same wop
*/
export %standby_block_days% =
  sum(trip(wop), trip.%days%)
  where (trip.%has_standby% or
         trip.%has_standby_line%);

export %blank_block_days_BL% =
  sum(trip(wop), trip.%days%)
  where (trip.%has_blank_day_BL%);

export %is_bought% =
  all(trip(wop),trip.%is_bought%);

export %has_bought% =
  any(trip(wop), trip.%has_bought%);

/*Used to see if there is less than a days gap between two wops */
export %consecutive_wops_bw% =
  default((wop.%start_hb% - prev(wop(chain), wop.%end_hb%))/24:00 < 1, false);

export %consecutive_wops_fw% =
  default((next(wop(chain), wop.%start_hb%) - wop.%end_hb%)/24:00 < 1, false);

export %consecutive_wops_fw_until_vacation% =
  all(wop(roster), wop.%consecutive_wops_fw%)
  from (current)
  while (not wop.%is_vacation%);

export %days_to_next_wop% =
    default((next(wop(chain), wop.%start_day%) - wop.%end_day% - 24:00) / 24:00, 99999);
export %days_to_next_on_duty_wop% =
    default((next(wop(chain), wop.%start_day%) where (wop.%is_on_duty%) - wop.%end_day% - 24:00) / 24:00, 99999);
/*
** FS
*/
export %wop_is_isolated_fs_in_production_block% =
    wop.%is_fs% and
    wop.%days% = 1 and
    (wop.%consecutive_wops_bw% and default(prev(wop(chain), wop.%is_on_duty%), false)) and
    (wop.%consecutive_wops_fw% and default(next(wop(chain), wop.%is_on_duty%), false));

/*** AC emp */
export %is_employer_qa% = any(trip(wop),trip.%is_ac_employer_qa%);

/********************
*** Super Freedays **
********************/
export %super_freedays_in_period%(abstime start, abstime stop) =
  sum(trip(wop), trip.%super_freedays_in_period%(start, stop)) where
    (trip.%start_hb% >= start and trip.%start_hb% < stop);

/*********************
*** Debug variables **
*********************/
%nr% = count(wop(roster)) from (first) to (current);


/** long production wop **/
%prod_days% =
  %days% - sum(trip(wop),trip.%days%) where (not trip.%is_production%);

export %min_prod_days_considered_as_long_working_period_p% =
  parameter 6
  remark "Min prod days considered as long working period";

%is_long_production% =
   if %prod_days% >= %min_prod_days_considered_as_long_working_period_p% then
     True
   else
     False;

export %nr_longs_in_pp% =
 count(wop(roster)) where (%is_long_production% and wop.%end_hb% >= %pp_start% and wop.%start_hb% <= %pp_end%);

/** consecutive long wops **/

%is_long_production_pp% =
   wop.%is_long_production% and
   wop.%end_hb% >= %pp_start% and
   wop.%start_hb% <= %pp_end%;

%is_prev_prev_long_pp% =
   prev(wop(roster), prev(wop(roster), %is_long_production_pp%));

%consecutive_long_wops_pp% =
  %is_long_production_pp% and %is_prev_prev_long_pp%;

export %nr_consecutive_longs_wops_in_pp% =
 count(wop(roster)) where (%consecutive_long_wops_pp%);

/* end of file */

