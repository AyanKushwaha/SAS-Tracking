/* -*- crc -*- 
 *
 * 
 *
 * Purpose:
 *   This module contains cost components for a trip.
 *   Every cost component defined in this file has one control variable,
 *   the _use variable. Even though a variable is turned off it can still
 *   be calculated and shown in the reports. 
 *
 * Sections:
 *   1. Report variables
 *   2. Total cost calculation APC & GPC. 
 *   3. Cost sections 
 *   4. Real cost elements
 *   5. Soft cost elements
 *   6. Non additive cost mapping
 *   7. Group defs
 *
 * Created by:
 *   Jonas Carlsson, Jeppesen Systems AB, October 2006
 *
 * Major changes:
 *
 */

root module trip_cost

import fundamental;
import iterators;
import levels;
import trip;
import duty;
import leg;
import crew_pos;
import hotel;
import rest;
import per_diem;
import soft_locks;
import tor;
import meal;
import duty_time;
import retiming;
import rules_meal_ccp;
import analysis;
import fatigue;
import oma16;
import fdp;
import duty_period;
import shift_change;
import calibration;
import pairing_teaming;

/****************************************************************
 * Section 1: Report variables
 ***************************************************************/
/*
 * These variables are used by the APC-status report to display the 
 * total costs for all trips.
*/

export %total_trip_total_cost% = 
  sum(trip_set, %trip_total_cost_report%);
  
export %total_element_cost_ix1_ix% = 
  sum(trip_set, %element_cost_ix1_ix%);
  
export %total_element_cost%(Int section, Int element) =
  sum(trip_set, %element_cost%(section, element));
  
export %total_section_cost_ix% = 
  sum(trip_set, %section_cost_ix%);
  
export %total_section_cost%(Int section) =
  sum(trip_set, %section_cost%(section));

/****************************************************************
 * Section 1.B: Cost calculations used in Custom KPIs
 ***************************************************************/

export %total_trip_real_cost% =
  sum(trip_set, %trip_real_costs%);

export %total_trip_soft_cost% =
  sum(trip_set, %trip_soft_costs%);

export %total_trip_special_cost% =
  sum(trip_set, %trip_cost_special_apc%);

export %total_trip_duty_cost% =
  sum(trip_set, if(%trip_cost_days_use_p%) then %trip_cost_days% else 0);

export %total_trip_hotel_cost% =
  sum(trip_set, if(%trip_cost_hotel_use_p%) then %trip_cost_hotel% else 0);

export %total_trip_per_diem_cost% =
  sum(trip_set, if(%trip_cost_per_diem_use_p%) then %trip_cost_per_diem% else 0);

export %total_trip_transport_cost% =
  sum(trip_set, if(%trip_cost_transport_use_p%) then %trip_cost_transport% else 0);

export %total_trip_passive_cost% =
  sum(trip_set, if(%trip_cost_passive_use_p%) then %trip_cost_passive% else 0);

/****************************************************************
 * Section 2: Total cost calculation APC % GPC
 ***************************************************************/
/*
 * There are two different cost calculations, one for reports and one
 * for the apc-optimiser. The reason for this is that the optimiser 
 * cannot expand the "table"-based cost calculation
*/

/* REAL + SOFT COST BASED */
export %trip_total_cost_report% = 
  sum(times(10), %_section_cost_ix%(%times_index_0%));


/* TOTAL COST */
export %trip_total_cost_apc% =
  %trip_cost_real_apc%
    + %trip_cost_soft_apc%
    + %trip_cost_special_apc%
    + analysis.%trip_analysis_costs%
    + fatigue.%trip_cost_alertness_penalty%
    + calibration.%trip_penalty_sensitivity_index%
    + pairing_teaming.%trip_teaming_between_plans_penalty% ;

export %trip_total_cost_colgen% =
  %trip_cost_real_colgen% + %trip_cost_soft_apc% + %trip_cost_special_apc% + analysis.%trip_analysis_costs%;

%trip_cost_real_apc% =
  /* REAL COSTS */
  (if %trip_cost_days_use_p% then %trip_cost_days% else 0) +
  (if %trip_cost_hotel_use_p% then %trip_cost_hotel% else 0) +
  (if %trip_cost_per_diem_use_p% then %trip_cost_per_diem% else 0) +
  (if %trip_cost_transport_use_p% then %trip_cost_transport% else 0) +
  (if %trip_cost_passive_use_p% then %trip_cost_passive% else 0);

%trip_cost_real_colgen% =
  /* REAL COSTS */
  (if %trip_cost_days_use_p% then %trip_cost_days% else 0) +
  (if %trip_cost_hotel_use_p% then %trip_cost_hotel% else 0) +
  /*(if %trip_cost_per_diem_use_p% then %trip_cost_per_diem% else 0) +*/
  (if %trip_cost_transport_use_p% then %trip_cost_transport% else 0) +
  (if %trip_cost_passive_use_p% then %trip_cost_passive% else 0); 
  
%trip_cost_soft_apc% = 
  /* SOFT COSTS */
  (if %trip_penalty_duty_minute_use_p% then %trip_penalty_duty_minute% else 0) +
  (if %trip_penalty_ac_change_use_p% then %trip_penalty_ac_change% else 0) +
  (if %trip_penalty_short_stop_use_p% then 
     %trip_penalty_short_stop% 
   else 0) +
  (if %trip_penalty_layover_at_other_base_use_p% then
     %trip_penalty_layover_at_other_base% 
   else 0) +
  (if %trip_penalty_short_layover_use_p% then
     %trip_penalty_short_layover%
   else 0) +
  (if %trip_penalty_late_checkout_on_last_duty_use_p% then 
     %trip_penalty_late_checkout_on_last_duty% 
   else 0) + 
   (/* The _use variable(s) for trip length penalties are included in the
       penalties themselves */
    %trip_penalty_xdays_penalty%) + 
  (if %trip_penalty_deadhead_in_roundtrip_with_same_ac_use_p% then
     %trip_penalty_deadhead_in_roundtrip_with_same_ac%
   else 0) +
  (if %trip_penalty_middle_duty_deadhead_use_p% then
     %trip_penalty_middle_duty_deadhead%
   else 0) +
  (if %trip_penalty_several_middle_duty_deadheads_use_p% then
     %trip_penalty_several_middle_duty_deadheads%
   else 0) + 
  (if %trip_penalty_exceeded_max_duty_in_x_day_trip_use_p% then
      %trip_penalty_exceeded_max_duty_in_x_day_trip_penalty%
   else 0) + 
  (if %trip_penalty_day_stop_use_p% then
     %trip_penalty_day_stop%
   else 0) +
  (if %trip_penalty_fifo_square_rest_penalty_use_p% then
     %trip_penalty_fifo_square_rest_penalty%
   else 0) +
  (if soft_locks.%use_penalties% then
     soft_locks.%trip_penalty%
   else 0) +
  (if tor.%tor_penalty_use% then
     tor.%trip_tor_chain_penalty%
   else 0) +
  (if %trip_penalty_expensive_hotel_stations_use_p% then
    %trip_penalty_expensive_hotel_stations%
   else 0) +
   (if %trip_penalty_duty_time_in_duty_period_use_p% then
    %trip_penalty_duty_time_in_duty_period%
   else 0) +
   (if %trip_penalty_for_extended_duties_use_p% then
    %trip_penalty_for_extended_duties%
   else 0) +
   (if %trip_penalty_for_extended_duty_last_in_trip_use_p% then
    %trip_penalty_for_extended_duty_last_in_trip%
   else 0) +
   (if oma16.%oma16_rest_buffer_action% = "Cost" then
    %trip_penalty_used_oma16_rest_buffer%
   else 0) +
   (if %oma16_max_fdp_buffer_use_p% then
      %trip_penalty_oma16_max_fdp%
   else 0) +
   (if %trip_penalty_duty_time_in_duty_period_4h_or_charter_use_p% then
      %trip_penalty_duty_time_in_duty_period_4h_or_charter_penalty%
   else 0) +
   (if %trip_penalty_duty_time_in_duty_period_not_4h_and_not_charter_use_p% then
      %trip_penalty_duty_time_in_duty_period_not_4h_and_not_charter_penalty%
   else 0) +
   (if %trip_penalty_duty_time_week_use_p% then
      %trip_penalty_duty_time_week_penalty%
   else 0) +
   (if %trip_penalty_retiming_use_p% then
      %trip_penalty_retiming_penalty%
    else 0) +
   (if %trip_penalty_correct_sb_placement_use_p% then
    %trip_penalty_sb_placement_match_penalty%
    else 0) +
   (if %trip_penalty_sb_late_end_use_p% then
    %trip_penalty_sb_late_end_penalty%
    else 0) +
   (if %trip_penalty_sb_two_day_match_use_p% then
   %trip_penalty_sb_two_day_match_penalty%
    else 0) +
   (if shift_change.%use_cost% then
   shift_change.%cost%
   else 0);



%trip_cost_special_apc% = 
  /* SPECIAL COSTS */
  (if %cost_of_breaking_max_time_btw_meal_breaks_use_p% 
   then %cost_of_breaking_max_time_btw_meal_breaks% 
   else 0) +
  (if %penalty_meal_breaks_not_long_enough_apart_use_p%
   then %penalty_meal_breaks_not_long_enough_apart%
   else 0);
    

  
/****************************************************************
 * Section 3: Cost sections
 ***************************************************************/

/* Avoid zero cost trips (DH only) */
%assigned_crew% =
  if crew_pos.%trip_assigned% < 1 then 1
  else crew_pos.%trip_assigned%;

/* Cost section lookup variables */
%_section_cost_ix%(Int ix) = %section_cost%(ix);

/* Cost section lookup variables used only for reports */
export %section_name_ix% = %section_name%(%py_index%);
export %section_cost_ix% = %section_cost%(%py_index%);
export %section_exist_ix% = %section_exist%(%py_index%);
export %section_exist%(Int section) =
    %section_name%(section) <> "";

/* Cost element lookup variables used only for reports*/
export %element_name_ix1_ix% = %element_name%(%py_index1%, %py_index%);
export %element_cost_ix1_ix% = %element_cost%(%py_index1%, %py_index%);
export %element_exist_ix1_ix% = %element_exist%(%py_index1%, %py_index%);
export %element_exist%(Int section, Int element) =
    %element_name%(section, element) <> "";

table section_lookup(int section) =
  section ->
    export String %section_name%,
      export Int %section_cost%;
      
  1 -> "REAL COSTS", 
       %trip_real_costs%;

  2 -> "PENALTIES", 
       %trip_soft_costs%;

  3 -> "SPECIAL",
       %trip_cost_special_apc%;

  4 -> "Analysis",
       analysis.%trip_analysis_costs%;
	   
  - -> "", 0;
end

table element_lookup(int section, int element) =
  section ->
    export String %element_name%,
      export Int %element_cost%;
  
  1 -> %real_cost_element_header%(element),
       %real_cost_element%(element);
       
  2 -> %soft_cost_element_header%(element),
       %soft_cost_element%(element);
  
  3 -> %special_cost_element_header%(element),
       %special_cost_element%(element);

  4 -> analysis.%analysis_cost_element_header%(element),
       analysis.%analysis_cost_element_cost%(element);

  - -> "", 0;
end


/****************************************************************
 Section 3-1: Real cost section
*****************************************************************/

export %trip_real_costs% =
  sum(times(10), %real_cost_element%(%times_index_0%)) 
  where(%real_cost_element_use%(%times_index_0%));
       
%real_cost_element%(int element) =
  if %real_cost_element_use%(element) then
     %real_cost_element_cost%(element)
  else 0;

table real_cost_elements(int element) =
  element ->
    export String %real_cost_element_header%,
    export Int %real_cost_element_cost%,
    export Bool %real_cost_element_use%;
  
  1 -> "Duty day costs",
       %trip_cost_days%,
       %trip_cost_days_use_p%;
  
  2 -> "Hotel costs",
       %trip_cost_hotel%,
       %trip_cost_hotel_use_p%;
       
  3 -> "Per diem cost",
       %trip_cost_per_diem%,
       %trip_cost_per_diem_use_p%;
  
  4 -> "Local transport costs",
       %trip_cost_transport%,
       %trip_cost_transport_use_p%;
  
  5 -> "Passive costs",
        %trip_cost_passive%,
        %trip_cost_passive_use_p%;
  
  - -> "", 0, false;
end


/****************************************************************
 Section 3-2: Soft cost section
*****************************************************************/

export %trip_soft_costs% =
  sum(times(%no_soft_costs%), %soft_cost_element%(%times_index_0%))
  where(%soft_cost_element_use%(%times_index_0%));
       
%soft_cost_element%(int element) =
  if %soft_cost_element_use%(element) then 
  %soft_cost_element_cost%(element)
  else 0;

table soft_cost_elements(int element) =
  element ->
    export String %soft_cost_element_header%,
      export Int %soft_cost_element_cost%,
      export Bool %soft_cost_element_use%;
    
  1 -> "Duty minute penalty",
       %trip_penalty_duty_minute%,
       %trip_penalty_duty_minute_use_p%;
       
  2 -> "AC change penalty",
       %trip_penalty_ac_change%,
       %trip_penalty_ac_change_use_p%;
   
  3 -> "Short stop penalty",
       %trip_penalty_short_stop%,
       %trip_penalty_short_stop_use_p%;
       
  4 -> "Layover at other base penalty",
        %trip_penalty_layover_at_other_base%,
        %trip_penalty_layover_at_other_base_use_p%;
        
  5 -> "Check-out after midnight on last duty penalty",
       %trip_penalty_late_checkout_on_last_duty%,
       %trip_penalty_late_checkout_on_last_duty_use_p%;
       
  6 -> "1 day trip penalty",
       %trip_penalty_xday_trip_1%,
       %trip_penalty_1_day_trip_use_p%;
       
  7 -> "2 day trip penalty",
       %trip_penalty_xday_trip_2%,
       %trip_penalty_2_day_trip_use_p%;
       
  8 -> "3 day trip penalty",
       %trip_penalty_xday_trip_3%,
       %trip_penalty_3_day_trip_use_p%;
       
  9 -> "4 day trip penalty",
       %trip_penalty_xday_trip_4%,
       %trip_penalty_4_day_trip_use_p%;
       
 10 -> "5 day trip penalty",
       %trip_penalty_xday_trip_5%,
       %trip_penalty_5_day_trip_use_p%;

 11 -> "Deadhead in roundtrip with same AC penalty",
       %trip_penalty_deadhead_in_roundtrip_with_same_ac%,
       %trip_penalty_deadhead_in_roundtrip_with_same_ac_use_p%;
       
 12 -> "Middle duty deadhead",
       %trip_penalty_middle_duty_deadhead%,
       %trip_penalty_middle_duty_deadhead_use_p%;
       
 13 -> "Several middle duty deadheads",
        %trip_penalty_several_middle_duty_deadheads%,
        %trip_penalty_several_middle_duty_deadheads_use_p%;
        
 14 -> "Exceeded max duty in x day trip",
       %trip_penalty_exceeded_max_duty_in_x_day_trip%(trip.%days%, %duty_time_with_or_without_night_upg%),
       %trip_penalty_exceeded_max_duty_in_x_day_trip_use_p%;
       
 15 -> "Soft locks penalty",
       soft_locks.%trip_penalty%,
       soft_locks.%use_penalties%;
 
 16 -> "TOR penalty",
       tor.%trip_tor_chain_penalty%,
       tor.%tor_penalty_use%;

 17 -> "Fifo square rest penalty",
       %trip_penalty_fifo_square_rest_penalty%,
       %trip_penalty_fifo_square_rest_penalty_use_p%;
       
 18 -> "Expensive hotel stations penalty",
       %trip_penalty_expensive_hotel_stations%,
       %trip_penalty_expensive_hotel_stations_use_p%;
       
 21 -> "Duty time in duty period penalty",
       %trip_penalty_duty_time_in_duty_period%,
       %trip_penalty_duty_time_in_duty_period_use_p%;      
       
 22 -> "Penalty for extended duties",
       %trip_penalty_for_extended_duties%,
       %trip_penalty_for_extended_duties_use_p%;

 23 -> "Penalty for extended duty last in trip",
       %trip_penalty_for_extended_duty_last_in_trip%,
       %trip_penalty_for_extended_duty_last_in_trip_use_p%;

 24 -> "Penalty for duty time, charter or block time > 4h, in duty period [CC]",
       %trip_penalty_duty_time_in_duty_period_4h_or_charter_penalty%,
       %trip_penalty_duty_time_in_duty_period_4h_or_charter_use_p%;
       
 25 -> "Penalty for duty time, not charter and no block time > 4h, in duty period [CC]",
       %trip_penalty_duty_time_in_duty_period_not_4h_and_not_charter_penalty%,
       %trip_penalty_duty_time_in_duty_period_not_4h_and_not_charter_use_p%;
 
 26 -> "Penalty for exceeding duty time per calendar week [CC]",
       %trip_penalty_duty_time_week_penalty%,
       %trip_penalty_duty_time_week_use_p%;
 27 -> "Retiming cost",
       %trip_penalty_retiming_penalty%,
       %trip_penalty_retiming_use_p%;
 28 -> "SB early end cost",
       %trip_penalty_sb_late_end_penalty%,
       %trip_penalty_sb_late_end_use_p%;

 29 -> "SB match placement cost",
       %trip_penalty_sb_placement_match_penalty%,
       %trip_penalty_correct_sb_placement_use_p%;
 
 30 -> "SB Two day SB is not OK",
       %trip_penalty_sb_two_day_match_penalty%,
       %trip_penalty_sb_two_day_match_use_p%;
       
 31 -> "Fatigue penalty",
       fatigue.%trip_cost_alertness_penalty%,
       fatigue.%penalty_alertness_use%;
       
 32 -> "Penalty for use of OMA16 rest buffer",
       %trip_penalty_used_oma16_rest_buffer%,
       oma16.%oma16_rest_buffer_action% = "Cost";
       
 33 -> "Penalty for use of OMA16 FDP buffer",
       %trip_penalty_oma16_max_fdp%,
       %oma16_max_fdp_buffer_use_p%;

 34 -> "Short layover penalty",
       %trip_penalty_short_layover%,
       %trip_penalty_short_layover_use_p%;

 35 -> "Calibration SI penalty",
        calibration.%trip_penalty_sensitivity_index%,
        calibration.%use_sensitivity_index_penalty%;

  - -> "", 0, false;
end

%no_soft_costs% = 35;

/****************************************************************
 * Section 4: Real cost elements
 ***************************************************************/
%use_sb_max_usability_header_p% =
  parameter ""
  remark "#HEADER# Standby Usability";

 /* Standby costs */
%late_sb_start% = parameter 10:00
    remark "Early SB threshhold, late SB last day in SB block";
%late_sb_start_penalty% = parameter 400
    remark "Early SB, last day in SB block punichment";

%trip_penalty_sb_late_end_penalty% =
    if trip.%is_standby_block% and
       last(duty(trip), duty.%start_od_lt%) <= %late_sb_start% then
        %late_sb_start_penalty%
    else
        0;

%trip_penalty_sb_late_end_use_p% = parameter True
    remark "Use cost to place SB";

    
/*SB length matching cost*/

%trip_penalty_sb_placement_match_penalty% =
    if trip.%is_standby_block% and %trip_penalty_correct_sb_placement_use_p% and %trip_has_wrongly_placed_sb% then
        %no_wrong_sb_placements_in_trip% * %trip_penalty_correct_sb_placement_cost% * %trip_wrongly_placed_sb_weight%
    else
        0;

%trip_has_wrongly_placed_sb% = false;
%no_wrong_sb_placements_in_trip% = 0;
%trip_wrongly_placed_sb_weight% = 0;

%trip_penalty_correct_sb_placement_use_p% =
    parameter True
    remark "Use correct SB placement cost";

%trip_penalty_correct_sb_placement_cost% = parameter 1000
    remark "Inccorrect SB placement cost";

/*Two day sb is not OK*/
%trip_penalty_sb_two_day_match_penalty% =
    if %trip_penalty_sb_two_day_match_use_p% and
        trip.%is_standby_block% and trip.%days% <= %SB_block_short_sb_threshold% then
        (%SB_block_short_sb_threshold% - trip.%days% + 1) * %two_day_sb_penalty%
    else
        0;

%SB_block_short_sb_threshold% = parameter 2
    remark "Short SB threshold";

%trip_penalty_sb_two_day_match_use_p% =
    parameter true
    remark "Use penalty for SB:s shorter than ideal length";

%two_day_sb_penalty% =
    parameter 5000
    remark "Penalty for each day shorter than ideal length";
    
 
/*
** Duty day costs
*/ 

%trip_cost_days_header_p% = parameter "" remark "#HEADER#Production day";
%trip_cost_days_use_p% =
  parameter true
  remark "Use duty day costs in cost function";

export %trip_cost_days% =
  %assigned_crew% * trip.%days% * %duty_day_cost_p%;

export %duty_day_cost_p% = 
  parameter 9000
  remark "Cost of one duty day";


/*
** Hotel costs
*/ 

%trip_cost_hotel_header_p% = parameter "" remark "#HEADER#Hotel";
%trip_cost_hotel_use_p% =
  parameter true
  remark "Use hotel costs in cost function";

export %trip_cost_hotel% =
  %assigned_crew% * sum(duty(trip), %duty_cost_of_hotel%);

/* If the duty is last in the trip hotel.%duty_cost_hotel% will 
   return void and needs to be handled */
%duty_cost_of_hotel% = 
  if is_last(duty(trip))
  then 0
  else hotel.%duty_cost_hotel%;

/*
** Per Diem
*/

%trip_cost_per_diem_header_p% = parameter "" remark "#HEADER#Per Diem";

%trip_cost_per_diem_use_p% = 
  parameter true 
  remark "Use per diem costs in cost function";
  
/* Per diem in rave is factored by 100. Reports and interfaces handles this. */
export %trip_cost_per_diem% = 
    trip.%per_diem_compensation%/100;

  
/*
** Local transport costs
*/    


%trip_cost_transport_header_p% = parameter "" remark "#HEADER#Local transport";
%trip_cost_transport_use_p% =
  parameter true
  remark "Use local transport costs in cost function";


/*
** Transport costs after a duty are now calculated separately for
** airport-to-hotel and hotel-to-airport, so that duties arriving at
** one airport where the next duty departs from a different twin
** airport, can be handled correctly.
*/  
export %trip_cost_transport% = 
  %assigned_crew% * sum(duty(trip), %duty_cost_of_transport%);

export %duty_cost_of_transport% = 
  hotel.%duty_transport_cost_apt_to_hotel% +
  hotel.%duty_transport_cost_hotel_to_apt%;

/*
** Passive costs
*/                       

%trip_cost_passive_header_p% = parameter "" remark "#HEADER#Passive transport";
%trip_cost_passive_use_p% =
  parameter true
  remark "Use passive (DH, OAG, GT) costs in cost function";
 
export %trip_cost_passive% = 
   %assigned_crew% *
   sum(duty(trip), %duty_cost_passive%);

%duty_cost_passive% = sum(leg(duty), %leg_cost_passive%);

%leg_cost_dh_hour_p% = parameter 10000
  remark "Cost of one deadhead hour (own fleet)";

%leg_cost_oag_hour_p% = parameter 30000
  remark "Cost of one OAG hour (another carrier)";

%leg_cost_gt_hour_p% =  parameter 2000
  remark "Cost of one ground transport hour";

%leg_cost_hour% =
  if leg.%is_deadhead% AND (NOT leg.%is_oag%) AND (NOT leg.%is_ground_transport%)
  then %leg_cost_dh_hour_p%
  else if leg.%is_ground_transport% then
	%leg_cost_gt_hour_p%
  else if leg.%is_oag% then
	%leg_cost_oag_hour_p%
  else 0;

export %leg_cost_passive% = 
    (%leg_cost_hour% * leg.%air_time% ) / 1:00;

/* For APC only. Referenced by map variable map_cost_of_deadhead */ 
export %leg_cost_dh_apc% =
  let ass_crew = crew_pos.%trip_assigned%;
  if leg.%is_allowed_as_dh% then
	ass_crew * %leg_cost_passive%
  else
	ass_crew * %leg_cost_passive% * %illegal_dh_overcover_mult_p%;

%illegal_dh_overcover_mult_p% = 
  parameter 5
  remark "(C&P) Overcover cost multiplier for illegal deadheads";


/****************************************************************
 * Section 5: Soft cost elements
 ***************************************************************/

/*
** AIRCRAFT CHANGE PENALTY
*/

%trip_penalty_ac_change_header_p% = parameter "" remark "#HEADER#AC-changes";
%trip_penalty_ac_change_use_p% =
  parameter true
  remark "Use aircraft change penalty in cost function";
 
export %trip_penalty_ac_change% = 
  %assigned_crew% * sum(duty(trip), %duty_ac_change_penalty%);

%duty_ac_change_penalty% = 
  duty.%num_ac_changes_not_dh% * %leg_penalty_ac_change_p%;

%leg_penalty_ac_change_p% =
  parameter 1500
  remark "Penalty for one aircraft change";


/*
** DUTY MINUTE PENALTY
*/

%trip_penalty_duty_minute_header_p% = 
  parameter "" 
  remark "#HEADER#Duty minute penalty";
  
%trip_penalty_duty_minute_use_p% =
  parameter true
  remark "Use duty minute penalty in cost function";

%trip_penalty_duty_minute_penalty_p% =
  parameter 5
  remark "Penalty per duty minute";  

export %trip_penalty_duty_minute% = 
  %assigned_crew% * 
  %trip_penalty_duty_minute_penalty_p%  *
  (trip.%duty_time%(duty.union, True) / 0:01) / 100;


/*
** DUTY FREE BREAK PENALTY
**
** stefanh 20May2009:
**   Obsolete due to the introduction of the new duty level definition.
**   There are no duty_free_breaks within a duty any more, since duties
**   are ended at a 5h gap between legs. Previously it was 8h. 5-8h breaks
**   will now be detected as short stops, and standard rest penalties will
**   be applied.
*/

%trip_penalty_duty_free_break_header_p% = 
  parameter "" 
  remark "#HEADER#Duty free break penalty (obsolete)";
  
%trip_penalty_duty_free_break_use_p% =
  parameter false
  remark "Use penalty for duty free break in cost function";

%trip_penalty_duty_free_break_penalty_p% = 
  parameter 100
  remark "Penalty for having a duty free break in a duty";
  
export %trip_penalty_duty_free_break% = 
  %assigned_crew% * sum(duty(trip), %duty_trip_penalty_duty_free_break%);

%duty_trip_penalty_duty_free_break% = 0;


/*
** SHORT STOP PENALTY
*/

%trip_penalty_short_stop_header_p% = 
  parameter "" 
  remark "#HEADER#Short stop penalty";
  
%trip_penalty_short_stop_use_p% =
  parameter false
  remark "Use penalty for short stop in cost function";

%trip_penalty_short_stop_penalty_p% = 
  parameter 100
  remark "Penalty for having a short stop in a trip";
  
export %trip_penalty_short_stop% = 
  %assigned_crew% * %trip_penalty_short_stop_penalty_p% * count(duty(trip) where(%duty_trip_penalty_short_stop%));

%duty_trip_penalty_short_stop% = rest.%is_short_last_in_duty%;

/*
** LAYOVER AT OTHER BASE PENALTY
*/

%trip_penalty_layover_at_other_base_header_p% = 
  parameter "" 
  remark "#HEADER#Layover at other base penalty";
  
%trip_penalty_layover_at_other_base_use_p% =
  parameter true
  remark "Use penalty for layover at other base in cost function";
  
%trip_penalty_layover_at_other_base_penalty_p% = 
  parameter 100
  remark "Penalty for a layover at other base than home base";

export %trip_penalty_layover_at_other_base% =
  %assigned_crew% * sum(duty(trip), %duty_trip_penalty_layover_at_other_base%)
                   where (not is_last(duty(trip)));
  
%duty_trip_penalty_layover_at_other_base% =
  if %duty_ends_at_base% then
    if duty.%arrives_at_homebase% then
      0
    else
      %trip_penalty_layover_at_other_base_penalty_p%
  else
    0;
  
%duty_ends_at_base% = %is_a_base%(duty.%end_station%);   

%is_a_base%(String station) = (station = %base%(station));

table bases(String station) =
  station -> String %base%;
  external "crew_base_set";
  "id" -> "id";
  - -> "";
end

/*
** SHORT LAYOVER PENALTY
*/

%trip_penalty_short_layover_header_p% =
    parameter ""
    remark "#HEADER#Short layover penalty";

%trip_penalty_short_layover_use_p% =
    parameter true
    remark "Use penalty for short layover in cost function";

%trip_penalty_short_layover_penalty_p% =
    parameter 100
    remark "Penalty for a short layover";

%trip_penalty_short_layover_minimum_p% =
    parameter 12:00
    remark "Minimum desired layover time";

set trip_penalty_short_layover_stations_set =
    parameter "TRD", "SVG"
    remark "Stations to apply short layover penalty to";

export %trip_penalty_short_layover% =
    sum(duty(trip), %duty_penalty_short_layover%);

%duty_penalty_short_layover% =
    if not is_last(duty(trip)) and
       duty.%end_station% in trip_penalty_short_layover_stations_set and
       duty.%rest_time% < %trip_penalty_short_layover_minimum_p%
    then
        %assigned_crew% * %trip_penalty_short_layover_penalty_p%
    else
        0;

/*
** CHECK-OUT AFTER MIDNIGHT ON LAST DUTY PENALTY
*/

%trip_penalty_late_checkout_on_last_duty_header_p% = 
  parameter "" 
  remark "#HEADER#Check-out after midnight on last duty penalty";
  
%trip_penalty_late_checkout_on_last_duty_use_p% =
  parameter true
  remark "Use penalty for check-out after midnigt on last duty";
  
%trip_penalty_late_checkout_on_last_duty_penalty_p% = 
  parameter 100
  remark "Penalty for check-out after midnight on last duty";

export %trip_penalty_late_checkout_on_last_duty% =
  if crr_is_closed_last then
    if last(duty(trip), duty.%check_out_after_midnight%) then
      %assigned_crew% * %trip_penalty_late_checkout_on_last_duty_penalty_p%
    else
      0
  else
    0;

/*
** TRIP LENGTH PENALTY
*/

  /*Header*/
%trip_penalty_trip_length_header_p% = 
  parameter ""
  remark "#HEADER# Trip length penalty";
 
  /* Penalty*/
%trip_penalty_xdays_penalty% = 
  %assigned_crew% * 
  %trip_penalty_xdays_trip_penalty_%(trip.%homebase%, trip.%days%);

/* %trip_penalty_xdays_trip_penalty_% need to have this exact signatur,
   required by the non-additive cost mapping. It also needs to be
   a constant function so it can not depend on trip.%days% nor %assigned_crew% */
table trip_penalty_xdays_penalty_table(String base, Int caldays) =
  base, caldays -> %trip_penalty_xdays_trip_penalty_%;
  -,  1 -> if %trip_penalty_1_day_trip_use_p% then %trip_penalty_xday_trip_penalty_1% else 0;
  -,  2 -> if %trip_penalty_2_day_trip_use_p% then %trip_penalty_xday_trip_penalty_2% else 0;
  -,  3 -> if %trip_penalty_3_day_trip_use_p% then %trip_penalty_xday_trip_penalty_3% else 0;
  -,  4 -> if %trip_penalty_4_day_trip_use_p% then %trip_penalty_xday_trip_penalty_4% else 0;
  -,  5 -> if %trip_penalty_5_day_trip_use_p% then %trip_penalty_xday_trip_penalty_5% else 0;
  -,  - -> 0;
end

/* Penalty divided into parts for individual use and individual reporting */ 
%trip_penalty_xday_trip_1% = 
  if %trip_penalty_1_day_trip_use_p% and trip.%days% = 1 then
    %assigned_crew% * %trip_penalty_xday_trip_penalty_1%
  else
    0;
    
%trip_penalty_xday_trip_2% = 
  if %trip_penalty_2_day_trip_use_p% and trip.%days% = 2 then
    %assigned_crew% * %trip_penalty_xday_trip_penalty_2%
  else
    0;    
 
%trip_penalty_xday_trip_3% = 
  if %trip_penalty_3_day_trip_use_p% and trip.%days% = 3 then
    %assigned_crew% * %trip_penalty_xday_trip_penalty_3%
  else
    0;
 
%trip_penalty_xday_trip_4% = 
  if %trip_penalty_4_day_trip_use_p% and trip.%days% = 4 then
    %assigned_crew% * %trip_penalty_xday_trip_penalty_4%
  else
    0;
 
%trip_penalty_xday_trip_5% = 
  if %trip_penalty_5_day_trip_use_p% and trip.%days% = 5 then
    %assigned_crew% * %trip_penalty_xday_trip_penalty_5%
  else
    0;   
  

 /* Penalty parameters */ 
%trip_penalty_xday_trip_penalty_1% =
  parameter 100
  remark "Penalty for 1 day trip";
  
%trip_penalty_xday_trip_penalty_2% =
  parameter 100
  remark "Penalty for 2 day trip";
 
%trip_penalty_xday_trip_penalty_3% =
  parameter 100
  remark "Penalty for 3 day trip";

%trip_penalty_xday_trip_penalty_4% =
  parameter 100
  remark "Penalty for 4 day trip";

%trip_penalty_xday_trip_penalty_5% =
  parameter 100
  remark "Penalty for 5 day trip";
  
  /* Use parameters */ 
%trip_penalty_1_day_trip_use_p% =
  parameter true
  remark "Use penalty for 1 day trip";
  
%trip_penalty_2_day_trip_use_p% =
  parameter true
  remark "Use penalty for 2 day trip";
 
%trip_penalty_3_day_trip_use_p% =
  parameter true
  remark "Use penalty for 3 day trip";

%trip_penalty_4_day_trip_use_p% =
  parameter true
  remark "Use penalty for 4 day trip";

%trip_penalty_5_day_trip_use_p% =
  parameter true
  remark "Use penalty for 5 day trip";

  
/*
** PENALTY DEADHEAD IN ROUNDTRIP WITH SAME AC
*/

%trip_penalty_deadhead_in_roundtrip_with_same_ac_header_p% =
  parameter ""
  remark "#HEADER#Deadhead in roundtrip with same AC penalty";

%trip_penalty_deadhead_in_roundtrip_with_same_ac_use_p% =
  parameter true
  remark "Use penalty for deadhead in roundtrip with same AC";
  
%trip_penalty_deadhead_in_roundtrip_with_same_ac_penalty_p% =
  parameter 100
  remark "Penalty for deadhead in roundtrip with same AC";

export %trip_penalty_deadhead_in_roundtrip_with_same_ac% =
  if trip.%deadhead_in_roundtrip% then
    %assigned_crew% * 
    trip.%num_deadhead_roundtrips% * 
    %trip_penalty_deadhead_in_roundtrip_with_same_ac_penalty_p%
  else 0;
  
  

/*
** PENALTY FOR MIDDLE DUTY DEADHEAD
*/

%trip_penalty_middle_duty_deadhead_header_p% =
  parameter ""
  remark "#HEADER#Middle duty deadhead penalty";
  
%trip_penalty_middle_duty_deadhead_use_p% =
  parameter true
  remark "Use middle duty deadhead penalty";
  
%trip_penalty_middle_duty_deadhead_penalty_p% =
  parameter 100
  remark "Middle duty deadhead penalty";
  
export %trip_penalty_middle_duty_deadhead% = 
  if any(duty(trip),duty.%has_one_middle_duty_deadhead%) then
   %assigned_crew% * 
   %trip_penalty_middle_duty_deadhead_penalty_p% *
   count(duty(trip)) where (duty.%has_one_middle_duty_deadhead%)
  else 0;

/*
** PENALTY FOR MORE THAN ONE MIDDLE DUTY DEADHEAD
*/

%trip_penalty_several_middle_duty_deadheads_header_p% =
  parameter ""
  remark "#HEADER#Several middle duty deadheads penalty";
  
%trip_penalty_several_middle_duty_deadheads_use_p% =
  parameter true
  remark "Use several middle duty deadheads penalty";
  
%trip_penalty_several_middle_duty_deadheads_penalty_p% =
  parameter 100
  remark "Several middle duty deadheads penalty";
  
export %trip_penalty_several_middle_duty_deadheads% = 
 if any(duty(trip),duty.%has_several_middle_duty_deadheads%) then
   %assigned_crew% * 
   %trip_penalty_several_middle_duty_deadheads_penalty_p% *
   count(duty(trip)) where (duty.%has_several_middle_duty_deadheads%)
  else 0;



/*
** PENALTY FOR MAX DUTY IN X DAY TRIP
*/

%trip_penalty_exceeded_max_duty_in_x_day_trip_header_p% =
  parameter ""
  remark "#HEADER#Exceeded max duty in x day trip";
  
%trip_penalty_exceeded_max_duty_in_x_day_trip_use_p% =
  parameter true
  remark "Use exceeded max duty in x day trip penalty";
  
%trip_penalty_exceeded_max_duty_in_x_day_trip_penalty% = 
  %assigned_crew% *
  %trip_penalty_exceeded_max_duty_in_x_day_trip%(trip.%days%, %duty_time_with_or_without_night_upg%);
    
export %trip_penalty_exceeded_max_duty_in_x_day_trip%(Int trip_days, Int duty_time_with_or_without_night_upg) =
   if duty_time_with_or_without_night_upg > %_max_duty_in_x_day_trip%(trip_days) / 0:01 then
      %_trip_penalty_exceeded_max_duty_in_x_day_trip_penalty_p%(trip_days) 
      * (duty_time_with_or_without_night_upg - %_max_duty_in_x_day_trip%(trip_days)/0:01)
   else 0;
  
/* Use this as the resource */ 
export %duty_time_with_or_without_night_upg% = 
 trip.%duty_time%(duty.union,%use_night_upg%) / 0:01;

%use_night_upg% = default(not trip.%is_sks% and fundamental.%night_upg%, false); 

%minutes_exceeded% = %duty_time_with_or_without_night_upg% - %max_duty_in_x_day_trip% / 0:01;
   
table max_duty_in_x_days(int days) =
  days -> export %_max_duty_in_x_day_trip%, %_trip_penalty_exceeded_max_duty_in_x_day_trip_penalty_p%;
    
  1 -> %max_duty_in_1_day_trip_p%, %trip_penalty_exceeded_max_duty_in_1_day_trip_penalty_p% ;
  2 -> %max_duty_in_2_day_trip_p%, %trip_penalty_exceeded_max_duty_in_2_day_trip_penalty_p%;
  3 -> %max_duty_in_3_day_trip_p%, %trip_penalty_exceeded_max_duty_in_3_day_trip_penalty_p%;
  4 -> %max_duty_in_4_day_trip_p%, %trip_penalty_exceeded_max_duty_in_4_day_trip_penalty_p%;
  5 -> %max_duty_in_5_day_trip_p%, %trip_penalty_exceeded_max_duty_in_5_day_trip_penalty_p%;
  - -> 00:00, 0;
 end
 
%max_duty_in_x_day_trip% = %_max_duty_in_x_day_trip%(default(trip.%days%, 0));
%trip_penalty_exceeded_max_duty_in_x_day_trip_penalty_p% = %_trip_penalty_exceeded_max_duty_in_x_day_trip_penalty_p%(default(trip.%days%, 0)); 
 

/* Max duty parameters for x day trip */
%max_duty_in_1_day_trip_p% = 
  parameter 10:30
  remark "Max duty in 1 day trip";
    
%max_duty_in_2_day_trip_p% = 
  parameter 21:00
  remark "Max duty in 2 day trip";
     
%max_duty_in_3_day_trip_p% = 
  parameter 29:00
  remark "Max duty in 3 day trip"; 
  
%max_duty_in_4_day_trip_p% = 
  parameter 35:00
  remark "Max duty in 4 day trip"; 
    
%max_duty_in_5_day_trip_p% = 
  parameter 42:00
  remark "Max duty in 5 day trip"; 

  
/* Penalty parameters for exceeded max duty in x days */  

%trip_penalty_exceeded_max_duty_in_1_day_trip_penalty_p% =
  parameter 100
  remark "Exceeded max duty in 1 day trip penalty";

%trip_penalty_exceeded_max_duty_in_2_day_trip_penalty_p% =
  parameter 100
  remark "Exceeded max duty in 2 day trip penalty";
  
%trip_penalty_exceeded_max_duty_in_3_day_trip_penalty_p% =
  parameter 100
  remark "Exceeded max duty in 3 day trip penalty"; 
  
%trip_penalty_exceeded_max_duty_in_4_day_trip_penalty_p% =
  parameter 100
  remark "Exceeded max duty in 4 day trip penalty";
  
%trip_penalty_exceeded_max_duty_in_5_day_trip_penalty_p% =
  parameter 100
  remark "Exceeded max duty in 5 day trip penalty";
  

/*
** PENALTY FOR EXPENSIVE HOTEL STATIONS
*/

/* Used to limit the number of layovers at stations where it is hard to find
   reasonably priced accomodations in the case of too many layovers at 
   the same time */
  
%trip_penalty_expensive_hotel_stations_header_p% =
  parameter ""
  remark "#HEADER# Expensive hotel stations";
  
%trip_penalty_expensive_hotel_stations_use_p% = 
  parameter true
  remark "Use penalty for expensive hotel stations";

%trip_penalty_expensive_hotel_station_cost_p% =
 parameter 2000
 remark "Penalty for staying at an expensive hotel station";
  
set trip_penalty_expensive_hotel_stations_set = 
  parameter ""
  remark "Expensive hotel stations";
  
export %trip_penalty_expensive_hotel_stations% = 
 sum(duty(trip), %expensive_hotel_stations_duty%);
  
%expensive_hotel_stations_duty% = 
  if not is_last(duty(trip)) and 
     duty.%end_station% in trip_penalty_expensive_hotel_stations_set then
      %assigned_crew% * %trip_penalty_expensive_hotel_station_cost_p%
  else 
    0;
    
    
/*
** PENALTY FOR DAY STOPS
*/

/* Penalty for each time a duty starts on the same day that the 
   previous duty ended.*/

  
%trip_penalty_day_stop_header_p% =
  parameter ""
  remark "#HEADER# Day stop";
  
%trip_penalty_day_stop_use_p% = 
  parameter true
  remark "Use penalty for day stop";

%trip_penalty_day_stop_cost_p% =
 parameter 2000
 remark "Penalty for day stop";
  
export %trip_penalty_day_stop% = 
 sum(duty(trip), %day_stop_penalty%);
  
%day_stop_penalty% = 
   if duty.%is_day_stop% then
  %assigned_crew% * %trip_penalty_day_stop_cost_p%
  else
  0;

/*
** PENALTY FOR DUTY TIME IN DUTY PERIOD
*/

/* Penalty for each minute the duty period exceeds the target max value.
 Penalty only used for SKS and thus turned off by default*/

%trip_penalty_duty_time_in_duty_period_header_p% =
  parameter ""
  remark "#HEADER# Duty Time in Duty Period";
  
%trip_penalty_duty_time_in_duty_period_use_p% = 
  parameter false
  remark "Use penalty for duty time in duty period";

%trip_penalty_duty_time_in_duty_period_cost_p% =
 parameter 2000
 remark "Penalty for duty time in duty period";

%trip_penalty_max_duty_time_in_duty_period_p% =
  if all(leg(duty), leg.%time% >= 04:00) then
    %trip_penalty_max_duty_time_in_duty_period_4h_p%
  else
    %trip_penalty_max_duty_time_in_duty_period_ordinary_p%;
 
%trip_penalty_max_duty_time_in_duty_period_ordinary_p% = 
  parameter 10:30
  remark "Max duty time in ordinary duty period";
  
%trip_penalty_max_duty_time_in_duty_period_4h_p% = 
  parameter 12:00
  remark "Max duty time in duty period with all legs > 4h"; 
  
export %trip_penalty_duty_time_in_duty_period% = 
 sum(duty(trip), %duty_time_in_duty_period_penalty%);

%duty_time_in_duty_period_penalty% = 
  if %duty_time_diff% > 0 then
    %trip_penalty_duty_time_in_duty_period_cost_p% * %duty_time_diff%
  else
    0;  
    
%duty_time_diff% = 
  (%duty_time_in_duty_period% - %trip_penalty_max_duty_time_in_duty_period_p%)/00:01; 
  
%duty_time_in_duty_period% = duty_time.%in_duty_period%(duty.union, False); 

/* 
** Cost for exceeding duty period time limit 
** CR 67. A one-off penalty is applied for duty time > 12:00 hrs
** If all active legs are charter or if all active legs have 
** block time > 4:00 hrs
** 
** The cost is meant for SKS CC, but it will be up to the planner 
** to use the appropriate costs, default = 0. 
*/
%trip_penalty_duty_time_in_duty_period_4h_or_charter_use_p% = 
  parameter false
  remark "Use penalty for duty time, charter or block time > 4h, in duty period [CC]";

%trip_penalty_duty_time_in_duty_period_4h_or_charter_cost_p% =
 parameter 0
 remark "Penalty for duty time, charter or block time > 4h, in duty period [CC]";

%trip_penalty_max_duty_time_in_duty_period_4h_or_charter_p% = 
  parameter 12:00
  remark "Max duty time in duty period with all legs charter or all legs have block time > 4h [CC]"; 

%trip_penalty_duty_time_in_duty_period_4h_or_charter% =
  all(leg(duty), leg.%time% >= 04:00) where (leg.%is_active_flight%) or 
  all(leg(duty), leg.%is_charter%) where (leg.%is_active_flight%);

%trip_penalty_duty_time_in_duty_period_4h_or_charter_penalty% = 
    if %trip_penalty_duty_time_in_duty_period_4h_or_charter_use_p% and 
      %cabin_crew% then
      sum(duty(chain), %duty_penalty_duty_time_in_duty_period_4h_or_charter_penalty%)
    else
      0;
  
%duty_penalty_duty_time_in_duty_period_4h_or_charter_penalty% = 
  if %duty_time_diff_period_4h_or_charter% and 
    %trip_penalty_duty_time_in_duty_period_4h_or_charter% then
    %trip_penalty_duty_time_in_duty_period_4h_or_charter_cost_p%
  else
    0;  

%duty_time_diff_period_4h_or_charter% = 
  (duty.%duty_time%(duty.union, True) - %trip_penalty_max_duty_time_in_duty_period_4h_or_charter_p%) > 0:00; 

/*
 * Retiming
 */
  
%trip_penalty_retiming_use_p% = 
  retiming.%trip_penalty_retiming_use_p%;

%trip_penalty_retiming_penalty% = 
  retiming.%total_trip_penalty_retiming%;

/* 
** Cost for each duty exceeding time limit 
** CR 67. A one-off penalty is applied for each duty time > 10:15 hrs
** If no active legs are charter or if no active legs have 
** block time > 4:00 hrs
** 
** The cost is meant for SKS CC, but it will be up to the planner 
** to use the appropriate costs, default = 0. 
*/
%trip_penalty_duty_time_in_duty_period_not_4h_and_not_charter_use_p% = 
  parameter false
  remark "Use penalty for duty time, not charter and no block time > 4h, in duty period [CC]";
  
%trip_penalty_duty_time_in_duty_period_not_4h_and_not_charter_cost_p% =
 parameter 0
 remark "Penalty for duty time, not charter and no block time > 4h, in duty period [CC]";
 
%trip_penalty_max_duty_time_in_duty_period_not_4h_and_not_charter_p% = 
  parameter 10:15
  remark "Max duty time in duty period with all legs not charter and no legs have block time > 4h [CC]"; 

%trip_penalty_duty_time_in_duty_period_not_4h_and_not_charter% =
  not all(leg(duty), leg.%time% >= 04:00) where (leg.%is_active_flight%) and
  not all(leg(duty), leg.%is_charter%) where (leg.%is_active_flight%);

%trip_penalty_duty_time_in_duty_period_not_4h_and_not_charter_penalty% = 
    if %trip_penalty_duty_time_in_duty_period_not_4h_and_not_charter_use_p% and
      %cabin_crew% then  
      sum(duty(chain), %duty_penalty_duty_time_in_duty_period_not_4h_and_not_charter_penalty%)
    else
      0;
      
%duty_penalty_duty_time_in_duty_period_not_4h_and_not_charter_penalty% = 
  if %duty_time_diff_period_not_4h_and_not_charter% and 
    %trip_penalty_duty_time_in_duty_period_not_4h_and_not_charter% then
    %trip_penalty_duty_time_in_duty_period_not_4h_and_not_charter_cost_p%
  else
    0;  

%duty_time_diff_period_not_4h_and_not_charter% = 
  (duty.%duty_time%(duty.union, True) - %trip_penalty_max_duty_time_in_duty_period_not_4h_and_not_charter_p%) > 0:00;
  
/* 
** Cost for exceeding weekly duty time limit 
** CR 67. A penalty must be added if the duty time per calendar week
** exceeds the limits.
** 
** The cost is meant for SKS CC, but it will be up to the planner 
** to use the appropriate costs, default = 0. 
*/
%trip_penalty_duty_time_week_use_p% = 
  parameter false
  remark "Use penalty for exceeding duty time per calendar week [CC]";

%trip_penalty_duty_time_week_cost_p% =
  parameter 0 
  remark "Penalty for exceeding duty time per calendar week [CC]";
 
%trip_penalty_max_duty_time_per_calendar_week_p% =
  parameter 41:00 
  remark "Max duty time per calendar week [CC]";

%trip_penalty_duty_time_week_penalty% =
  if %trip_penalty_duty_time_week_use_p% and 
    %cabin_crew% then
    %trip_penalty_duty_time_week_volume% *
    %trip_penalty_duty_time_week_cost_p%
  else 
    0;

%trip_penalty_duty_time_week_volume% =
  count(duty(chain)) 
  where (%duty_time_week_volume% > 0:00 and 
         duty.%is_last_on_duty_in_week%);

%duty_time_week_volume% =
  if duty.%is_last_on_duty_in_week% then 
    duty_time.%7x24_hrs_in_period%(round_down_week(duty.%start_hb%),
                                   round_down_week(duty.%start_hb%) + 7*24:00,
                                   fundamental.%night_upg%, 
                                   duty.union)
    - %trip_penalty_max_duty_time_per_calendar_week_p%
  else
    0:00;

/*
 * PENALTY FOR EXTENDED DUTIES
*/
%trip_penalty_for_extended_duties_header_p% =
    parameter ""
    remark "#HEADER# Extended Duties";
    
%duty_is_extended% =
  default(oma16.%is_extended_fdp%, false);

%trip_penalty_for_extended_duties% = 
    %trip_penalty_for_extended_duties_p% * %num_extended_duties_in_trip%;
%num_extended_duties_in_trip% =
   count(duty(trip))
   where(%duty_is_extended%);
%trip_penalty_for_extended_duties_p% = 
    parameter 0
    remark "Penalty for extended duties";
%trip_penalty_for_extended_duties_use_p% = 
    parameter false
    remark "Use penalty for extended duties";
    
%trip_penalty_for_extended_duty_last_in_trip% =
  if trip.%days% >= %trip_penalty_for_extended_duty_last_in_trip_days_p% and
    last(duty(trip), %duty_is_extended%) then
    %trip_penalty_for_extended_duty_last_in_trip_p%
  else 0;
%trip_penalty_for_extended_duty_last_in_trip_p% = 
  parameter 0
  remark "Penalty for extended duty last in trip";
%trip_penalty_for_extended_duty_last_in_trip_use_p% = 
  parameter false
  remark "Use penalty for extended duty last in trip";
%trip_penalty_for_extended_duty_last_in_trip_days_p% =
  parameter 3
  remark "Minimum days in trip to check extended duty last in trip";
    
 

/*
 *******************************************************
 * PENALTY FOR USE OF OMA16 REST BUFFER (CMS CR156)
 *******************************************************
 */

%use_oma16_rest_buffer_header_p% =
  parameter ""
  remark "#HEADER# OMA16 rest buffer";
  
%trip_penalty_used_oma16_rest_buffer% =
    default(if oma16.%oma16_rest_buffer_action% = "Cost" then
              oma16.%stability_penalty_for_minute_used_oma16_rest_buffer% * 
              sum(duty(trip), oma16.%minutes_used_oma16_rest_buffer%)
              where(duty.%is_on_duty%)
               / 0:01
            else 0, 0);

%use_oma16_max_duty_fdp_header_p% =
  parameter ""
  remark "#HEADER# OMA16 max duty in FDP";
  
%oma16_max_fdp_buffer_use_p% =
  parameter false remark "Use oma16 FDP buffer";
  
%oma16_penalty_for_max_fdp% =
  parameter 0 remark "Penalty for used every minute of oma16 FDP buffer";
  
%oma16_max_fdp_buffer_p% =
  parameter 0:00 remark "OMA16 max FDP buffer";

%trip_penalty_oma16_max_fdp% =
  if %oma16_max_fdp_buffer_use_p% then
    sum(duty(trip), %oma16_fdp_duty_buffer_penalty%) *
    %oma16_penalty_for_max_fdp%
  else 0;
  
%oma16_fdp_duty_buffer_penalty% =
  if duty_period.%is_last_duty_in_duty_period% then
    abs(nmin(0:00,
             oma16.%max_daily_fdp% -
             %oma16_max_fdp_buffer_p% -
             fdp.%time%)) / 0:01
  else 0;
    
  
/*
** SQUARE REST PENALTY
** This is specially tailored for KFL runs and can only be used for that.
** Only to be used with parameter-set pairing/KFL
*/  

%trip_penalty_fifo_square_rest_penalty_header_p% = parameter "" remark "#HEADER#FIFO / Square rest penalty";
%trip_penalty_fifo_square_rest_penalty_use_p% =
  parameter false
  remark "KFL: Use square rest penalty in cost function";

export %trip_penalty_fifo_square_rest_penalty% =
  %assigned_crew% * %_trip_penalty_fifo_square_rest_penalty%;

/* 
  Variable: %_trip_penalty_fifo_square_rest_penalty%
   1. Single DH duties should be as late as possible the calendar day before
      --> %duty_fifo_linear_units%
   2. The gap (rest) between the shorthaul and longhaul blocks should be as 
      evenly distributed as possible
      --> %duty_square_rest_penalty%
   3. The deadhead of a KFL should be as tight as possible to the end of 
      the shorthaul duty.
      --> duty.%time% / 0:05
      Other deadhead cost has to be tyrned off.
*/
%_trip_penalty_fifo_square_rest_penalty% =
  if trip.%num_duties% = 1 then 0 else
  if first(duty(trip), count(leg(duty)) = 1) /* single DH */
      then first(duty(trip), %duty_fifo_linear_units%)
  else /* KFL */
      first(duty(trip),%duty_square_rest_penalty% + duty.%time% / 0:05);

%duty_fifo_linear_units% = duty.%rest_time% / 0:05;

/*
 Variables: %duty_square_rest_penalty%, %duty_fifo_linear_units2%
 floor = 10:00, roof = 35:00, i.e. no gap is assumed to be less than
 10:00 or more than 35:00.
 roof - floor = 25:00, i.e. the span of the penalty.
 With 9 minute intervals, 
        the max value of %duty_fifo_linear_units2% is 133
        square it and 166*166 = 27556
 square function up to 27556 penalty for a gap of 30h
 47556 penalty for all gaps > 30h
*/
%duty_square_rest_penalty% =
  let square_penalty = %duty_fifo_linear_units2% * %duty_fifo_linear_units2%;
  if duty.%rest_time% > 35:00 then square_penalty + 20000
  else square_penalty;

%duty_fifo_linear_units2% =
  let ntime = nmin(nmax(%special_gap_time% - 10:00, 0:00), 25:00);
  ntime / 0:09;

%special_gap_time% =
/* counting gap from end of last onduty leg (skipping the dh) */
  default(
    next(duty(trip), duty.%start_utc%) -
    last(leg(duty), prev(leg(duty), leg.%end_utc%))
  , 0:00);
                      
/*********************************************************************
 * Section: Special costs for avoiding creating illegal duties
 *********************************************************************/

%special_cost_element%(int element) =
  if %special_cost_element_use%(element) then
     %special_cost_element_cost%(element)
  else 0;

table special_cost_elements(int element) =
  element ->
    export String %special_cost_element_header%,
      export Int %special_cost_element_cost%,
      export Bool %special_cost_element_use%;
    
  1 -> "Cost of breaking max time between meal breaks",
       %cost_of_breaking_max_time_btw_meal_breaks%,
	     %cost_of_breaking_max_time_btw_meal_breaks_use_p%;
	     
	2 -> "Penalty for meal breaks not long enough apart",
	     %penalty_meal_breaks_not_long_enough_apart%,
	     %penalty_meal_breaks_not_long_enough_apart_use_p%;
	     
  - -> "", 0, false;
end
	   
%special_costs_header_p% = parameter "" remark "#HEADER#Special Costs";

/* Cost to mirror the rule rules_meal_ccp.ind_max_time_btw_meal_breaks_ALL. 
   Avoids illegal subchain problems */

export %cost_of_breaking_max_time_btw_meal_breaks% =
  if rule_on(rules_meal_ccp.ind_max_time_btw_meal_breaks_ALL) then
    %_cost_of_breaking_max_time_btw_meal_breaks%
  else
    0;

%_cost_of_breaking_max_time_btw_meal_breaks% = 
  sum(duty(trip),
  if any(leg(duty),
         duty.%start_hb% >= %pp_start% and
         meal.%is_required% and
		 (meal.%break% or (is_last(leg(duty)) where (not meal.%is_standby%))) and
		 duty.%is_short_haul% and 
		 not meal.%is_standby% and
         meal.%time_to_next_meal_break% > meal.%max_time_to_meal_break%) then
         %cost_of_breaking_max_time_btw_meal_breaks_p%
      else
         0);
		 
%cost_of_breaking_max_time_btw_meal_breaks_use_p% =
  parameter true
  remark "Use cost of breaking max time between meal breaks";
  
%cost_of_breaking_max_time_btw_meal_breaks_p% = 
  parameter 21000000
  remark "Cost of breaking max time between meal breaks";
  
 
export %penalty_meal_breaks_not_long_enough_apart% =
  sum(duty(trip), %penalty_meal_breaks_not_long_enough_apart_p%)
  where (duty.%start_hb% >= %pp_start% and
         any(leg(duty),
             meal.%is_required% and
             meal.%is_meal_break_ok% and
             leg.%is_ac_employer_sk_sh% and
             default(meal.%time_since_previous_meal_break% < meal.%min_time_btw_meal_breaks_fd_sk_sh%, false)
            )
        );
		 
%penalty_meal_breaks_not_long_enough_apart_use_p% =
  parameter false
  remark "Use penalty for meal breaks that are not long enough apart (FD SH)";
  
%penalty_meal_breaks_not_long_enough_apart_p% = 
  parameter 100
  remark "Penalty for meal breaks that are not long enough apart, per duty (FD SH)";
  

/*********************************************************************
 * Section 6: Non additive penalties
 *            (should be mapped to %map_non_additive_cost_of_crr%)
 *********************************************************************/
export %trip_total_non_additive_cost_apc%(String base, 
                                          Int caldays, 
                                          Abstime start_day,
                                          Int duty_time_with_or_without_night_upg) = 
  %assigned_crew% * (
     %trip_penalty_xdays_trip_penalty_%(base, caldays) +
     (if %trip_penalty_exceeded_max_duty_in_x_day_trip_use_p% then
        %trip_penalty_exceeded_max_duty_in_x_day_trip%(caldays, duty_time_with_or_without_night_upg)
      else 0)
  );
  

/*
export %trip_total_non_additive_cost_apc%(String base, 
                                          Int caldays, 
                                          Abstime start_day) = 
  %trip_penalty_xdays_trip_penalty_%(base, caldays); */

/****************************************************************
 * Section 6: Group defs
 ***************************************************************/ 

group real_use_1 = %trip_cost_days_use_p%,
                   %trip_cost_hotel_use_p%,
                   %trip_cost_per_diem_use_p%,
                   %trip_cost_transport_use_p%,
                   %trip_cost_passive_use_p%; 

group soft_use_1 = %trip_penalty_duty_minute_use_p%,
                   %trip_penalty_ac_change_use_p%,
                   %trip_penalty_short_stop_use_p%,
                   %trip_penalty_layover_at_other_base_use_p%,
                   %trip_penalty_short_layover_use_p%,
                   %trip_penalty_late_checkout_on_last_duty_use_p%,
                   %trip_penalty_1_day_trip_use_p%,
                   %trip_penalty_2_day_trip_use_p%,
                   %trip_penalty_3_day_trip_use_p%,
                   %trip_penalty_4_day_trip_use_p%,
                   %trip_penalty_5_day_trip_use_p%, 
                   %trip_penalty_deadhead_in_roundtrip_with_same_ac_use_p%,
                   %trip_penalty_middle_duty_deadhead_use_p%,
                   %trip_penalty_several_middle_duty_deadheads_use_p%,
                   %trip_penalty_exceeded_max_duty_in_x_day_trip_use_p%,
                   %trip_penalty_expensive_hotel_stations_use_p%,
                   %trip_penalty_day_stop_use_p%,
                   %trip_penalty_duty_time_in_duty_period_use_p%,
                   soft_locks.%use_penalties%,
                   tor.%tor_penalty_use%,
                   %trip_penalty_fifo_square_rest_penalty_use_p%,
                   %trip_penalty_for_extended_duties_use_p%,
                   %trip_penalty_for_extended_duty_last_in_trip_use_p%, 
                   %trip_penalty_duty_time_in_duty_period_4h_or_charter_use_p%,
                   %trip_penalty_duty_time_in_duty_period_not_4h_and_not_charter_use_p%,
                   %trip_penalty_duty_time_week_use_p%;

/* Duty day costs */
group real_1 = %trip_cost_days_header_p%,
               %trip_cost_days_use_p%,
               %duty_day_cost_p%;

/* Hotel costs */
group real_2 = 
        %trip_cost_hotel_header_p%,
        %trip_cost_hotel_use_p%,
	      hotel.%hotel_default_cost_per_night_p%,
	      hotel.%hotel_default_check_in_p%,
	      hotel.%hotel_default_check_out_p%,
	      hotel.%hotel_default_transport_time_p%;

/* Per diem */
group real_3 = %trip_cost_per_diem_header_p%,
               %trip_cost_per_diem_use_p%;

        
/* Local transport costs */
group real_4 = %trip_cost_transport_header_p%,
               %trip_cost_transport_use_p%,
               hotel.%hotel_default_transport_cost_p%;

/* Passive costs */
group real_5 = 
               %trip_cost_passive_header_p%,
               %trip_cost_passive_use_p%,
               %leg_cost_dh_hour_p%,
               %leg_cost_oag_hour_p%,
               %leg_cost_gt_hour_p%;
               /*%illegal_dh_overcover_mult%;*/

/* Duty minute penalty */
group soft_1 = %trip_penalty_duty_minute_header_p%,
               %trip_penalty_duty_minute_use_p%,
               %trip_penalty_duty_minute_penalty_p%;

/* AC-change penalty */
group soft_2 = %trip_penalty_ac_change_header_p%,
               %trip_penalty_ac_change_use_p%,
               %leg_penalty_ac_change_p%;

/* Short stop penalty (Duty free break penalty) */
group soft_4 = %trip_penalty_short_stop_header_p%,
               %trip_penalty_short_stop_use_p%,
               %trip_penalty_short_stop_penalty_p%;

/* Layover at other base penalty */
group soft_5 = %trip_penalty_layover_at_other_base_header_p%,
               %trip_penalty_layover_at_other_base_use_p%,
               %trip_penalty_layover_at_other_base_penalty_p%;
               
/* Check-out after midnight on last duty penalty */               
group soft_6 = %trip_penalty_late_checkout_on_last_duty_header_p%,
               %trip_penalty_late_checkout_on_last_duty_use_p%,
               %trip_penalty_late_checkout_on_last_duty_penalty_p%;
               
/* Trip length penalty*/
group soft_7 = %trip_penalty_trip_length_header_p%, 
               %trip_penalty_1_day_trip_use_p%,
               %trip_penalty_2_day_trip_use_p%,
               %trip_penalty_3_day_trip_use_p%,
               %trip_penalty_4_day_trip_use_p%,
               %trip_penalty_5_day_trip_use_p%,
               %trip_penalty_xday_trip_penalty_1%,
               %trip_penalty_xday_trip_penalty_2%,
               %trip_penalty_xday_trip_penalty_3%,
               %trip_penalty_xday_trip_penalty_4%,
               %trip_penalty_xday_trip_penalty_5%;
             
               
 /* Deadhead  in roundtrip with same AC penalty */
group soft_8 = %trip_penalty_deadhead_in_roundtrip_with_same_ac_header_p%,
               %trip_penalty_deadhead_in_roundtrip_with_same_ac_use_p%,
               %trip_penalty_deadhead_in_roundtrip_with_same_ac_penalty_p%;
               
/* Middle duty deadheads */
group soft_9 = %trip_penalty_middle_duty_deadhead_header_p%,
               %trip_penalty_middle_duty_deadhead_use_p%,
               %trip_penalty_middle_duty_deadhead_penalty_p%,
               %trip_penalty_several_middle_duty_deadheads_header_p%,
               %trip_penalty_several_middle_duty_deadheads_use_p%,
               %trip_penalty_several_middle_duty_deadheads_penalty_p%;
              
/* Exceeded max duty in x day trip */
group soft_10 = %trip_penalty_exceeded_max_duty_in_x_day_trip_header_p%,
                %trip_penalty_exceeded_max_duty_in_x_day_trip_use_p%,
                %max_duty_in_1_day_trip_p%,
                %max_duty_in_2_day_trip_p%,
                %max_duty_in_3_day_trip_p%,
                %max_duty_in_4_day_trip_p%,
                %max_duty_in_5_day_trip_p%, 
                %trip_penalty_exceeded_max_duty_in_1_day_trip_penalty_p%, 
                %trip_penalty_exceeded_max_duty_in_2_day_trip_penalty_p%,
                %trip_penalty_exceeded_max_duty_in_3_day_trip_penalty_p%,
                %trip_penalty_exceeded_max_duty_in_4_day_trip_penalty_p%,
                %trip_penalty_exceeded_max_duty_in_5_day_trip_penalty_p%; 
 
/* Expensive hotel stations */                
group soft_11 = %trip_penalty_expensive_hotel_stations_header_p%,
                %trip_penalty_expensive_hotel_stations_use_p%,
                %trip_penalty_expensive_hotel_station_cost_p%,
                trip_penalty_expensive_hotel_stations_set;

/* Day stop */
group soft_12 = %trip_penalty_day_stop_header_p%,
                %trip_penalty_day_stop_use_p%,
                %trip_penalty_day_stop_cost_p%;

/* Duty time in duty period */                
group soft_13 = %trip_penalty_duty_time_in_duty_period_header_p%,
                %trip_penalty_duty_time_in_duty_period_use_p%,
                %trip_penalty_duty_time_in_duty_period_cost_p%,
                %trip_penalty_max_duty_time_in_duty_period_ordinary_p%,
                %trip_penalty_max_duty_time_in_duty_period_4h_p%,
                %trip_penalty_duty_time_in_duty_period_4h_or_charter_use_p%,
                %trip_penalty_duty_time_in_duty_period_4h_or_charter_cost_p%,
                %trip_penalty_max_duty_time_in_duty_period_4h_or_charter_p%, 
                %trip_penalty_duty_time_in_duty_period_not_4h_and_not_charter_use_p%,
                %trip_penalty_duty_time_in_duty_period_not_4h_and_not_charter_cost_p%,
                %trip_penalty_max_duty_time_in_duty_period_not_4h_and_not_charter_p%,
                %trip_penalty_duty_time_week_use_p%,
                %trip_penalty_duty_time_week_cost_p%,
                %trip_penalty_max_duty_time_per_calendar_week_p%,
                %trip_penalty_for_extended_duties_header_p%,
                %trip_penalty_for_extended_duties_use_p%,
                %trip_penalty_for_extended_duties_p%,
                %trip_penalty_for_extended_duty_last_in_trip_use_p%,
                %trip_penalty_for_extended_duty_last_in_trip_days_p%,
                %trip_penalty_for_extended_duty_last_in_trip_p%;

/* OMA16 rest buffer */                
group soft_14 = %use_oma16_rest_buffer_header_p%,
                oma16.%stability_oma16_rest_buffer_cost_use_p%,
                oma16.%oma16_rest_after_duty_buffer%,
                oma16.%stability_penalty_for_minute_used_oma16_rest_buffer%;
                
/* OMA16 max FDP buffer */
group soft_15 = %use_oma16_max_duty_fdp_header_p%,
                %oma16_max_fdp_buffer_use_p%,
                %oma16_max_fdp_buffer_p%,
                %oma16_penalty_for_max_fdp%;

/* Special costs. */
group soft_16 = %special_costs_header_p%,
                %cost_of_breaking_max_time_btw_meal_breaks_use_p%,
                %cost_of_breaking_max_time_btw_meal_breaks_p%,
                %penalty_meal_breaks_not_long_enough_apart_use_p%,
                %penalty_meal_breaks_not_long_enough_apart_p%;

/* Standby costs */
group soft_17 =
  %use_sb_max_usability_header_p%,
  %trip_penalty_sb_late_end_use_p%,
  %late_sb_start%,
  %late_sb_start_penalty%,
  %trip_penalty_correct_sb_placement_use_p%,
  %trip_penalty_correct_sb_placement_cost%,
  %trip_penalty_sb_two_day_match_use_p%,
  %SB_block_short_sb_threshold%,
  %two_day_sb_penalty%;

group soft_18 =
    %trip_penalty_short_layover_header_p%,
    %trip_penalty_short_layover_use_p%,
    %trip_penalty_short_layover_penalty_p%,
    %trip_penalty_short_layover_minimum_p%,
    trip_penalty_short_layover_stations_set;

/* End of file */

