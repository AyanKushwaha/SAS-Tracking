/* -*- crc -*-
 *
 * Purpose:
 *   This module contains common meal stop definitions for flight and cabin crew
 *   used in industrial rules, costs and select filters.
 *
 * Sections:
 * 1:   Meal basic definitions section.
 * 1.1:   Defines if Meal is needed in duty.
 * 1.2:   Defines time before Meal is needed.
 * 1.3:   Defines duration of Meal break.
 * 1.4:   Defines start/end times used in Meal calculations.
 * 1.5:   Defines Meal regions.
 * 1.6:   Defines if and where Meals are allowed.
 * 2:   Meal break calculation section.
 * 2.1:   Allowed Meal breaks allocation.
 * 2.2:   Meal time variables.
 * 2.3:   Exceptions from normal consecutive meal break allocations
 * 2.4:   Best Meal Break allocation
*  3.     Duty Meal Strings representations
 *
 * Created by:
 *   Henrik Albertson, 14-Aug-2006
 *   Hasse Eliasson, 2008 (point 2.4)
 *
 * Major changes:
 * Date   Name             Comment
 * 081216 Hasse Eliasson   Industrialized code + Restructure.
 * 150603 Lars Westerlind  Duty Meal Strings
 *
 */

root module meal
import levels;
import fundamental;
import base_utils;
import keywords;
import crew_pos;
import leg;
import duty;
import trip;
import base_product;
import connection;
import system_db_parameters;
import parameters;
import model_iata;


/****************************************************************
 * Section 1: Meal basic definitions section.
 *            This section defines the basic values for Meal
 *            and basic variables used in calculations.
 ***************************************************************/
/****************************************************************
 * Section 1.1: Defines if Meal is needed in duty.
 ***************************************************************/

/* Some comments about CC:
 * - SKD:  Meal on ground in ac must start 5 hrs from c/i, but
 *         is not needed to check since there is 
 *         always an active leg 5 hrs from c/i and 
 *         that is all that is needed.
 *
 *         However, the meal is actually eaten in the air,
 *         so adjusting the meal break start/end times to cover for
 *         that would be a more correct solution, but this is not done
 *         in the old installation at SAS so it not done here either...
 */
/* Agreement: FC 13:25 1,2,6, CAU K.1,a,b, NKF/SBK 10, SCCA J.1 */

table duty_requiring_meal_break =
  system_db_parameters.%cba16_meal_corr_valid%(duty.%start_day%),
         %flight_crew%,
          %legality_region%,
                        duty.%is_ac_employer_sk_sh%,
                        duty.%is_ac_employer_svs%-> 
                                export %duty_requiring_meal_break%,
                                       export %duty_requiring_two_breaks%;
  -,     True,  -  , True,  false    -> 5:45,  10:00; 
  
True,  False, "SKN" ,   -,    false  -> if not (system_db_parameters.%K20_skn_cc_meal_stop%(duty.%start_day%)and duty.%is_ac_employer_skn%) then %_max_time_to_first_meal_break% else 5:45,  10:00;
True,  False, "SKS" ,   -,    false  -> if not (system_db_parameters.%K20_sks_cc_meal_stop%(duty.%start_day%)and duty.%is_ac_employer_sks%) then %_max_time_to_first_meal_break% else 5:45,  10:00;
True,  False, "SKD" ,   -,    false  -> if not (system_db_parameters.%K20_skd_cc_meal_stop%(duty.%start_day%)and duty.%is_ac_employer_skd%) then %_max_time_to_first_meal_break% else 5:45,  10:00;
False, False,   -   ,   -,    false  -> 6:00,  10:00;
-,     -,     "SVS" , False,   True  -> 5:00,  10:00;
  -,   True,   -    , False,  false  -> 5:45,  10:00;
  -,     -,    -    ,   -  ,   -     -> void_reltime, void_reltime;
end

/* true if duty time > 10:00 - duty level */
export %duty_requires_two_meal_breaks% =
  default(%two_required_meals_duty_time% > %duty_requiring_two_breaks%, False);

/* true if time from meal break end to last block-on > 5:00 - leg level */
%early_meal_break_means_another_break_required% =
  %duty_period_end% - %break_end% > %max_time_btw_meal_breaks%;
  
/* true if 2 meal breaks required due to either of the above - leg level */
%duty_needs_two_meal_breaks% =
  %duty_requires_two_meal_breaks% or
  %early_meal_break_means_another_break_required%;

/****************************************************************
 * Section 1.2: Defines time before Meal is needed.
 ***************************************************************/
table max_time_btw_meal_breaks =
  %flight_crew%, 
  %legality_region%,
  leg.%is_ac_employer_sk_sh%,
  leg.%is_ac_employer_svs%->
    export %max_time_to_first_meal_break%,
    export %max_time_btw_meal_breaks%;

  /* 4ExNG CC */
       false, "SKN",     -,   -   -> if not (system_db_parameters.%K20_skn_cc_meal_stop%(leg.%start_date%)and duty.%is_ac_employer_skn%) then %_max_time_to_first_meal_break% else 5:45,  5:00;
       false, "SKS",     -,   -   -> if not (system_db_parameters.%K20_sks_cc_meal_stop%(leg.%start_date%)and duty.%is_ac_employer_sks%) then %_max_time_to_first_meal_break% else 5:45,  5:00;
       false, "SKD",     -,   -   -> if not (system_db_parameters.%K20_skd_cc_meal_stop%(leg.%start_date%)and duty.%is_ac_employer_skd%) then %_max_time_to_first_meal_break% else 5:45,  5:00;
  /* Flight crew K15 */
        true,  - ,    true,   -    -> 5:45,  5:00;
  /* FD and CC crew SVS */
       -,    "SVS",  false, true   -> 5:00, 5:00; 
  &
  /* Flight crew */
       true,  "SKD", -,       -    -> 5:45,  5:00;
       true,  "SKN", -,       -    -> 5:45,  5:00;
       true,  "SKS", -,       -    -> 5:45,  5:00;
  
       -,     -,     -,       -    -> void_reltime, void_reltime;
end

%_max_time_to_first_meal_break% =
  if system_db_parameters.%skn_cc_oct2016_valid%(trip.%start_hb%) then
    %_max_time_to_first_meal_break_parameters%
  else
    6:00;

%_max_time_to_first_meal_break_parameters% =
  if duty.%is_ac_employer_skn% then
    system_db_parameters.%meal_skn_time_to_frst_brk%(duty.%start_day%)
  else if duty.%is_ac_employer_sks% then
    system_db_parameters.%meal_sks_time_to_frst_brk%(duty.%start_day%)
  else if duty.%is_ac_employer_skd% then
    system_db_parameters.%meal_skd_time_to_frst_brk%(duty.%start_day%)
  else
    6:00;

%add_hrs_if%(Reltime value, Bool condition) = if condition then value else 0:00;

/* For SKN CC there are to cases for %max_time_to_first_meal_break%:
     #1: Max 6h from check in      (normal case)
     #2: Max 5h from block off     (from blockoff case)
   The first case is the normal, i.e. we always use ci for %duty_period_start%,
   but then we have to compensate with the difference for the second case.*/
%from_blockoff_mod_SKN_CC% =  nmax(1:00 - (%duty_block_off% - %duty_check_in%),
                                   0:00);


/****************************************************************
 * Section 1.3: Defines duration of Meal break.
 ***************************************************************/

/* Meal break duration leg variables definition.*/
export %leg_cnx_time% = leg.%scheduled_connection_time%;
export %leg_time% = leg.%scheduled_time%;

table meal_break_duration_limits =
  %flight_crew% ,
  duty.%is_ac_employer_sk_sh%,
  duty.%is_ac_employer_svs%,
  %legality_region%,
  %next_leg_active_flight%,
  %leg_has_debriefing% ->
    export %meal_stop_min_duration%,
    %meal_stop_min_duration_relaxed%,
    %meal_on_ground_in_ac_min_duration%,
    %_meal_during_flight_min_duration_tbl%,
    export %_meal_during_flight_start_time_shift%;
/*______________________________________________________________________________________________________ */
/* | FD   |SK_SH  |SVS empl  |region       |nxtActv|debrief|->|stop|relax| grnd| air |shift| */
   true,   true , -,         -             , -     , false  -> 1:30, 1:15, 0:00, 1:10, 0:00;
   true,   true , -,         -             , -     , true   -> 2:00, 1:45, 0:00, 1:10, 0:00;
   true,   false, -,         "SKN"         , true  , false  -> 1:45, 1:30, 0:00, %_meal_during_flight_min_duration%,
                                                                                            0:00;
   true,   false, -,         "SKN"         , false , false  -> 1:30, 1:15, 0:00, %_meal_during_flight_min_duration%,
                                                                                            0:00;
   true,   false, -,         "SKN"         , true  , true   -> 2:15, 2:00, 0:00, %_meal_during_flight_min_duration%,
                                                                                            0:00;
   true,   false, -,         "SKN"         , false , true   -> 2:00, 1:45, 0:00, %_meal_during_flight_min_duration%,
                                                                                            0:00;
  
  false,   -    , -,          "SKS"         , -     , -      -> 1:30, 1:15, if not (system_db_parameters.%K20_sks_cc_meal_stop%(leg.%start_date%) and duty.%is_ac_employer_sks%) then %_4x% else 12:00,
                                                                                   if not (system_db_parameters.%K20_sks_cc_meal_stop%(leg.%start_date%)and duty.%is_ac_employer_sks%) then %_meal_during_flight_min_duration% else 1:10,
                                                                                              0:00;
  false,   -    , -,         "SKN"         , -     ,-       -> 1:30, 1:15, if not (system_db_parameters.%K20_skn_cc_meal_stop%(leg.%start_date%) and duty.%is_ac_employer_skn%) then %_4x% else 12:00,
                                                                                  if not (system_db_parameters.%K20_skn_cc_meal_stop%(leg.%start_date%) and duty.%is_ac_employer_skn%) then %_meal_during_flight_min_duration% else 1:10,
                                                                                              0:00;																							  
  false,   -    , -,         "SKD"         , -     ,-       -> 1:30, 1:15, if not (system_db_parameters.%K20_skd_cc_meal_stop%(leg.%start_date%) and duty.%is_ac_employer_skd%) then %_4x% else 12:00,
                                                                                  if not (system_db_parameters.%K20_skd_cc_meal_stop%(leg.%start_date%) and duty.%is_ac_employer_skd%) then %_meal_during_flight_min_duration% else 1:10,
                                                                                              0:00;	
  true,     false, -,        "SKI"         , -     , -      -> 1:30, 1:15, 0:00, 1:10, 0:00;
 -   ,     false, true,      "SVS"         , -     , -      -> 1:15, 1:00, 0:40, 0:55, 0:00;
 -, -, -, -, -, - -> void_reltime, void_reltime, void_reltime, void_reltime, void_reltime;
end

export %meal_during_flight_min_duration% =
  nmax(%_meal_during_flight_min_duration_tbl%, %meal_during_flight_start_time_shift% + %meal_landing_limitation%); 
/* SASCMS-3086. V code cnx time is pick up from the meal_airport table */
%_4x% = nmax(%_pick_up_mealcode_v_mincnx%, 0:50);
%_x1% = nmax(%_pick_up_mealcode_v_mincnx%, 1:00); /* SKD */
%_x2% = nmax(%_pick_up_mealcode_v_mincnx%, 0:50); /* SKN */
%_x3% = nmax(%_pick_up_mealcode_v_mincnx%, 1:00); /* SKS */

%_pick_up_mealcode_v_mincnx% = default(%mealcode_v_mincnx_for_station%, 0:00);
  
/* Indicating that the next flight is active. This is used to calculate time
 * for Pre-Flight Inspection (PFI)
 */
%next_leg_active_flight% =
  default(next(leg(duty), leg.%is_active_flight%), false);

%leg_has_debriefing% =
  leg.%is_any_lc% and
  default(next(leg(duty), not leg.%is_any_lc%), false); 

/* NB! Use with care..*/
%duty_ac_family% = 
  default(first(leg(duty), leg.%ac_family%) where (leg.%is_active_flight%),
          "");
%_meal_during_flight_min_duration% =
  if duty.%k4exng_cc_sp5_1_valid%(duty.%start_day%) then
   /* CC 4ExNG */
   if leg.%is_domestic% then
      1:31
    else
      2:01
  else
    /* FC before 4ExNG */
    if %meal_allocation_skn_fc% then
      1:10
    else
      1:11;

/* SASCMS-5797, vallid from 1jun2013 */
export %valid_meal_not_too_close_cc% =
if not ((system_db_parameters.%K20_skn_cc_meal_stop%(duty.%start_hb%) and duty.%is_ac_employer_skn%) or (system_db_parameters.%K20_sks_cc_meal_stop%(duty.%start_hb%) and duty.%is_ac_employer_sks%) or (system_db_parameters.%K20_skd_cc_meal_stop%(duty.%start_hb%) and duty.%is_ac_employer_skd%))
    then
         (default(%cabin_crew%, true) 
          and %agreement_valid%("meal_not_too_close_cc", duty.%start_hb%))
    else
false;

export %in_flight_meal_delay% = parameter 0:00 minvalue 0:00
remark "Meal: Time after block off for earliest start of meal stop";

%meal_during_flight_start_time_shift% = 
  if %in_flight_meal_delay% > 0:00 then
    %in_flight_meal_delay%
  else %_meal_during_flight_start_time_shift%;

/****************************************************************
 * Section 1.4: Defines start/end times used in Meal calculations.
 ***************************************************************/
/* Meal start/end definition for legs. */
export %ground_meal_start% = leg.%activity_scheduled_end_time_UTC% + 
    %ground_meal_walktime_start%;

export %flight_meal_start% = leg.%activity_scheduled_start_time_UTC% + 
                             %meal_during_flight_start_time_shift%;
export %ground_meal_end% = 
  default(next(leg(duty), leg.%activity_scheduled_start_time_UTC%),
          leg.%activity_scheduled_start_time_UTC%)-
        %ground_meal_walktime_end%;

export %ground_meal_walktime_start% = parameter 0:00 minvalue 0:00
remark "Meal: Time after arrival for earliest start of ground meal stop";

export %ground_meal_walktime_end% = parameter 0:00 minvalue 0:00
remark "Meal: Time before departure for latest end of ground meal stop";


export %flight_meal_end% =
  leg.%activity_scheduled_end_time_UTC% - %meal_landing_limitation%;

export %meal_landing_limitation% = parameter 0:00 minvalue 0:00
remark "Meal: Time before block on for latest end of meal stop";

/* Agreement: FC 13:25.1, CAU K06 K.1, NKF 9, SCCA K06 6
 * Note that the *_act variables are dummies and are redefined in tracking.
 */
table meal_duty_period_definition =
  duty.%k4exng_cc_sp5_1_valid%(duty.%start_day%),
  %flight_crew%, %legality_region% ->
    export %duty_period_start%,
    export %duty_period_end%,
    export %duty_period_start_act%,
    export %duty_period_end_act%;
  
  /* 4ExNG CC */
  true ,   -  ,   -   -> %duty_check_in% , %duty_block_on%, void_abstime, void_abstime;

  /* Flight crew */
  false, true , "SKD" -> %duty_check_in% , %duty_block_on%, void_abstime, void_abstime;
  false, true , "SKN" -> %duty_check_in% , %duty_block_on%, void_abstime, void_abstime;
  false, true , "SKS" -> %duty_check_in% , %duty_block_on%, void_abstime, void_abstime;
  false, true , "SKI" -> %duty_check_in% , %duty_block_on%, void_abstime, void_abstime;
  
/* Flight crew - SVS*/
  false  , true , "SVS" -> %duty_check_in% , %duty_block_on%, void_abstime, void_abstime;

  /* Cabin crew - DK */
  false, false, "SKD" -> %duty_check_in% , %duty_block_on%, void_abstime, void_abstime;
  /* Cabin crew - NO */
  false, false, "SKN" -> %duty_check_in% , %duty_block_on%, void_abstime, void_abstime;
  /* Cabin crew - SE */
  false, false, "SKS" -> %duty_block_off%, %duty_block_on%, void_abstime, void_abstime;

  /* Cabin crew -  SVS */
  false , false, "SVS" -> %duty_check_in% , %duty_block_on%, void_abstime, void_abstime;
  /*  Default */
  -    ,-    , -      -> void_abstime    , void_abstime   , void_abstime, void_abstime;
end

/* Modifications for standbys effect on start/end times of duty. */
%duty_check_in% =
  first(leg(duty), leg.%ci_start_utc%)
  where (not %starting_standby%);
  
%duty_check_out% = 
  last(leg(duty), leg.%co_end_scheduled_UTC%)
  where (not %ending_standby%);
  
%duty_block_off% = 
  first(leg(duty), leg.%activity_scheduled_start_time_UTC%)
  where (not %starting_standby%);
  
%duty_block_on% = 
  last(leg(duty), leg.%activity_scheduled_end_time_UTC%)
  where (not %ending_standby%);

export %duty_block_time% =  
  %duty_block_on% - %duty_block_off%; 

export %duty_duty_time% =  
  %duty_block_on% - %duty_check_in%; 
  
export %is_standby% =
  %starting_standby%;  

/* In order to make it possible to force meal stop on a airport standby first in
 * duty we need to exclude it from starting standbys.
 */  
%starting_standby% =  
  leg.%is_standby_at_home% or leg.%is_standby_at_hotel%;

%ending_standby% =  
  leg.%is_standby_at_home% or leg.%is_standby_at_hotel% or
  leg.%is_standby_at_airport%;


/* Agreement: NKF , SCCA K07
 * Note that the *_act variables are dummies and are redefined in tracking.
 * Added Cimber FD, calculating duty time not block time.
 */
table two_required_meals_duty_period_definition =
  %flight_crew%,
         duty.%is_ac_employer_qa%
               -> export %two_required_meals_duty_time%,
                                     export %two_required_meals_duty_time_act%;
  True,  False -> %duty_block_time%, void_reltime;
  True,  True  -> %duty_duty_time%,  void_reltime;  
  False, -       -> if not ((system_db_parameters.%K20_skn_cc_meal_stop%(duty.%start_hb%) and duty.%is_ac_employer_skn%) or (system_db_parameters.%K20_skd_cc_meal_stop%(duty.%start_hb%) and duty.%is_ac_employer_skd%) or (system_db_parameters.%K20_sks_cc_meal_stop%(duty.%start_hb%) and duty.%is_ac_employer_sks%)) then %duty_duty_time% else %duty_block_time%,  void_reltime;
  -,     -     -> void_reltime,      void_reltime;
end


/****************************************************************
 * Section 1.5: Defines Meal regions.
 ***************************************************************/

%legality_region% =
  if %flight_crew% and trip.%crew_is_on_loan% then
    trip.%region_crew_is_on_loan_to%  
  else
    trip.%region%;
  
%leg_region% = 
  if leg.%fd_employer% <> "" then
    leg.%fd_employer%
 else if leg.%flight_carrier% in meal_companies then
  leg.%homebase_region%
 else "";

/* Legs must have a valid meal region to be considered for meals on that flight.
 */
export %meal_region% = if %has_valid_meal_region% then
                         %leg_region%
                       else "";

%has_valid_meal_region% =
  default(%leg_region% in meal_regions, false);

set meal_regions = external string "meal_customer"."region";

set meal_companies = external string "meal_customer"."company";

set meal_base_stations = "ARN", "CPH", "OSL", "SVG", "TRD";

set meal_sks_base_stations = "ARN";

set meal_skn_base_stations = "OSL", "SVG", "TRD";

%is_base_station%(String station) = station in meal_base_stations;

%is_sks_base_station%(String station) = station in meal_sks_base_stations;

%is_skn_base_station%(String station) = station in meal_skn_base_stations;

%leg_departs_base_station% =
  %is_base_station%(leg.%start_station%);

%leg_departs_sks_base_station% =
  %is_sks_base_station%(leg.%start_station%);

%leg_departs_skn_base_station% =
  %is_skn_base_station%(leg.%start_station%);

%leg_arrives_base_station% =
  %is_base_station%(leg.%end_station%);

/****************************************************************
 * Section 1.6: Defines if and where Meals are allowed.
 ***************************************************************/

 
 /*This table controls if flights for a meal region should be automatically
  * assigned meals by the system.
  * Note: For meal load, this is per owner of a flight,
          while the legality is per crew employment region.
          For meal stops, this is always true, but see the
          table allowed_meal_breaks below */
table meal_assignment_activation(Bool meal_stop) =
  meal_stop, %meal_region% ->
    export %do_meal_assign%;
/*________________ */
/*stop , region->|assign| */
  false, "SKD" -> true;
  false, "SKN" -> true;
  false, "SKS" -> true;
  false, "SVS" -> true;
  false, "SKI" -> false;
  true,  -     -> true;
  -,     -     -> false;
end


%meal_during_flight_allowed% =
 %meal_during_flight_allowed_general% 
 and %meal_during_flight_allowed_specific%; 

table allowed_meal_breaks =
  alias astop = %do_meal_assign%(true),
        aload = %do_meal_assign%(false);
  duty.%k4exng_cc_sp5_1_valid%(duty.%start_day%),
  %flight_crew%, %legality_region%, leg.%is_long_haul% ->
    %meal_stop_allowed%,
    %meal_on_ground_in_ac_allowed%,
    %meal_during_flight_allowed_general%;
/*___________________________________________________ */
/*4ExNG|  FC  |region| LH   |->|stop | ground| air  | */
  true , -    , "SKN", -     -> astop, if not(system_db_parameters.%K20_skn_cc_meal_stop%(duty.%start_hb%) and duty.%is_ac_employer_skn%) then aload else false , aload;
  true , -    , "SKS", -     -> astop, if not(system_db_parameters.%K20_sks_cc_meal_stop%(duty.%start_hb%) and duty.%is_ac_employer_sks%) then aload else false , aload;
  true , -    , "SKD", -     -> astop, if not(system_db_parameters.%K20_skd_cc_meal_stop%(duty.%start_hb%) and duty.%is_ac_employer_skd%) then aload else false , aload;
  false, true , "SKD", -     -> astop, false , aload;
  false, true , "SKN", -     -> astop, false , aload;
  false, true , "SKS", -     -> astop, false , aload;
  false, false, "SKD", true  -> false, false , aload;
  false, false, "SKD", false -> astop, aload , false;
  false, false, "SKN", -     -> astop, aload , aload;
  false, false, "SKS", -     -> astop, aload , aload;
    -  ,   -  , "SVS", -     -> astop, aload , aload;
  -    , -    , -    , -     -> false, false , false;
end



%meal_prohibit_flight_table% =
    %etab_path%(%meal_prohibit_flight_table_p%);

%meal_prohibit_flight_table_p% = 
  parameter "meal_prohibit_flight"   
  remark "meal_flight_prohibit table, prohibit meal load on certain flights";

%meal_during_flight_allowed_specific% = not %prohibit_meal_on_flight%;

%prohibit_meal_on_flight% = 
    %prohibit_meal%("AC-type", leg.%ac_type%)
    or %prohibit_meal%("Flight", %meal_flight_id%)
    or %prohibit_meal%("Route", %meal_route%);

%meal_route% = concat(leg.%start_station%,"-",leg.%end_station%);

%meal_flight_id% = concat(leg.%flight_carrier%, " ", 
         format_int(leg.%flight_nr%,"%04d"));

%prohibit_meal%(string type, string id) =
  default(%_prohibit_meal%(type, id, leg.%region%) > 0, false)
  or default(%_prohibit_meal%(type, id, "*") > 0, false);

table meal_prohibit_flight(string type, string id, string region) =
    fundamental.%main_cat%,
    region,
    type,
    id,
    leg.%start_hb%,
    leg.%start_hb%-24:00-> int %_prohibit_meal%;
    external %meal_prohibit_flight_table%;
    maincat,
    region,
    type,
    identifier,
    >= validfrom, < validto -> row_number;
    -, -, -, -, -, - -> void_int;
end

/* Agreement: CAU K06 K.1b, SCCA K06 6 */
%allowed_station_for_meal_stop% =
  /* For short night rests the last leg in 
  * the duty pass is valid for meal stop */
  leg.%is_last_in_duty% or
  %_allowed_station_for_meal_stop%;

table allowed_stations_for_meal_stop =
  duty.%k4exng_cc_sp5_1_valid%(duty.%start_day%),
  %flight_crew%, %legality_region% ->
    %_allowed_station_for_meal_stop%;
  false, false, "SKD"   -> leg.%arrives_at_homebase%;
  -    , -    , -       -> true;
end


/* Some stations require a longer connection time than the agreement limit,
 * likewise must the restaurant be open in order for a meal stop to take place.*/
export %meal_stop_req_connection_time% =
    nmax(%meal_stop_min_duration%, default(%meal_stop_min_cnx_for_station%, 0:00));

%restaurant_is_open% = not void(%_restaurant_is_open%);

%meal_airport_table% = %etab_path%(%meal_airport_table_p%);
%meal_airport_table_p% =
  parameter "meal_airport"
  remark "Meal: Min cnx for meal stop and restaurant opening hours table";

table req_for_meal_stop_at_station =
  leg.%end_station%, %legality_region%, leg.%start_hb%, leg.%end_od% ->
    Reltime %meal_stop_min_cnx_for_station%,
    Reltime %_restaurant_is_open%;
  external %meal_airport_table%;
  station, region, (validfrom, validto(, (rest_open, rest_close) ->
    mealstop_mincnx,
    rest_open;
  -, -, -, - -> void_reltime, void_reltime;
end

/* SASCMS-3086. V code cnx time is pick up from the meal_airport table
 * is not depended on the restaurant openings times
 */
table req_for_v_meal_stop_at_station =
  leg.%end_station%, %legality_region%, leg.%start_hb% ->
    Reltime %mealcode_v_mincnx_for_station%;
  external %meal_airport_table%;
  station, region, (validfrom, validto( ->
    meal_in_ac_mincnx;
  -, -, - -> void_reltime;
end

/* Agreement: CAU K06 K.1c, NKF/SBK 10.3, SCCA K06 6 */
table allowed_stations_for_meal_on_ground_in_ac =
  duty.%k4exng_cc_sp5_1_valid%(duty.%start_day%),
  %flight_crew%, %legality_region% ->
    %allowed_station_for_meal_on_ground_in_ac%;
  true ,   -  ,   -     -> not leg.%arrives_at_SAS_base%;
  false, false, "SKD"   -> not leg.%arrives_at_homebase%;
  false, false, "SVS"   -> not leg.%arrives_at_homebase%;
  false, false, "SKN"   -> not leg.%arrival_is_interscand% or
                           leg.%end_station% = "LYR";
  false, false, "SKS"   -> leg.%end_station% <> "ARN";
  false, true ,   -     -> false;
  
    -  ,   -  ,   -     -> true;
end

/* Agreement: CAU K06 K.1d */
table meal_on_ground_in_ac_exceptions =
  duty.%k4exng_cc_sp5_1_valid%(duty.%start_day%),
  %flight_crew%, %legality_region% ->
    %meal_on_ground_in_ac_exception%;
  true ,   -  ,   -     -> false;
  false, false, "SKD"   -> %_meal_load_exception% and
                           next(leg(duty), %_meal_load_exception%);
    -  ,   -  ,   -     -> false;
end

/*
** Agreement: CAU K06 K.1d
**
** K12 - service crew need no longer required.
**
** note: is redefined for tracking in meal_cct
*/
%_meal_load_exception% =
  %leg_time% >= 2:00 and
  (parameters.%k12_skd_cc_sp4_3_valid%(duty.%start_hb%) or
   crew_pos.%total_cabin_crew_service_need% > 0);

/* Agreement: FC 13:25 6 */
table meal_during_flight_exceptions =
  parameters.%k15sk_jan16_valid%(duty.%start_day%),
  %flight_crew%,
  leg.%is_ac_employer_sk_sh%,
  %legality_region% ->
    %meal_on_board_exception%;
  true, true, true, -    -> %leg_is_CPH_ARN_or_vv% or %leg_is_CPH_OSL_or_vv%;
  &
  -   , true, -   ,"SKD" -> %leg_is_CPH_ARN_or_vv% or %leg_is_CPH_OSL_or_vv%;
  -   , true, -   ,"SKN" -> %leg_is_CPH_ARN_or_vv% or %leg_is_CPH_OSL_or_vv%;
  -   , true, -   ,"SKS" -> %leg_is_CPH_ARN_or_vv% or %leg_is_CPH_OSL_or_vv%;
  -   ,   - , -   , -    -> false;
end

export %leg_is_CPH_ARN_or_vv% =
  (leg.%start_station% = "CPH" and leg.%end_station% = "ARN") or
  (leg.%start_station% = "ARN" and leg.%end_station% = "CPH");

export %leg_is_CPH_OSL_or_vv% =
  (leg.%start_station% = "CPH" and leg.%end_station% = "OSL") or
  (leg.%start_station% = "OSL" and leg.%end_station% = "CPH");
  
export %leg_is_OSL_ARN_or_vv% =
  (leg.%start_station% = "OSL" and leg.%end_station% = "ARN") or
  (leg.%start_station% = "ARN" and leg.%end_station% = "OSL");

/* Meal consumption correction */
%consumption_correction_table% = %etab_path%(%consumption_correction_table_p%);
%consumption_correction_table_p% =
  parameter "meal_cons_correction"
  remark "Meal: Consumption correction table";

export %_consumption_corr_code%(int flt_nr) = %__consumption_corr_code%(flt_nr, %first_match_nr%(flt_nr));

export %_consumption_corr_type%(int flt_nr) = %__consumption_corr_type%(flt_nr, %first_match_nr%(flt_nr));

export %cons_weekdays%(int flt_nr) =  default(%_cons_weekdays%(flt_nr, %first_match_nr%(flt_nr)), "_______");

%first_match_nr%(int flt_nr) = min(times(7), times_index(0))
    where (locate(%int2str%(leg.%start_weekday%), %_cons_weekdays%(flt_nr, times_index(0) )) > 0);


table consumption_correction(Int flt_nr, int match_nr) =
    match_nr, 
    flt_nr, 
    leg.%start_station%, 
    leg.%end_station%, 
    fundamental.%main_cat%, 
    %service_type%,
    leg.%start_hb%,
    time_of_day(leg.%start_lt%)  ->  String %__consumption_corr_code%,
                        String %__consumption_corr_type%, 
                        String %_cons_weekdays%;
  external %consumption_correction_table%;
  match_number, flt_nr, stn_from, stn_to, maincat, stc,  (validfrom, validto(, (time_from, time_to) -> corr_code, corr_type, weekdays;
  -, -, -, -, -, -, -, - ->
    void_string, void_string, "_______";
end

export %service_type% = keywords.%service_type%;

export %is_deadhead_non_positioning% =
  leg.%is_deadhead% and %service_type% <> model_iata.%st_positioning%;
  

/* Prio: Flight nr, Route */
export %consumption_corr_type% =
  default(meal.%_consumption_corr_type%(leg.%flight_nr%),
          meal.%_consumption_corr_type%(0));

/* Prio: Flight nr, Route */
export %consumption_corr_code% =
  default(meal.%_consumption_corr_code%(leg.%flight_nr%),
          meal.%_consumption_corr_code%(0));

%leg_is_prevented_by_correction% = 
  default(%consumption_corr_type% = "N", false) and
  default(%consumption_corr_code% = "*", false) and
  default(locate(%int2str%(leg.%start_weekday%), %cons_weekdays%(leg.%flight_nr%)) > 0, false);

/****************************************************************
 * Section 2: Meal break calculation section.
 *            This section calculates where meal breaks:
 *            - are allowed
 *            - are actually assigned
 ***************************************************************/
/****************************************************************
 * Section 2.1: Allowed Meal breaks allocation.
 ****************************************************************
 * Definitions
 *
 * - Meal stop
 *      A stop long enough for crew to buy their own food in the airport.
 *      It is assumed that the break takes place after the current leg.
 *
 * - Meal on ground in ac
 *      A break where it is assumed that appropriate food has been
 *      loaded on the previous turnaround. It is also assumed that
 *      crew eats the food inside the aircraft in the turnaround
 *      following the leg.
 *
 * - Meal during flight
 *      A break where it is assumed that appropriate food has been
 *      loaded on the previous turnaround. It is also assumed that
 *      crew eats the food during the current leg.
 ***************************************************************/

/* Any of 3 possibilities in priority */
export %break% =
  %stop% or (%_is_active_flight% and (%on_ground_in_ac% or %during_flight%));

%_is_active_flight% = 
  if %flight_crew% then
    leg.%is_active_flight%
  else
    true;

%on_ground% = %stop% or %on_ground_in_ac%;

export %onboard% = %on_ground_in_ac% or %during_flight%;

export %duty_has_meal_onboard_and_no_meal_stop% =
  %is_required% and
  not (any(leg(duty), %stop%)) and
  any(leg(duty), %onboard%);

/* Meal on ground outside the aircraft
 * Note: is redefined in meal_cct*/
export %stop% =
  leg.%is_flight_duty% and
  not leg.%is_not_operating% and
  %meal_stop_allowed% and
  %allowed_station_for_meal_stop% and
  not leg.%is_last_in_duty% and
  default(%leg_cnx_time% >= %meal_stop_req_connection_time%,
          false) and
  %restaurant_is_open%;

/* Meal on ground inside the aircraft */
export %on_ground_in_ac% =
  %has_valid_meal_region% and
  leg.%is_flight_duty% and
  not leg.%is_not_operating% and
  %meal_on_ground_in_ac_allowed% and
  connection.%is_trusted_same_ac% and
  %allowed_station_for_meal_on_ground_in_ac% and
  not %leg_is_prevented_by_correction% and
  (default(%leg_cnx_time% >= %meal_on_ground_in_ac_min_duration%, false) or
   default(%meal_on_ground_in_ac_exception%, false));
   
/* Meal in the air */
%during_flight% =
  %has_valid_meal_region% and
  not leg.%is_not_operating% and
  %meal_during_flight_allowed% and
  not %leg_is_prevented_by_correction% and
  (leg.%is_active_flight% or leg.%is_ferry_flight% or %deadhead_CC_SKD%) and
  (%leg_time% >= %meal_during_flight_min_duration% or
   %meal_on_board_exception%);

%deadhead_CC_SKD% =
  duty.%is_SKD% and %cabin_crew% and leg.%deadhead_code%="D";

/* Used in FC 2 meal breaks rule */
export %duty_includes_meal_stop% =  
  %first_best_break_is_meal_stop% or
  (%second_best_break_is_meal_stop% and
   %second_best_meal_break_end% <= 
   %duty_block_off% + %two_required_meals_duty_time%);

/****************************************************************
 * Section 2.2: Meal time variables.
 ***************************************************************/
export %is_required% = %duty_time% > %duty_requiring_meal_break%;
export %duty_time% = %duty_period_end% - %duty_period_start%;

/* Variables to be used to check time without meal. */
export %time_to_meal_break% =
  %break_start% -
  default(prev(leg(duty), %break_end%) where (%break%),
          %duty_period_start%);

export %time_between_first_and_second_best_meal_breaks% =
  %second_best_meal_break_end% - %first_best_meal_break_start%;

export %min_time_btw_meal_breaks_cc% = parameter 4:00
remark "Meal (CC): Minimum time between first meal stop start and second meal stop end";

export %min_time_btw_meal_breaks_fd_sk_sh% = parameter 3:00
remark "Meal (FD SH): Minimum time between meal break";

export %time_btw_meal_breaks_permissive_fd_sk_sh% = parameter true
remark "Meal (FD SH): Calculate time between meal breaks permissively (first break start to second break end)";

export %max_time_to_meal_break% =
  if default(prev(leg(duty), True) where (%break% and %is_a_meal_break%),
             false)
  then %max_time_btw_meal_breaks%
  else %max_time_to_first_meal_break%;

export %time_to_next_meal_break% =
  if %nr_best_meal_breaks% > 0
  then
    %_check_time_to_meal_break%
  else if default(is_last(leg(duty)) where (not %is_standby%), false)
  then
    %break_start% - %duty_period_start%
  else
    %_check_time_to_meal_break%;

%_check_time_to_meal_break% =
  %break_start% -
  default(prev(leg(duty), %break_end%) where (%is_meal_break_ok%),
          %duty_period_start%);
          
export %time_since_previous_meal_break% =
  if %time_btw_meal_breaks_permissive_fd_sk_sh%
  then %break_end% - prev(leg(duty), %break_start%) where (%is_meal_break_ok%)
  else %break_start% - prev(leg(duty), %break_start%) where (%is_meal_break_ok%);

/* Start with checking if meal during flight */
export %break_start% =
  if %during_flight% then
    %flight_meal_start%
  else
    %ground_meal_start%;

/* Start with checking if meal on ground */
export %break_end% =
  if %on_ground% then
    %ground_meal_end%
  else
    %flight_meal_end%;

%time_until_next_meal_on_ground% =
  %meal_on_ground_start% - %prev_meal_on_ground_end%;

%meal_on_ground_start% =
  if %on_ground% then
    %break_start%
  else
    default(next(leg(duty), %break_start%)
            where (%on_ground%), %duty_period_end%);

%prev_meal_on_ground_end% =
  default(prev(leg(duty), %break_end%)
          where (%break%), %duty_period_start%);
  
/****************************************************************
 * Section 2.3: Exceptions from normal consecutive meal break
 *              allocations.
 ***************************************************************/

%returned_to_ramp% = default(leg.%returned_to_ramp%, false);

/*  Special case for SKS CC: late stop if previous VO
 *  For Swedish CC, if duty is < 6:30 and no meal break is possible
 *  it is ok if we load VO on the first flight.*/
export %late_stop_for_CC_SKS_needed_X_leg% =
  let time_from_prev_break = %time_to_meal_break%,
      this_leg_start = %ground_meal_start%;
  duty.%is_SKS% and %cabin_crew% and duty.%has_active_flight% and
  ( %stop% or leg.%is_last_in_duty% ) and
  /*Only needed when outside normal time to break*/
  time_from_prev_break <= 6:30 and
  time_from_prev_break > 5:00 and
  /*Has a valid leg for needed VO (without flying time restriction) */
  any(leg(duty), leg.%is_active_flight% and not %returned_to_ramp%) from(current) backwards
  while(this_leg_start - %ground_meal_start% < time_from_prev_break or leg.%returned_to_ramp%) and
  /*Does not pass any airport approved for meal stops.*/
  not any(leg(duty), meal.%_allowed_station_for_meal_stop% and not %returned_to_ramp%) from(current) backwards
  while(this_leg_start - %ground_meal_start% < time_from_prev_break or %returned_to_ramp%);

%late_stop_for_CC_SKS_actual_interval_length% =
  first(leg(duty), %time_to_meal_break%) from(current)
  where(%late_stop_for_CC_SKS_needed_X_leg%);
  
%late_stop_for_CC_SKS_in_interval% =
  let this_leg_start = %flight_meal_start%;
  any(leg(duty), %late_stop_for_CC_SKS_needed_X_leg%) from(current) forwards 
  while(%ground_meal_start% - this_leg_start <= 
        %late_stop_for_CC_SKS_actual_interval_length%);

export %late_stop_for_CC_SKS_needed_VO_leg% =
  /*This can occur several times in a duty, 
    so we set to True for the first leg in a "late stop" interval*/
  /* Note: leg.%returned_to_ramp% is constant in planning rulesets.
           The "not void(departure)" construct is to avoid compiler warnings. */
  %late_stop_for_CC_SKS_in_interval% and
  not %returned_to_ramp% and
  default(prev(leg(duty), not %late_stop_for_CC_SKS_in_interval%)
          where (not (%returned_to_ramp% and not void(keywords.%departure%)))
         , True);

/* SASCMS-2686 - SKN meal break allocation rules. The SKN flight deck
 * rules were also discussed in SASCMS-3809 and it seems like these  
 * rules should be on top of the ordinary rules so instead of including
 * the meals in the best meal allocation, it is checked if extra meals
 * shall be added to certain flights. There are three main rules:
 * 1. Block time >= 1:10 but < 2:20
 *    The first of an outbound/inbound flight shall have a flight meal.
 *    The longest block time shall be considered. A one way shall also  
 *    be assigned a meal (if it is first or last)
 * 2. Block time >= 2:20
 *    Both flights of an outbound/inbound flight shall have a flight meal
 *    and the longes time of the flights shall be considered. A one way 
 *    flight shall also be assigned a meal.
 * 3. Block time >= 3:20 
 *    An additional meal box shall be added, this is done report_meal. 
 *    Otherwise same rules as >= 2:20
 */
 
export %meal_allocation_skn_fc% =
  parameters.%meal_allocation_skn%(duty.%start_hb%) and
  (%flight_crew% or (%cabin_crew% and (system_db_parameters.%K20_skn_cc_meal_stop%(duty.%start_hb%) and duty.%is_ac_employer_skn%) or (system_db_parameters.%K20_skd_cc_meal_stop%(duty.%start_day%) and duty.%is_ac_employer_skd%) or 
  (system_db_parameters.%K20_sks_cc_meal_stop%(duty.%start_day%) and duty.%is_ac_employer_sks%))) and
  (duty.%is_SKN% or
   (duty.%crew_is_on_loan% and duty.%region_crew_is_on_loan_to% = "SKN"))
   ;


%prev_flight_is_bounded% =
  default(prev(leg(duty), leg.%start_station%) = leg.%end_station% and
          prev(leg(duty), leg.%end_station%) = leg.%start_station%, false);

%next_flight_is_bounded% =
  default(next(leg(duty), leg.%start_station%) = leg.%end_station% and
          next(leg(duty), leg.%end_station%) = leg.%start_station%, false);

%skn_meal_possible% = %prev_flight_is_bounded% or %next_flight_is_bounded% or 
                      is_first(leg(duty)) or is_last(leg(duty));

/* Calculates the bounded index, even numbers -> the first of bounded pair,
 * odd numbers -> the second of a bounded pair
 */
%bounded_index% =
  count(leg(duty)) from(current) backwards while(%prev_flight_is_bounded%);

/* Rule 1 for SKN Flight deck: 
 * A an out/in-bound pair where either flight is at least 1:10
 * shall have a VO on one of the legs. The logic will allocate the meal 
 * on the first leg in the pair unless it is the first leg in the duty.   
 */
%skn_meal_required_rule_1% = 
  (%skn_meal_required_first_leg_rule_1% and
   (not %next_is_assigned_meal_during_flight% or not %next_flight_is_bounded%)) or
  (%skn_meal_required_second_leg_rule_1% and
   (not %prev_is_assigned_meal_during_flight% or not %prev_flight_is_bounded%)); 

/* Checks if a VO shall be put on the first leg in the pair */
%skn_meal_required_first_leg_rule_1% =
  %meal_allocation_skn_fc% and
  not %leg_is_prevented_by_correction% and
  not (%next_flight_is_bounded% and is_first(leg(duty))) and
  (%bounded_index% mod 2 = 0) and
  ( (%next_flight_is_bounded% and (%during_flight% or %next_during_flight%)) or
    ( (is_last(leg(duty)) or is_first(leg(duty))) and %during_flight%) );

/* Checks if a VO shall be put on the second leg in the pair */
%skn_meal_required_second_leg_rule_1% =
  %meal_allocation_skn_fc% and
  not %leg_is_prevented_by_correction% and
  not default(prev(leg(duty), %skn_meal_required_first_leg_rule_1%), True) and  
  %prev_flight_is_bounded% and (%during_flight% or %previous_during_flight%);



/* Helpers for rule 1 */  
%next_during_flight% = 
  default(next(leg(duty), %during_flight%), false);  

%previous_during_flight% = 
  default(prev(leg(duty), %during_flight%), false);  

%assigned_best_meal_during_flight% = 
  (%first_best_meal_break% and %first_best_break_is_meal_during_flight%) or
  (%second_best_meal_break% and %second_best_break_is_meal_during_flight%) or
  (%third_best_meal_break% and %third_best_break_is_meal_during_flight%);

%next_is_assigned_meal_during_flight% = 
  default(next(leg(duty), %assigned_best_meal_during_flight%), false);

%prev_is_assigned_meal_during_flight% = 
  default(prev(leg(duty), %assigned_best_meal_during_flight%), false);

/* Rule 2 for SKN Flight deck: 
 * A an out/in-bound pair where either flight is at least 2:20
 * shall have a VO on both legs.    
 */
%skn_meal_required_rule_2% =
  %meal_allocation_skn_fc% and
  not %leg_is_prevented_by_correction% and
  ((%next_flight_is_bounded% and %next_leg_requires_meal_during_flight_skn_fc%) or 
   (%prev_flight_is_bounded% and %prev_leg_requires_meal_during_flight_skn_fc%) or
   %leg_requires_meal_during_flight_skn_fc%);  

%requires_meal_during_flight_min_duration_skn_fc% = 2:20;

/* Helpers for rule 2 */

%leg_requires_meal_during_flight_skn_fc% =
  %during_flight% and
  %skn_meal_possible% and
  %leg_time% >= %requires_meal_during_flight_min_duration_skn_fc%;

%next_leg_requires_meal_during_flight_skn_fc% =
  default(next(leg(duty), %leg_requires_meal_during_flight_skn_fc%), false);
  
%prev_leg_requires_meal_during_flight_skn_fc% =
  default(prev(leg(duty), %leg_requires_meal_during_flight_skn_fc%), false);
  
  
/****************************************************************
 * Section 2.4: Best Meal Break allocation.
 *              Chooses the best consumtion flight according to 
 *              to SAS rules
 ***************************************************************/

/* Best meal break is chosen up to 3 times.
 * The type of break priority:
 * - Latest legal meal stop
 * - Latest legal meal on ground in ac.
 * - Latest legal meal during flight.
 * It is assumed that there cannot be more than 3 meal breaks in a duty.
 *
 * NB! The break priority can be overridden if e.g. allocating a X/V ground meal
 * break as first meal break where 2 meal breaks are required, means that there
 * is no possible 2nd meal break satisfying the minimum separation rule.
 * In such cases, there may be an earlier VO followed by another meal break that
 * does satisfy the minimum separation rule.
*/

export %is_assigned_meal_stop% = 
  (%first_best_meal_break% and %first_best_break_is_meal_stop%) or
  (%second_best_meal_break% and %second_best_break_is_meal_stop%) or
  (%third_best_meal_break% and %third_best_break_is_meal_stop%) or
  default((%is_a_best_mealbreak% or 
           %skn_meal_required_rule_1% or  
           %skn_meal_required_rule_2%) and %is_manual_set%,
          false);

export %is_assigned_meal_on_ground_in_ac% =
  (%first_best_meal_break% and %first_best_break_is_meal_on_ground_in_ac%) or
  (%second_best_meal_break% and %second_best_break_is_meal_on_ground_in_ac% and
   not (%first_best_meal_break% and %first_best_break_is_meal_during_flight%)) or
  (%third_best_meal_break% and %third_best_break_is_meal_on_ground_in_ac% and
   not (%second_best_meal_break% and %second_best_break_is_meal_during_flight%));

%_assigned_meal_during_flight% =
  %late_stop_for_CC_SKS_needed_VO_leg% or
  ((%skn_meal_required_rule_1% or %skn_meal_required_rule_2%) and not %is_manual_set%) or 
  (%first_best_meal_break% and %first_best_break_is_meal_during_flight%) or
  (%second_best_meal_break% and %second_best_break_is_meal_during_flight%) or
  (%third_best_meal_break% and %third_best_break_is_meal_during_flight%);

export %is_assigned_meal_during_flight% =
  ( ( not %is_assigned_meal_on_ground_in_ac%
      and %_assigned_meal_during_flight%
    ) or (
      %is_possible_candidate_for_meal_during_flight% 
      and %is_possible_prev_meal_assigned_meal_during_flight% 
      and %is_possible_prev_meal_assigned_meal_on_ground_in_ac%
  ) ) and (
    not %is_deadhead_non_positioning% 
  );

export %is_assigned_meal_on_ground% =
  %is_assigned_meal_on_ground_in_ac% or %is_assigned_meal_stop%; 

%priority_break_end% =
  if %during_flight% then
    %flight_meal_end%
  else if %on_ground% then
    %ground_meal_end%
  else void_abstime;

%priority_break_start% =
  if %during_flight% then
    %flight_meal_start%
  else if %on_ground% then
    %ground_meal_start%
  else void_abstime;

%is_possible_candidate_for_meal_during_flight% =
  let prev_break_end = default(prev(leg(duty), %priority_break_end%) where (%is_a_meal_break%),
                               %duty_period_end%),
      prev_break_start = default(prev(leg(duty), %priority_break_start%) where (%is_a_meal_break%),
                               %duty_period_end%);
  %during_flight% and
  %flight_meal_end% - prev_break_start >= %min_time_btw_meal_breaks_cc% and
  %is_in_interval_flight%(prev_break_end, 2);

%is_possible_prev_meal_assigned_meal_on_ground_in_ac% =
  default(prev(leg(duty),
          (%second_best_meal_break% and %second_best_break_is_meal_on_ground_in_ac%) or
          (%third_best_meal_break% and %third_best_break_is_meal_on_ground_in_ac%)), false);

%is_possible_prev_meal_assigned_meal_during_flight% =
  default(prev(leg(duty), %_assigned_meal_during_flight%), false);

%is_a_best_mealbreak% = 
  %first_best_meal_break% or %second_best_meal_break% or %third_best_meal_break%;
  
export %is_a_meal_break% = 
  %is_a_best_mealbreak% or 
  %skn_meal_required_rule_1% or  
  %skn_meal_required_rule_2%;

export %nr_best_meal_breaks% =
  if any(leg(duty), %third_best_meal_break%) then 3
  else if any(leg(duty), %second_best_meal_break%) then 2
  else if any(leg(duty), %first_best_meal_break%) then 1
  else 0;

export %is_meal_break_ok% =
  %is_a_meal_break% or
    %break% and (
    %is_assigned_meal_stop% or
    %is_assigned_meal_on_ground_in_ac% or
    %is_assigned_meal_during_flight% or
    %is_assigned_meal_on_ground%);

/*
** NB! There may be a meal on ground immediately after a meal during flight,
** i.e. same leg!
*/
export %nr_meal_breaks% =
  %nr_meal_on_ground% + %nr_meal_during_flight%;

%nr_meal_on_ground% =
  count(leg(duty)) where (%on_ground%);

%nr_meal_during_flight% =
  count(leg(duty)) where (%during_flight%);

%need_breakfast% =
    time_of_day(leg.%start_lt%) >= 03:00 and
    time_of_day(leg.%start_lt%) < 08:00 and
    not leg.%is_ac_employer_svs% and
    not leg.%departs_from_homebase%;

/* top level display to report */

export %mc_id_breakfast% = 1;
export %mc_id_mealbox% = 2;
export %mc_id_bringown% = 3;
export %mc_id_stop% = 4;
export %mc_id_at_ramp% = 5;
export %mc_id_in_flight% = 6;

export %mc_max_id% = 6;

table mc_code_tbl(Int mc_id) =
  mc_id -> 
    %_mc_code%,
    export %mc_descr%,
    export %mc_after_leg%,
    export %mc_has%;
  1 -> ",GF", "Breakfast",              false,  %assigned_breakfast%;
  2 -> ",GO", "Mealbox",                false,  %assigned_mealbox%;
  3 -> ",GS", "Bring own",              false,  %assigned_bringown%;
  4 -> ",X",  "Mealstop",               true,   %is_assigned_meal_stop%;
  5 -> ",V",  "Meal in AC on ground",   true,   %is_assigned_meal_on_ground_in_ac%;
  6 -> ",VO", "Meal in flight",         false,  %is_assigned_meal_during_flight%;
  - -> void_string, void_string, false, void_bool;
end

export %mc_code%(Int mc_id) =
  base_utils.%strip_leading_comma%(%_mc_code%(mc_id));

export %_mc_code_has%(Int mc_id) =
  if %mc_after_leg%(mc_id) then
    if %mc_has%(mc_id) then %_mc_code%(mc_id)
    else ""
  else /* during flight */
    if %mc_has%(mc_id) and not %is_deadhead_non_positioning% then %_mc_code%(mc_id)
    else "";
  
export %mc_code_has%(Int mc_id) =
  base_utils.%strip_leading_comma%(%_mc_code_has%(mc_id));
 
%assigned_breakfast% =
  (%flight_crew% or (%cabin_crew% and system_db_parameters.%K20_skn_cc_meal_stop%(duty.%start_hb%) and duty.%is_ac_employer_skn%) or
  (%cabin_crew% and system_db_parameters.%K20_sks_cc_meal_stop%(duty.%start_hb%) and duty.%is_ac_employer_sks%) or
  (%cabin_crew% and system_db_parameters.%K20_skd_cc_meal_stop%(duty.%start_hb%) and duty.%is_ac_employer_skd%))
  and %do_meal_assign%(false)
  and %need_breakfast%
  and not trip.%is_ac_employer_qa%
  and (not %is_deadhead_non_positioning%);

%leg_in_go_gs_base_block%(Abstime d) =
  leg.%is_flight_duty%
  and leg.%start_date% = d
  and %leg_departs_base_station%
  and (not %is_deadhead_non_positioning%);

%preceding_legs_in_block%(Abstime d) =
  count(leg(duty))
  from (prev)
  backwards while (%leg_in_go_gs_base_block%(d));

%need_go_or_gs% =
  %flight_crew%
   and not trip.%is_ac_employer_svs%
   and %leg_in_go_gs_base_block%(leg.%start_date%)
   and not %is_assigned_meal_during_flight%
   and not %need_breakfast%
   and (
      not %leg_arrives_base_station%
      or (%preceding_legs_in_block%(leg.%start_date%) mod 2) = 0
   );

%assign_gs_for_go% =
   (duty.%has_agmt_group_sks% and %leg_departs_sks_base_station%)
   or (duty.%has_agmt_group_skn% and %leg_departs_skn_base_station%);

%assigned_mealbox% =
  %need_go_or_gs%
  and not %assign_gs_for_go%;

export %assigned_bringown% =
  %need_go_or_gs% 
  and %assign_gs_for_go%;

export %has_meal% =
  any(times(%mc_max_id%), %mc_has%(base_utils.%ti0%));

export %meal_code_all% =
  base_utils.%strip_leading_comma%(
     cat(times(%mc_max_id%), %_mc_code%(base_utils.%ti0%))
  );

export %meal_code% =
  base_utils.%strip_leading_comma%(
     cat(times(%mc_max_id%), %_mc_code_has%(base_utils.%ti0%))
  );

export %meal_code_on_leg% =
  base_utils.%strip_leading_comma%(
     cat(times(%mc_max_id%), %_mc_code_has%(base_utils.%ti0%))
     where (not %mc_after_leg%(base_utils.%ti0%))
  );

export %meal_code_after_leg% =
  base_utils.%strip_leading_comma%(
     cat(times(%mc_max_id%), %_mc_code_has%(base_utils.%ti0%))
     where ( %mc_after_leg%(base_utils.%ti0%))
  );

export %meal_code_break% =
  base_utils.%strip_leading_comma%(
     concat(%_mc_code_has%( %mc_id_stop%), %_mc_code_has%(%mc_id_at_ramp%), %_mc_code_has%(%mc_id_in_flight%))
  );

 
/****************************************************************
 *        Best meal break nr 1
 ***************************************************************/
%first_best_meal_break% =
  if not (%is_required%) and
          not default(%any_manual_override%(%duty_period_start%), false)
  then
    false
  else if %first_best_break_is_meal_stop%
  then
    %is_best_meal_stop%(%duty_period_start%, 1)
  else if %first_best_break_is_meal_on_ground_in_ac%
  then
    %is_best_meal_on_ground_in_ac%(%duty_period_start%, 1)
  else if %first_best_break_is_meal_during_flight%
  then
    %is_best_meal_during_flight%(%duty_period_start%, 1)
  else
    %is_manual_override%(%duty_period_start%);

%first_possible_break_is_stop% =
  first(leg(duty), %ground_meal_start%)
        where (meal.%stop%) =
  first(leg(duty), %ground_meal_start%)
        where (meal.%break%);

/* The first if case is used to target a specific case that was found. The reason 
 * for adding such a detailed case was that we didn't want to change the behaviour
 * of any other cases.
** 
** NB! This applies to all regions, not only SKN!
 */ 
%first_best_break_is_meal_stop% =
  if (duty.%k4exng_cc_sp5_1_valid%(duty.%start_day%) or
      duty.%is_SKN%) and
     %duty_requires_two_meal_breaks% and 
     %nr_meal_stop% = 1 and 
     %nr_meal_breaks% = 2 and  
     not %first_possible_break_is_stop% then 
    False
  else  
    %any_best_meal_stop%(%duty_period_start%, 1);

%nr_meal_stop% =
  count(leg(duty)) where (%stop%);

%first_best_break_is_meal_on_ground_in_ac% =
  if %first_best_break_is_meal_stop%
  then false
  else
    %any_best_meal_on_ground_in_ac%(%duty_period_start%, 1);

export %first_best_break_is_meal_during_flight% =
  if %first_best_break_is_meal_stop% or 
     %first_best_break_is_meal_on_ground_in_ac%
  then false
  else
    %any_best_meal_during_flight%(%duty_period_start%, 1);

%first_best_meal_break_start% =
  first(leg(duty), %best_meal_break_start%(%first_best_break_is_meal_stop%,
                                           %first_best_break_is_meal_on_ground_in_ac%,
                                           %first_best_break_is_meal_during_flight%))
    where (%first_best_meal_break%);

%first_best_meal_break_end% =
  first(leg(duty), %best_meal_break_end%(%first_best_break_is_meal_stop%,
                                         %first_best_break_is_meal_on_ground_in_ac%,
                                         %first_best_break_is_meal_during_flight%))
    where (%first_best_meal_break%);

/****************************************************************
 *          Best meal break nr 2
 ***************************************************************/
export %second_best_meal_break% =
  if default(%duty_period_end% - %first_best_meal_break_end% 
             <= %max_time_btw_meal_breaks%,
             true) and
     (default(not %duty_requires_two_meal_breaks%,
              true) or
      (%flight_crew% and %first_best_break_is_meal_stop%)) and
     not default(%any_manual_override%(%first_best_meal_break_end%), false) or
     void(%first_best_meal_break_end%)
  then
    false
  else if %second_best_break_is_meal_stop%
  then
    %is_best_meal_stop%(%first_best_meal_break_end%, 2)
  else if %second_best_break_is_meal_on_ground_in_ac%
  then
    %is_best_meal_on_ground_in_ac%(%first_best_meal_break_end%, 2)
  else if %second_best_break_is_meal_during_flight% 
  then
    %is_best_meal_during_flight%(%first_best_meal_break_end%, 2)
  else 
    %is_manual_override%(%first_best_meal_break_end%);

%second_best_break_is_meal_stop% =
  %any_second_best_meal_stop%(%first_best_meal_break_end%);

%second_best_break_is_meal_on_ground_in_ac% =
  if %second_best_break_is_meal_stop% then false
  else
    %any_second_best_meal_on_ground_in_ac%(%first_best_meal_break_end%);

%second_best_break_is_meal_during_flight% =
  if %second_best_break_is_meal_stop% or
     %second_best_break_is_meal_on_ground_in_ac%
  then false
  else
    %any_second_meal_during_flight%(%first_best_meal_break_end%);

%second_best_meal_break_start% =
  first(leg(duty), %best_meal_break_start%(%second_best_break_is_meal_stop%,
                                           %second_best_break_is_meal_on_ground_in_ac%,
                                           %second_best_break_is_meal_during_flight%))
    where (%second_best_meal_break%);

%second_best_meal_break_end% =
  first(leg(duty), %best_meal_break_end%(%second_best_break_is_meal_stop%,
                                         %second_best_break_is_meal_on_ground_in_ac%,
                                         %second_best_break_is_meal_during_flight%))
    where (%second_best_meal_break%);

/****************************************************************
 *            Best meal break nr 3
 ***************************************************************/
%third_best_meal_break% =
  if default(%duty_period_end% - %second_best_meal_break_end% 
             <= %max_time_btw_meal_breaks%,
             true) and
     not default(%any_manual_override%(%second_best_meal_break_end%), false) or
     void(%second_best_meal_break_end%)
  then
    false
  else if %third_best_break_is_meal_stop%
  then
    %is_best_meal_stop%(%second_best_meal_break_end%, 3)
  else if %third_best_break_is_meal_on_ground_in_ac%
  then
    %any_best_meal_on_ground_in_ac%(%second_best_meal_break_end%, 3)
  else if %third_best_break_is_meal_during_flight%
  then
    %is_best_meal_during_flight%(%second_best_meal_break_end%, 3)
  else 
    %is_manual_override%(%second_best_meal_break_end%);

%third_best_break_is_meal_stop% =
  %any_best_meal_stop%(%second_best_meal_break_end%, 3);

%third_best_break_is_meal_on_ground_in_ac% =
  if %third_best_break_is_meal_stop% then false
  else
    %any_best_meal_on_ground_in_ac%(%second_best_meal_break_end%, 3);

%third_best_break_is_meal_during_flight% =
  if %third_best_break_is_meal_stop% or
     %third_best_break_is_meal_on_ground_in_ac%
  then false
  else
    %any_best_meal_during_flight%(%second_best_meal_break_end%, 3);

/****************************************************************
 *           Helper functions to calculate best meal breaks
/***************************************************************/

%any_manual_override%(AbsTime start) = False; /*used in cct redefine*/
%is_manual_override%(AbsTime start) = False; /*used in cct redefine*/
export %is_manual_set% = False; /*used in cct redefine*/
export %is_manual_prevent% = False; /*used in cct redefine*/
export %leg_is_past_operation% = False; /*used in cct redefine*/
export %meal_attr_changed% = True; /*used in cct redefine*/
export %is_meal_break_attr% = False; /*used in cct redefine*/

/*
** It is not desirable to have a meal break on ground "X"/"V" immediately after
** a meal during flight "VO", so don't allocate one if there is a legal meal
** break later in the duty.
*/
%meal_on_ground_after_meal_during_flight_not_allowed% =
  %first_best_break_is_meal_during_flight% and
  %on_ground% and
  %first_best_meal_break_end% + %meal_landing_limitation% =
    %ground_meal_start% - %ground_meal_walktime_start% and
  %duty_needs_two_meal_breaks% and 
  (not %valid_meal_not_too_close_cc% and
   (%nr_meal_breaks% <= 2 or
    (%any_second_best_meal_stop%(%ground_meal_end%) or
     %any_second_best_meal_stop%(%ground_meal_end%) or
     %any_second_best_meal_stop%(%ground_meal_end%))) or
   (%nr_meal_breaks% > 2 and
    %any_more_best_meal_break_cc%(%first_best_meal_break_start%,
                                  %first_best_meal_break_end%)));

/*
** It is not desirable to have a meal during flight "VO" immediately after a
** meal break on ground "X"/"V", so don't allocate one if there is a legal meal
** break later in the duty.
*/
%meal_during_flight_after_meal_on_ground_not_allowed% =
  (%first_best_break_is_meal_stop% or
   %first_best_break_is_meal_on_ground_in_ac%) and
  %during_flight% and
  %first_best_meal_break_end% + %ground_meal_walktime_end% =
    %flight_meal_start% - %meal_landing_limitation%  and
  %duty_needs_two_meal_breaks% and 
  (%nr_meal_breaks% <= 2 or
   not (%any_second_best_meal_stop%(%flight_meal_end%) or
        %any_second_best_meal_stop%(%flight_meal_end%) or
        %any_second_best_meal_stop%(%flight_meal_end%)));

%any_best_meal_stop%(AbsTime start, Int break_nr)=
  default(any(leg(duty),%stop% and 
                        %is_in_interval_ground%(start, break_nr) and
                        (not %duty_needs_two_meal_breaks% or
                         not %valid_meal_not_too_close_cc% or
                         %any_more_best_meal_break_cc%(%ground_meal_start%,
                                                       %ground_meal_end%))), 
          false);

%any_second_best_meal_stop%(AbsTime start) =
  default(any(leg(duty),%stop% and 
                        %is_in_interval_ground%(start, 2) and
                        (not %duty_needs_two_meal_breaks% or
                         not %valid_meal_not_too_close_cc% or
                         %has_min_separation_btw_meal_breaks_cc%(%first_best_meal_break_start%,
                                                                 %first_best_meal_break_end%))), 
          false);

/*
** True if there is any meal break following the current meal break
** that satisfies the rule for minimum separation between two meal breaks,
** i.e. minimum 4:00 from first break start to second break end, and
** maximum 5:00 from first break end to second break start.
*/
%any_more_best_meal_break_cc%(AbsTime break_start, AbsTime break_end) =
  any(leg(duty),%has_min_separation_btw_meal_breaks_cc%(break_start, break_end))
    where (leg.%start_UTC% > break_start);

%has_min_separation_btw_meal_breaks_cc%(AbsTime break_start, AbsTime break_end) =
  (%on_ground% and
   %ground_meal_end% - break_start >= %min_time_btw_meal_breaks_cc% and
   %is_in_interval_ground%(break_end,2)) or
  (%during_flight% and
   %flight_meal_end% - break_start >= %min_time_btw_meal_breaks_cc% and
   not default(prev(leg(duty),%on_ground% and
                              %is_in_interval_ground%(%ground_meal_end%,2) and
                              %ground_meal_end% = break_end),
               false) and
   %is_in_interval_flight%(break_end,2));

%is_best_meal_stop%(AbsTime start, Int break_nr) =
  if break_nr = 1 and
     %duty_requires_two_meal_breaks% and
     %nr_meal_breaks% >= 2 then
    if %nr_meal_breaks% = 2 then
      default(is_first(leg(duty)) where (%stop% and
                                         %is_in_interval_ground%(start,
                                                                 break_nr)),
              false)
    else
      if %valid_meal_not_too_close_cc% then
        default(is_last(leg(duty))
                  where (%stop% and
                         %is_in_interval_ground%(start,break_nr) and
                         %any_more_best_meal_break_cc%(%ground_meal_start%,
                                                       %ground_meal_end%)),
                false)
      else
        default(is_last(leg(duty))
                  where (%stop% and
                         %is_in_interval_ground%(start,break_nr) and
                         not %is_last_best_meal_stop%(start,break_nr)),
                %is_last_best_meal_stop%(start,break_nr))
  else
    %is_last_best_meal_stop%(start,break_nr);

%is_last_best_meal_stop%(AbsTime start, Int break_nr) =
  default(is_last(leg(duty)) where (%stop% and
                                    %is_in_interval_ground%(start,
                                                            break_nr)),
          false);

%any_best_meal_on_ground_in_ac%(AbsTime start, Int break_nr)=
  default(any(leg(duty),%on_ground_in_ac% and
                        %is_in_interval_ground%(start, break_nr) and
                        (not %duty_needs_two_meal_breaks% or
                         not %valid_meal_not_too_close_cc% or
                         %any_more_best_meal_break_cc%(%ground_meal_start%,
                                                       %ground_meal_end%))), 
          false);

%any_second_best_meal_on_ground_in_ac%(AbsTime start)=
  default(any(leg(duty),%on_ground_in_ac% and
                        %is_in_interval_ground%(start, 2) and
                        (not %duty_needs_two_meal_breaks% or
                         not %valid_meal_not_too_close_cc% or
                         %has_min_separation_btw_meal_breaks_cc%(%first_best_meal_break_start%,
                                                                 %first_best_meal_break_end%))), 
          false);

%is_best_meal_on_ground_in_ac%(AbsTime start, Int break_nr)=
  if break_nr = 1 and
     %duty_requires_two_meal_breaks% and
     %nr_meal_breaks% >= 2 then
    if %nr_meal_breaks% = 2 then
      default(is_first(leg(duty)) where (%on_ground_in_ac% and
                                         %is_in_interval_ground%(start,
                                                                 break_nr)),
              false)
    else
      if %valid_meal_not_too_close_cc% then
        default(is_last(leg(duty))
                  where (%on_ground_in_ac% and
                         %is_in_interval_ground%(start,break_nr) and
                         %any_more_best_meal_break_cc%(%ground_meal_start%,
                                                       %ground_meal_end%)),
                false)
      else
        default(is_last(leg(duty))
                  where (%on_ground_in_ac% and
                         %is_in_interval_ground%(start,break_nr) and
                         not %is_last_best_meal_on_ground_in_ac%(start,break_nr)),
                %is_last_best_meal_on_ground_in_ac%(start,break_nr))
  else
    %is_last_best_meal_on_ground_in_ac%(start,break_nr);

%is_last_best_meal_on_ground_in_ac%(AbsTime start, Int break_nr)=
   default(is_last(leg(duty)) where (%on_ground_in_ac% and
                                     %is_in_interval_ground%(start,break_nr)),
           false);

%any_best_meal_during_flight%(AbsTime start, Int break_nr)=
  default(any(leg(duty),%during_flight% and
                        %is_in_interval_flight%(start, break_nr) and
                        (not %duty_needs_two_meal_breaks% or
                         not %valid_meal_not_too_close_cc% or
                         %any_more_best_meal_break_cc%(%flight_meal_start%,
                                                       %flight_meal_end%))), 
          false);

%any_second_meal_during_flight%(AbsTime start)=
  default(any(leg(duty),%during_flight% and
                        %is_in_interval_flight%(start, 2) and
                        (not %duty_needs_two_meal_breaks% or
                         not %valid_meal_not_too_close_cc% or
                         %has_min_separation_btw_meal_breaks_cc%(%first_best_meal_break_start%,
                                                                 %first_best_meal_break_end%))), 
          false);

/* SKN FC: all legs with flying time >= 2:20 must have meal during flight */
%is_best_meal_during_flight%(AbsTime start, Int break_nr)=
  if break_nr = 1 and
     %duty_requires_two_meal_breaks% and
     %nr_meal_breaks% >= 2 then
    if %nr_meal_breaks% = 2 then
      default(is_first(leg(duty)) where (%during_flight% and
                                         %is_in_interval_flight%(start,
                                                                 break_nr)),
              false)
    else
      if %valid_meal_not_too_close_cc% then
        default(is_last(leg(duty))
                  where (%during_flight% and
                         %is_in_interval_flight%(start,break_nr) and
                         %any_more_best_meal_break_cc%(%flight_meal_start%,
                                                       %flight_meal_end%)),
                %is_last_best_meal_during_flight%(start,break_nr))
      else
        default(is_last(leg(duty))
                  where (%during_flight% and
                         %is_in_interval_flight%(start,break_nr) and
                         not %is_last_best_meal_during_flight%(start,break_nr)),
                %is_last_best_meal_during_flight%(start,break_nr))
  else
    %is_last_best_meal_during_flight%(start,break_nr);

%is_last_best_meal_during_flight%(AbsTime start, Int break_nr)=
  default(is_last(leg(duty)) where (%during_flight% and
                                    %is_in_interval_flight%(start,break_nr)),
          false);

%is_in_interval_flight%(AbsTime start, Int break_nr) =
  let limit =  if break_nr = 1 then 
                 %max_time_to_first_meal_break%
               else
                 %max_time_btw_meal_breaks%;
  %flight_meal_start% - start <= limit and 
  %flight_meal_start% - start >= 0:00;

%is_in_interval_ground%(AbsTime start, Int break_nr) =
  let limit = if break_nr = 1 then 
                %max_time_to_first_meal_break%
              else
                %max_time_btw_meal_breaks%;
  %ground_meal_start% - start <= limit and 
  %ground_meal_start% - start >= 0:00;
    
%best_meal_break_start%(Bool stop, Bool ground_cabin, Bool on_flight) =
  if stop or ground_cabin then
    %ground_meal_start%
  else if on_flight then
    %flight_meal_start%
  else void_abstime;

%best_meal_break_end%(Bool stop, Bool ground_cabin, Bool on_flight) =
  if stop or ground_cabin then
    %ground_meal_end%
  else if on_flight then
    %flight_meal_end%
  else void_abstime;

/**************************************************************
** 3. DutyMealString: an attempt to simplify handling of meals
** A mealstring is a string with fixed length records, with entries for each possible meal break in duty
** Each record consists of
** 1   blank, or A, B, C mark best first/second/third break in duty, or M to mark assigned meal without orderering.
** 2-4 start time for meal break, zerofilled minutes since duty start
** 5   bl = No meal break, X = Possible meal stop, V=Possible meal on ground in aircraft, O=Possible meal in flight (VO)
** 6-8 end time for meal break, zerofilled minutes since duty start
** Each flight leg in duty (as in leg.%leg_index%) corresponds to two entries: first for the flight with possible O state,
** then for the following ground activities (possibly X or V).
**
** Currently the code is not active, but can be used for inspectioni/debugging of meal strategies.
** %dms_possible% shows a string for a duty, with all possible meal positions.
** %dms_assigned% shows a string for a duty, with the allocated meals, according to the current code as understood.
**
** There exist an idea to rewrite the whole meal handling:
** 1. Let pairing use the DMS-string and choose meals "as late as possible within 5h", with the addition that one X stop is 
**    currently required for duties >=10:30. Purpose: Pairing produces as efficient production as possible fulfilling the 
**    agreement demands. This string could be called %dms_assigned_pairing%.
** 2. ONE %dms_assigned_rostering% does as the first, but may do some enhancement, moving meals earlier, if that
**    would mean giving better meal distribution (with two meals, separate as much as possible as long as demands are obeyed)
**    or giving better meal comfort/security (X before V/VO, possibly V before VO).
** 3. Pairing rule should be based on the %dms_assigned_pairing% only, Any rostering display, meal reports etc should be based on**    %dms_assigned_rostering%.
** It appears that today that the rules are based on actual times, which seemms strange to me. Meals should be loaded onboard
** beforehand so there must be some correspondance to scheduled times. It COULD make some sense to let the basis be a
** "scheduled meal plan", with an additional "actual meal plan". The former should be fixed to how the meals where planned,
** the latter adjusted to actual times.
** Notes 2015-06-09 Lars Westerlind
**************************************************************/

/* codes for selected best meal breaks (A=First, B=Second ...) */
%dms_best% = "ABC";

%dms_rec_len% = 8;

%dms_rec_stat%(String dms, Int ix, String stat) =
  base_utils.%chg_substr%(dms,(ix-1) * %dms_rec_len%+1, 1, stat);

%dms_crt_rec%(String stat, String brk_type, Int brk_start, Int brk_end) =
  concat(stat,format_int(brk_start,"%03d"),brk_type,format_int(brk_end,"%03d"));

%dms_crt_rec_no_meal% =
  %dms_crt_rec%(" "," ",0,0);

%dms_crt_rec_flight_meal%(Abstime duty_start, Abstime break_start, Abstime break_end) =
  %dms_crt_rec%(" ", "O", (break_start-duty_start)/0:01, (break_end-duty_start)/0:01);

%dms_crt_rec_ground_meal%(Abstime duty_start, Abstime break_start, Abstime break_end, Bool on_ac) = 
  let t = if on_ac then "V" else "X";
  %dms_crt_rec%(" ", t, (break_start-duty_start)/0:01, (break_end-duty_start)/0:01);

%dms_crt_flight_meal% =
  if %during_flight% then %dms_crt_rec_flight_meal%(%duty_period_start%,%flight_meal_start%,%flight_meal_end%)
  else %dms_crt_rec_no_meal%;

%dms_crt_ground_meal% =
  if %stop% then %dms_crt_rec_ground_meal%(%duty_period_start%,%ground_meal_start%,%ground_meal_end%,false) 
  else if %on_ground_in_ac% then %dms_crt_rec_ground_meal%(%duty_period_start%,%ground_meal_start%,%ground_meal_end%,true)
  else %dms_crt_rec_no_meal%;

export %dms_possible% =
  cat(leg(duty),concat(%dms_crt_flight_meal%,%dms_crt_ground_meal%)) where (leg.%is_active_flight%); 

export %dms_status%(String dms, Int ix) =
  substr(dms,(ix-1) * %dms_rec_len%+1,1);

export %dms_break_type%(String dms, Int ix) =
  substr(dms,(ix-1) * %dms_rec_len%+5,1);

export %dms_break_start%(String dms, Int ix) =
  %duty_period_start% + base_utils.%int_parse%(substr(dms, (ix-1) * %dms_rec_len% + 2, 3)) * 0:01;

export %dms_break_end%(String dms, Int ix) =
  %duty_period_start% + base_utils.%int_parse%(substr(dms, (ix-1) * %dms_rec_len% + 2, 3)) * 0:01;

%dms_assigned_flight_meal_2% =
  let x = %dms_crt_flight_meal%;
  if substr(x,5,1)=" " then x
  else if %first_best_meal_break% and %first_best_break_is_meal_during_flight% then 
    %dms_rec_stat%(x,1,substr(%dms_best%,1,1))
  else if %second_best_meal_break% and %second_best_break_is_meal_during_flight% then
    %dms_rec_stat%(x,1,substr(%dms_best%,2,1))
  else if %third_best_meal_break% and %third_best_break_is_meal_during_flight% then
    %dms_rec_stat%(x,1,substr(%dms_best%,3,1))
  else x;

%dms_assigned_ground_meal_2% =
  let x = %dms_crt_ground_meal%;
  if substr(x,5,1)=" " then x
  else if %first_best_meal_break% and (%first_best_break_is_meal_stop% or %first_best_break_is_meal_on_ground_in_ac%) then
    %dms_rec_stat%(x,1,substr(%dms_best%,1,1))
  else if %second_best_meal_break% and (%second_best_break_is_meal_stop% or %second_best_break_is_meal_on_ground_in_ac%) then
    %dms_rec_stat%(x,1,substr(%dms_best%,2,1))
  else if %third_best_meal_break% and (%third_best_break_is_meal_stop% or %third_best_break_is_meal_on_ground_in_ac%) then 
    %dms_rec_stat%(x,1,substr(%dms_best%,3,1))
  else x;

%dms_assigned_flight_meal% =
  let x = %dms_crt_flight_meal%;
  if substr(x,5,1)=" " then x
  else if %is_assigned_meal_during_flight% then %dms_rec_stat%(x,1,"M")
  else x;

%dms_assigned_ground_meal% =
  let x = %dms_crt_ground_meal%;
  if substr(x,5,1)=" " then x
  else if %is_assigned_meal_stop% or %is_assigned_meal_on_ground_in_ac% then %dms_rec_stat%(x,1,"M")
  else x;  
  
export %dms_assigned% =
  cat(leg(duty),concat(%dms_assigned_flight_meal%,%dms_assigned_ground_meal%)) where (leg.%is_active_flight%);

export %dms_start_1_test% =
  %dms_break_start%(%dms_assigned%,1);

export %long_duty% = 
  leg.%is_active_flight% and %duty_period_end% - %duty_period_start% > 10:30;

  
/* Turn meal rules off after a certain date for QA  (SKCMS-601) */
export %has_meal_rules_off_QA_CC_FD% =
   duty.%is_ac_employer_qa% and (
   (parameters.%K15_qa_fd_meal_valid%(duty.%start_hb%) and %flight_crew%)
   or (parameters.%k15qa_feb16_valid%(duty.%start_hb%) and %cabin_crew%));



/* end of file */

