#!/bin/env python

"""
This script scans DIG logfiles for errors. If any errors are found
it creates a summary report and sends it by mail to the recipient(s)
defined in the site configuration file.

For properly monitoring the DIG channels, Desmond should be configured
to run this script at an interval corresponding to the scan window (see
options below).

Note that Fatal Errors are reported even though all channels are
equipped with 'fatal'-notifiers, i.e. whenever a channel goes down
a separate mail will also be generated by the channel itself.

Options:
    --help
    -h <hours>              Scan window, the script only reports errors
                            occurred during the last <hours> + <minutes>
                            Default <hours>=1
    -m <minutes>            Scan window, see above
                            Default <minutes>=0
    -l <logfile>            Limit monitoring to one specific DIG channel
                            log file (e.g. 'ti3.log'). If not specified,
                            all DIG channel log files are monitored.
    -t, --test              Test Mode - print report to stdout instead of
                            sending mail.

Exit codes:
    0 - No errors found within scan window
    1 - Errors found within scan window
    2 - Argument error
    3 - Other runtime errors
"""

import os, sys, getopt, time, datetime, re
from dig.intgutils import IntgServiceConfig
from carmensystems.dig.support.transports.mail import Transport


LOGLINEPATTERN =r'\[[A-Z] 20[0-9]{2}-'
WARNLINEPATTERN =r'\[W .*Error'
ERRLINEPATTERN =r'\[E 20[0-9]{2}-'
TS_FORMAT = "%Y-%m-%d %H:%M:%S"
TS_POS = 3
TS_END = 21
ERRPERCHANNELLIMIT = 100

# Define filters for error messages that should not be reported
FILTERS = [
            ('loadsheet.log', 'Crew not found'),
            ('ldm.log', 'Could not find any flight'),
            ('digxml.log', 'Leg not found'),
            ('digxml.log', 'FLIGHT_LEG_MESSAGE_IP'),
            ('services.log', 'Server lookup failed'),
            ('manifest_uk.log', 'No leg found')
          ]

def main(argv):
    try:
        opts, args = getopt.getopt(argv[1:], "h:m:l:t", ["help","hours","minutes","test"])
    except getopt.GetoptError, e:
        print e
        print __doc__
        sys.exit(2)

    hours = 1
    minutes = 0
    testMode = False
    logFile0 = None
    try:
        regexERR = re.compile(ERRLINEPATTERN)
        regexWARN = re.compile(WARNLINEPATTERN)
        regexLOG = re.compile(LOGLINEPATTERN)
        for opt, val in opts:
            if opt == "--help":
                print __doc__
                sys.exit(0)
            if opt in ('-h', '--hours'):
                hours = int(val)
            if opt in ('-m', '--minutes'):
                minutes = int(val)
            if opt in ('-l',):
                logFile0 = val
            if opt in ('-t', '--test'):
                testMode = True
        if hours == 0 and minutes == 0:
            print "Illegal scan window: hours=%d, minutes=%d" % (hours, minutes)
            sys.exit(2)
        if hours < 0 or minutes < 0:
            print "Illegal scan window: hours=%d, minutes=%d" % (hours, minutes)
            sys.exit(2)

        # Scan DIG logfiles for error messages
        config = IntgServiceConfig()
        msg = ""
        errTotal = 0
        for (key, logFile) in config.getProperties("dig/channel@logFile"):
            errChannel = 0
            errPending = False
            errline = ""
            if not os.path.exists(logFile) or (not logFile0 is None and logFile0 != os.path.basename(logFile)):
                # Ignore if logfile does not exist (channel not running?)
                continue
            f = open(logFile, 'r')
            for line in f.readlines():
                if regexLOG.match(line):
                    if errPending:
                        if errChannel == 0:
                            msg += "\n\nLogfile %s:\n" % os.path.basename(logFile)
                            msg += "============================================\n"
                        errChannel += 1
                        # Limit number of reported errors per channel
                        if errChannel == ERRPERCHANNELLIMIT+1:
                            msg += "...ERROR LIST INTENTIONALLY TRUNCATED..."
                        if errChannel <= ERRPERCHANNELLIMIT:
                            msg += errline
                    errPending = False
                if regexWARN.match(line) or regexERR.match(line):
                    ts = time.mktime(time.strptime(line[TS_POS:TS_END], TS_FORMAT))
                    dt = datetime.datetime.utcfromtimestamp(ts)
                    now = datetime.datetime.utcnow()
                    if now - dt <= datetime.timedelta(hours=hours, minutes=minutes):
                        # Check if this error should be filtered out
                        if hasFilter(logFile, line):
                            continue
                        errPending = True
                        errline = line
                if hasFilter(logFile, line):
                    errPending = False
            errTotal += errChannel

        if errTotal == 0:
            # No errors found...
            print "%s No errors found..." % datetime.datetime.now()
            sys.exit(0)

        # Mail report to recipient(s) defined in site config
        mailSubject = "%d DIG message errors occurred the last" % (errTotal)
        if hours > 0:
            mailSubject += " %d hours" % hours
        if minutes > 0:
            mailSubject += " %d minutes" % minutes
        if not testMode:
            (key, mailhost) = config.getProperty("dig_settings/mail/host")
            (key, mailport) = config.getProperty("dig_settings/mail/port")
            (key, mailfrom) = config.getProperty("dig_settings/mail/from")
            (key, mailto) = config.getProperty("dig_settings/mail/to")
            mailer = Transport(host=mailhost, port=int(mailport), defaultFrom=mailfrom,
                            defaultSubject=mailSubject)
            mailer._send(None, msg, 'text/plain', 'latin1', mailto)
    except Exception, e:
        print str(e)
        sys.exit(3)

    print "%s %s" % (datetime.datetime.now(), mailSubject)
    if testMode:
        print msg
    sys.exit(1)

def hasFilter(logpath, logline):
    for logfile,pattern in FILTERS:
        if logline.find(pattern) > 0 and logfile == os.path.basename(logpath):
            return True
    return False

if __name__ == "__main__":
    main(sys.argv)
