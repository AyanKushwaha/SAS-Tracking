<!-- 
This file describes the syntax of Carmen Systems
DIG-XML documents. Some remarks in the comments
below refer to semantic issues rather than syntax,
and it's possible that these remarks belong in some
other document.

Messages in digxml are identified by three parameters.
First, each <digxml> entity (file) is identified by a
source and a timestamp. Within a <digxml>, each
<message> must have a unique serial number. Thus, each
message is identified by (source, timestamp, serial).

For each source, the last saved (timestamp, serial) is
remembered by the recieving channel. Messages with a 
(timestamp, serial) that is less than or equal to the 
(timestamp, serial) from a message previously received 
on the same channel from the same source, are dropped. 

This means that a sequence of messages can safely be
repeated, if it has been partially received before.
Note that successful reception of a message will mean
that all older messages from the same source that arrive
later to the same receiving channel will be dropped.
-->

<!-- 
This is the top level element of a DIG-XML document. 

The source attribute should uniquely identify the sender
of a digxml.

The timestamp attribute must contain a timestamp string
that uniquely identifies a file from a digxml source.

The timestamp shall be an ISO 8601 combination of UTC 
date and time with complete representation in extended 
format, with representation of fractions of seconds with up 
to six decimals preceeded by a full stop as decimal sign.
E.g. 2005-06-20T13:42:55.2425Z

DIG-XML documents should be delivered in the order implied
by their timestamp.
-->
<!ELEMENT digxml (message+) >
<!ATTLIST digxml 
    version CDATA #FIXED "0.7"
    source CDATA #REQUIRED
    timestamp CDATA #REQUIRED>

<!--
This is an individual message. Messages in a file must 
be processed in order by the receiver. The serial 
attribute should be a positive integer which uniquely
identifies a message in a file. A message must have a
higher serial attribute than any preceeding message in 
the same <digxml> entity.

Operations in a message are always processed in the
same atomic transaction. (Several messages might be
processed in the same transaction.)
-->
<!ELEMENT message 
(massupdate|massdelete|(new|update|write|delete)+)>
<!ATTLIST message 
    serial CDATA #REQUIRED>

<!-- Operations -->

<!--
Create one new entity record. Unless silenced by setting error="ignore",
an error is returned if the record already exists. All primary key and
non-null fields must be specified and given a non-null value. Any
fields not mentioned in the new element will be initialized to null.
-->
<!ELEMENT new (value+)>
<!ATTLIST new
    entity CDATA #REQUIRED
    error (report|ignore) "report">

<!--
Update one existing entity record. Unless silenced by setting 
error="ignore", an error is returned if the record doesn't exist.
Any fields not mentioned in the update element remain unchanged 
from the previous copy of the record.
-->
<!ELEMENT update (value+)>
<!ATTLIST update
    entity CDATA #REQUIRED
    error (report|ignore) "report">

<!--
Create or update one entity record. If the record already existed
the behavior is identical to <update>. If the record did not 
previously exist the behavior is identical to <new>.
-->
<!ELEMENT write (value+)>
<!ATTLIST write
    entity CDATA #REQUIRED>

<!--
Update zero or more existing entity records. It is not an error to
match zero records. The listed key fields need not belong to the 
primary key. The <key> fields determine the selection of records to 
be updated, and the <value> fields determine what fields are modified. 
The <null> element allows fields to be cleared. A massupdate must be
alone in a message.
-->
<!ELEMENT massupdate (key+,value+)>
<!ATTLIST massupdate
    entity CDATA #REQUIRED>

<!--
The delete operation removes zero or more entities. All given <key>
elements must be part of the primary key for that entity.
-->
<!ELEMENT delete (key+)>
<!ATTLIST delete
    entity CDATA #REQUIRED>

<!--
The massdelete operation deletes zero or more entities, matching 
all given <key> elements. The listed key fields need not belong 
to the primary key. A massdelete must be alone in a message.
-->
<!ELEMENT massdelete (key+)>
<!ATTLIST massdelete
    entity CDATA #REQUIRED>

<!--
The <key> and <value> elements define the attribute types and values
for an entity, as described for the operations above. 
-->
<!ELEMENT key (null|int|string|char|date|time|reltime|bool|uuid)>
<!ATTLIST key
    name CDATA #REQUIRED>
<!ELEMENT value (null|int|string|char|date|time|reltime|bool|uuid)>
<!ATTLIST value
    name CDATA #REQUIRED>

<!-- Data types 
Note that all data types except null are required to contain an
appropriate value. 
-->

<!-- The null element indicates absence of data. It's typically used
when previous data should be removed. To retain a previous value in
e.g. a write or update, the field in question should not be included-->
<!ELEMENT null EMPTY>

<!-- String is used for text-->
<!ELEMENT string (#PCDATA)>

<!-- A string with a length of one character -->
<!ELEMENT char (#PCDATA)>

<!-- integer number shall be formatted decimal with leading 
sign indicator - or (optional) + -->
<!ELEMENT int (#PCDATA)>

<!--The date shall be an ISO 8601 date YYYY-MM-DD  -->
<!ELEMENT date (#PCDATA)>

<!--The time shall be an ISO 8601  combination of UTC 
date and time with minute resolution in extended. Times
prior to 1986-01-01 are not accepted. 
format YYYY-MM-DDThh:mmZ  -->
<!ELEMENT time (#PCDATA)>

<!--The reltime shall be given with minute resolution as hh:mm  -->
<!ELEMENT reltime (#PCDATA)>

<!--The bool value may be "true" or "false" -->
<!ELEMENT bool (#PCDATA)>

<!--The uuid value is a base-64 encoded universal identifier 
string of length 24  -->
<!ELEMENT uuid (#PCDATA)>
