/*
 * This is the application specific customization file for the
 * core menu MainDat24CrewCompMode1.
 * This only includes definitions that should apply for 'Tracking'.
 */

Menu MainDat24CrewCompMode1
{
  /* replacing CARMSYS version with customized action */
  `Move`  REDO OPAQ
    f.exec PythonEvalExpr("carmusr.tracking.DragDrop.menu_move_roster()")

  `Reference Plans` f.drop
  `Change Position` f.drop
  `Show` f.drop
  `Copy` f.drop

  `Swap` f.before
  `Copy` _C REDO OPAQ
    f.exec PythonEvalExpr("carmusr.tracking.DragDrop.menu_copy_roster()")
  `Swap` ^CanSwapActivities  REDO OPAQ
    f.exec PythonEvalExpr("carmusr.tracking.DragDrop.menu_swap_roster()")
  `Swap` f.after
      f.separator
  `Find Assignable Crew...` ^Trip REDO OPAQ
    f.exec PythonEvalExpr("FindAssignableCrew.findAssignableCrew()")
  `Show` f.menu CctShowLeg
       f.separator
  
  `Transport` f.before
  `Get Next/Prev` f.menu GetNextPrevMenuTracking
  `Transport` f.after
  `Change Marked` f.menu ChangeMarkedLegsMenu  
  `Change Leg` f.menu ChangeLegMenu
  `Base Break` ^AnyBaseBreak f.menu BaseBreakMenu 
  `Duty Break` ^CanChangeDutyBreak f.menu DutyBreakMenu 
  `Change check-in/out times` ^"Trip or IsPact" f.menu BriefingMenu 
  `Change Alert Time` REDO OPAQ
    f.exec PythonEvalExpr("AlertTimeOverride.overrideAlertTime()")

  `Restore Standby`  ^"IsInfStandby"  REDO OPAQ
    f.exec PythonEvalExpr("Standby.restoreStandby()")

       f.separator

  `Replace overtime with F3...` REDO OPAQ
    f.exec PythonEvalExpr("f3_overtime_replacement.replace_dialog()")
  `Replace bought day comp. with 2 F-days...`  ^"IsFxxApplicable"  REDO OPAQ
    f.exec PythonEvalExpr("fxx_boughtday_replacement.replace_dialog()")

       f.separator


  `Notifications` f.menu AssignmentObjectNotificationsMenu
  `Rest Planning...` ^"IsLongHaul and not Deadhead" _R REDO TRANS
    f.exec PythonEvalExpr("CrewRest.startCrewRest()")       
       f.separator
 
  `Reports` f.menu AssignObjectReportMenu  
       f.separator

  `Reports` f.after
  `Properties` ^"Trip or IsPact" REDO OPAQ
		    f.exec PythonEvalExpr("MenuCommandsExt.getLegPropertiesTracking()")
   f.separator
   `Set Training Attribute` ^"IsDatabasePlan and Trip" REDO OPAQ 	f.exec PythonEvalExpr("carmusr.training_attribute_handler.set_training_attribute()")
   `Remove Trip's Training Attribute` ^"IsDatabasePlan and Trip" REDO OPAQ 	f.exec PythonEvalExpr("carmusr.training_attribute_handler.remove_training_attribute(mode=\"TRIP\")")	
    `Set Instructor Tags`  ^"IsDatabasePlan and Trip"  REDO OPAQ f.exec PythonEvalExpr("carmusr.training_attribute_handler.set_instructor_tag(mode=\"MARKED\")")  
    `Remove Instructor Tags`  ^"IsDatabasePlan and Trip"  REDO OPAQ f.exec PythonEvalExpr("carmusr.training_attribute_handler.set_instructor_tag(mode=\"MARKED\",attribute=\"NONE\")")
  f.separator

  `Audit Trail...` f.drop

  `Mark up` f.after
  `Deassign` REDO OPAQ f.exec PythonEvalExpr("carmusr.tracking.Deassign.deassign(Cui.CuiWhichArea)")
}

Menu ChangeMarkedLegsMenu
{
  `Need` ^AnyNeedToChange f.menu LegServiceNeedMenu
  `Position` ^"IsOnDuty and InSubPlan and AllMarkedUnlocked and not IsPact" _h f.menu ChangePos
  `Meal Stop` f.menu MealStopMenu
  `Hotel`  ^NeedHotel f.menu HotelMenu
    f.separator
  `Lock` REDO
    f.exec CuiUpdateTripLocks(gpc_info, CuiWhichArea, "MARKED", 1, 8)
  `Unlock` REDO
    f.exec CuiUpdateTripLocks(gpc_info, CuiWhichArea, "MARKED", 0, 8)
  `Set in charge` ^"IsCimber and IsCabin" REDO TRANS f.exec PythonEvalExpr("carmusr.Cimber.set_selected_crew_in_charge()")

  f.separator
  `To Airport Standby` ^"IsOnDuty and AllMarkedUnlocked and NotWholeDay" REDO OPAQ
    f.exec PythonEvalExpr("Standby.convertToStandby(reserve=0)")
  `To Standby at Home` ^"IsOnDuty and AllMarkedUnlocked and NotWholeDay" REDO OPAQ
    f.exec PythonEvalExpr("Standby.convertToStandby(reserve=1)")
}

Menu ChangePos
{
   /* flag=16 makes function work on segments, i.e. legs */
   `Captain` f.drop
   `FC`  !ChangePosition ^IsPilot REDO OPAQ f.exec PythonEvalExpr("carmusr.tracking.ChangePosition.changeAssignedPosition('F', 'FC')")
   `FP`  !ChangePosition ^IsPilot REDO OPAQ f.exec PythonEvalExpr("carmusr.tracking.ChangePosition.changeAssignedPosition('F', 'FP')")
   `FR`  !ChangePosition ^IsPilot REDO OPAQ f.exec PythonEvalExpr("carmusr.tracking.ChangePosition.changeAssignedPosition('F', 'FR')")
   `FU`  !ChangePosition ^IsPilot REDO OPAQ f.exec PythonEvalExpr("carmusr.tracking.ChangePosition.changeAssignedPosition('F', 'FU')")
   f.separator                                                                                                             
   `AP`  !ChangePosition ^"IsCabin and not IsCimber" REDO OPAQ f.exec PythonEvalExpr("carmusr.tracking.ChangePosition.changeAssignedPosition('C', 'AP')")
   `AH`  !ChangePosition ^IsCabin REDO OPAQ f.exec PythonEvalExpr("carmusr.tracking.ChangePosition.changeAssignedPosition('C', 'AH')")
   `AS`  !ChangePosition ^"IsCabin and not IsCimber" REDO OPAQ f.exec PythonEvalExpr("carmusr.tracking.ChangePosition.changeAssignedPosition('C', 'AS')")
   `AU`  !ChangePosition ^IsCabin REDO OPAQ f.exec PythonEvalExpr("carmusr.tracking.ChangePosition.changeAssignedPosition('C', 'AU')")
   f.separator
   `TL`  !ChangePosition ^IsGroundDutyLeg REDO OPAQ f.exec PythonEvalExpr("carmusr.tracking.ChangePosition.changeAssignedPosition('T', 'TL')")
   `TR`  !ChangePosition ^IsGroundDutyLeg REDO OPAQ f.exec PythonEvalExpr("carmusr.tracking.ChangePosition.changeAssignedPosition('T', 'TR')")
}

Menu ChangeLegMenu 
{
  `To/from Deadhead` !ChangetofromDeadhead ^"Unlocked and IsFlightDuty and IsOperating" REDO OPAQ
    f.exec PythonEvalExpr("carmusr.tracking.DeadHead.convertFromToDeadHead()")
  `To/from Private` ^"Deadhead and IsFlightDuty" REDO OPAQ
    f.exec PythonEvalExpr("carmusr.tracking.DeadHead.convertFromToPrivate()")
}

Menu BaseBreakMenu
{
  `Set Base Break Before` ^CanBaseBreakBefore REDO OPAQ
    f.exec PythonEvalExpr("BaseBreak.set('BEFORE')")
  `Set Base Break After`  ^CanBaseBreakAfter REDO OPAQ
    f.exec PythonEvalExpr("BaseBreak.set('AFTER')")
  `Remove Base Break Before` ^IsBaseBreakBefore REDO OPAQ
    f.exec PythonEvalExpr("BaseBreak.remove('BEFORE')")
  `Remove Base Break After` ^IsBaseBreakAfter REDO OPAQ
    f.exec PythonEvalExpr("BaseBreak.remove('AFTER')")
}

Menu DutyBreakMenu
{
  `No change`  ^HasManualDutyAttr REDO OPAQ
    f.exec PythonEvalExpr("duty_break_handler.clear_attribute()")
  `Break duty` ^IsNotManualDutyBreak REDO OPAQ
    f.exec PythonEvalExpr("duty_break_handler.set_break_attribute()")
  `Merge with next` ^IsNotManualDutyMerge REDO OPAQ
    f.exec PythonEvalExpr("duty_break_handler.set_merge_attribute()")
}

Menu BriefingMenu {
  `Set Times...` REDO OPAQ
    f.exec PythonEvalExpr("CheckInOut.setCheckInOutTimes()")
  `Freeze/Unfreeze Check-in` ^HasCheckIn REDO OPAQ
    f.exec PythonEvalExpr("CheckInOut.freezeUnfreezeBriefingTime()")
  `Freeze Estimated Block-off` ^HasCheckIn REDO OPAQ
    f.exec PythonEvalExpr("CheckInOut.freezeEstimatedBlockOff()")
  `Unfreeze Estimated Block-off` ^IsEstimatedBlockOffFrozen REDO OPAQ
    f.exec PythonEvalExpr("CheckInOut.unfreezeEstimatedBlockOff()")
}

Menu AssignObjectReportMenu
{
  `Crew List`  
    _C REDO TRANS f.exec PythonEvalExpr("report_sources.hidden.FlightCrewList.runReport()")
  `Ordered Meals` ^IsFlightDuty  
    _M REDO TRANS f.exec PythonEvalExpr("report_sources.hidden.OrderedMeals.runReport()")    
  `Trip Info`
    _T REDO TRANS f.exec CuiCrgDisplayTypesetReport(gpc_info, CuiWhichArea, "object", "assignment_window_object/TripInfo.py", 0)
  `Audit Trail Leg` !last
    _A REDO TRANS f.exec PythonEvalExpr("carmusr.SKLegAuditTrail.Show()")
}

Menu GetNextPrevMenuTracking
{
  `Next Deadhead` f.menu NextDeadheadMenu
  `Previous Deadhead`f.menu PreviousDeadheadMenu
}

Menu NextDeadheadMenu
{
  `All` REDO OPAQ f.exec
    PythonEvalExpr("MenuCommandsExt.getFilteredNextPrevDH(noStartBeforeUtc='NOW')")
  `Connection/Base` REDO OPAQ f.exec
    PythonEvalExpr("MenuCommandsExt.getFilteredNextPrevDH(anyAirport='No',noStartBeforeUtc='NOW')")
}

Menu PreviousDeadheadMenu
{
  `All` REDO OPAQ f.exec
    PythonEvalExpr("MenuCommandsExt.getFilteredNextPrevDH(prev='Yes',noStartBeforeUtc='NOW')")
  `Connection/Base` REDO OPAQ f.exec
    PythonEvalExpr("MenuCommandsExt.getFilteredNextPrevDH(prev='Yes',anyAirport='No',noStartBeforeUtc='NOW')")
}

Menu AssignmentObjectNotificationsMenu
{
  `Create Notification` _C
    REDO TRANS f.exec PythonEvalExpr("CrewNotificationFunctions.startCrewNotification('assignment_object')")
}

Menu Transport
{
  `Create before...`
  REDO OPAQ
  f.exec
  PythonEvalExpr("carmensystems.studio.Tracking.CreateFlight.createTo()")
  
  `Create after...`
  REDO OPAQ
  f.exec
  PythonEvalExpr("carmensystems.studio.Tracking.CreateFlight.createFrom()")
  
  `Check Time Table...` f.drop 
  f.separator

  `Set local transport`
  ^CanSetLocalTransport
  REDO OPAQ
  f.exec
  PythonEvalExpr("carmusr.tracking.Transport.setTransportTime()")
  
  `Create after...` f.after
  
  `Get transport before...`
  REDO OPAQ
  f.exec
  PythonEvalExpr("carmusr.tracking.GetTransport.selectTo()")
  
  `Get transport after...`
  REDO OPAQ
  f.exec
  PythonEvalExpr("carmusr.tracking.GetTransport.selectFrom()")
}

Menu MealStopMenu
{
  `Force Stop` 	REDO OPAQ f.exec PythonEvalExpr("carmusr.tracking.CrewMeal.meal_stop_force_stop()")
  `Force No Stop` 	REDO OPAQ f.exec PythonEvalExpr("carmusr.tracking.CrewMeal.meal_stop_force_no_stop()")
  `Automatic (No force)`	REDO OPAQ f.exec PythonEvalExpr("carmusr.tracking.CrewMeal.meal_stop_automatic()")
}

Menu HotelMenu
   PythonEvalExpr("hotel_transport.HotelHandler.hotelMenu('HotelMenu')")
{
}

Menu CctShowLeg
{
  `Rosters` f.drop
  `Trips` f.drop
  `Rotations` f.drop
  `Rosters` `_eRosters` f.exec CuiShowLeg(gpc_info, CuiWhichArea, "Marked", CrewMode, CuiSortRuleValue, "studio_select.%sort_crew_at_show_rosters%", 1)
  `Trips` `_Trips` f.exec CuiShowLeg(gpc_info, CuiWhichArea, "Marked", CrrMode)
  `Rotations` `_Rotations` f.exec CuiShowLeg(gpc_info,CuiWhichArea, "Marked", AcRotMode)
}

/* end of file */
