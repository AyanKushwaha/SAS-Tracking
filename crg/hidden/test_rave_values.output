/* -*- crg -*-
**
** $Header$
**
** This report lists a couple of variables that shall be checked.
**
** Used for autotest (texttest).
**/

define(NameOfReport,"test_rave_values.output")
include(CRGInclude/typeset_standard.inc)

/* Set indentation of the various sections */
define(CHAIN_INDENT, 0)
define(TRIP_INDENT, 2)
define(DUTY_INDENT, 4)
define(LEG_INDENT, 6)

/* Set difference between indentation of header and the elements */
define(INDENT_DIFF, 2)

/* Set headers */
define(CHAIN_HEADER, "CHAIN VALUES:")
define(TRIP_HEADER, "TRIP VALUES:")
define(DUTY_HEADER, "DUTY VALUES:")
define(LEG_HEADER, "LEG VALUES:")

/* Remove frames */
define(frame, )

/* Global options */
options
    /* Page size */
    ascwidth = 100;
    ascheight = 5000;
    ascii = asctrimpage;
end

main_box:
box
    repeat foreach iterators.chain_set;
    sort crg_texttest.%chain_default_sort%;
    make
	/* List chain dependent values */
	chain: box chain_elements(CHAIN_INDENT);

	/* List trip dependent values for this chain */
	repeat foreach iterators.trip_set;
	sort crg_texttest.%trip_default_sort%;
	make
	    /* List trip dependent values */
	    trip: box trip_elements(TRIP_INDENT);

	    /* List duty dependent values for this trip */
	    repeat foreach iterators.duty_set;
	    sort crg_texttest.%duty_default_sort%;
	    make
		/* List duty dependent values */
		duty: box duty_elements(DUTY_INDENT);

		/* List leg dependent values for this duty */
		repeat foreach iterators.leg_set;
		sort crg_texttest.%leg_default_sort%;
		make
		    leg: box leg_elements(LEG_INDENT);
                    leg_section: column frame (row leg, *);

		relate
		    column +leg_section, leg_section;
		end
                duty_section: column frame (row duty, *), -+leg_section;

	    relate
		column +duty_section, duty_section;

	    end
	    trip_section: column frame (row trip, *), -+duty_section;

	relate
	    column +trip_section, trip_section;

	end
	chain_section: column frame !, (row chain, *), -+trip_section, (text 1x1 "");
	 
    relate
	column +chain_section, page, chain_section;

    end
end


indentation:
box(indent)
    /* Create a row with 'indent' blank characters */
    repeat indent times;
    make
	ind: text 1x1 "";
    relate
	row +ind, ind;
    end
end

chain_elements:
box(indent)
    /* List all chain values */
    repeat crg_texttest.%chain_nr_elements% times;
    make
        if crg_texttest.%chain_element_exist%(index) then
	    chain_element_name:  text "%s:", crg_texttest.%chain_element_name%(index);
	    chain_element_value: text " %s", crg_texttest.%chain_element_value%(index);
	    chain_element_row: row (box indentation(indent+INDENT_DIFF)), chain_element_name, chain_element_value, *;
	end		      
    relate
	if crg_texttest.%chain_element_exist%(index) then
	    column +chain_element_row, page, chain_element_row;
        end
    end
    if crg_texttest.%chain_nr_elements% > 0 then
        column frame (row (box indentation(indent)), (text "%s", CHAIN_HEADER), *), -+chain_element_row;
    end
end

trip_elements:
box(indent)
    /* List all trip values */
    repeat crg_texttest.%trip_nr_elements% times;
    make
        if crg_texttest.%trip_element_exist%(index) then
	    trip_element_name:  text "%s:", crg_texttest.%trip_element_name%(index);
	    trip_element_value: text " %s", crg_texttest.%trip_element_value%(index);
	    trip_element_row: row (box indentation(indent+INDENT_DIFF)), trip_element_name, trip_element_value, *;
        end
    relate
	if crg_texttest.%trip_element_exist%(index) then
	    column +trip_element_row, page, trip_element_row;
	end
    end
    if crg_texttest.%trip_nr_elements% > 0 then
        column frame (row (box indentation(indent)), (text "%s", TRIP_HEADER), *), -+trip_element_row;
    end
end

duty_elements:
box(indent)
    /* List all duty values */
    repeat crg_texttest.%duty_nr_elements% times;
    make
	if crg_texttest.%duty_element_exist%(index) then
	    duty_element_name:  text "%s:", crg_texttest.%duty_element_name%(index);
	    duty_element_value: text " %s", crg_texttest.%duty_element_value%(index);
	    duty_element_row: row (box indentation(indent+INDENT_DIFF)), duty_element_name, duty_element_value, *;
        end
    relate
	if crg_texttest.%duty_element_exist%(index) then
	    column +duty_element_row, page, duty_element_row;
        end
    end
    if crg_texttest.%duty_nr_elements% > 0 then
	column frame (row (box indentation(indent)), (text "%s", DUTY_HEADER), *), -+duty_element_row;
    end
end

leg_elements:
box(indent)
    /* List all leg values */
    repeat crg_texttest.%leg_nr_elements% times;
    make
	if crg_texttest.%leg_element_exist%(index) then
	    leg_element_name:  text "%s:", crg_texttest.%leg_element_name%(index);
	    leg_element_value: text " %s", crg_texttest.%leg_element_value%(index);
	    leg_element_row: row (box indentation(indent+INDENT_DIFF)), leg_element_name, leg_element_value, *;
        end
    relate
	if crg_texttest.%leg_element_exist%(index) then
	    column +leg_element_row, page, leg_element_row;
        end
    end
    if crg_texttest.%leg_nr_elements% > 0 then
        column frame (row (box indentation(indent)), (text "%s", LEG_HEADER), *), -+leg_element_row;
    end
end

